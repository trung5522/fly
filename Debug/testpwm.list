
testpwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af4c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800b060  0800b060  0001b060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b118  0800b118  000200b8  2**0
                  CONTENTS
  4 .ARM          00000000  0800b118  0800b118  000200b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b118  0800b118  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b118  0800b118  0001b118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b11c  0800b11c  0001b11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800b120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  200000b8  0800b1d8  000200b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  0800b1d8  000203e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d814  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab8  00000000  00000000  0002d8f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  0002f3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e20  00000000  00000000  00030280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001804f  00000000  00000000  000310a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010183  00000000  00000000  000490ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c491  00000000  00000000  00059272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5703  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004868  00000000  00000000  000e5754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000b8 	.word	0x200000b8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b044 	.word	0x0800b044

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000bc 	.word	0x200000bc
 800014c:	0800b044 	.word	0x0800b044

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dc6:	2afd      	cmp	r2, #253	; 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	; 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	; 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	; 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__gesf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295
 8001018:	e006      	b.n	8001028 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__lesf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpsf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001030:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	bf18      	it	ne
 800103a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800103e:	d011      	beq.n	8001064 <__cmpsf2+0x40>
 8001040:	b001      	add	sp, #4
 8001042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001046:	bf18      	it	ne
 8001048:	ea90 0f01 	teqne	r0, r1
 800104c:	bf58      	it	pl
 800104e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001052:	bf88      	it	hi
 8001054:	17c8      	asrhi	r0, r1, #31
 8001056:	bf38      	it	cc
 8001058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800105c:	bf18      	it	ne
 800105e:	f040 0001 	orrne.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	d102      	bne.n	8001070 <__cmpsf2+0x4c>
 800106a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800106e:	d105      	bne.n	800107c <__cmpsf2+0x58>
 8001070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001074:	d1e4      	bne.n	8001040 <__cmpsf2+0x1c>
 8001076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107a:	d0e1      	beq.n	8001040 <__cmpsf2+0x1c>
 800107c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_cfrcmple>:
 8001084:	4684      	mov	ip, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4661      	mov	r1, ip
 800108a:	e7ff      	b.n	800108c <__aeabi_cfcmpeq>

0800108c <__aeabi_cfcmpeq>:
 800108c:	b50f      	push	{r0, r1, r2, r3, lr}
 800108e:	f7ff ffc9 	bl	8001024 <__cmpsf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	bf48      	it	mi
 8001096:	f110 0f00 	cmnmi.w	r0, #0
 800109a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800109c <__aeabi_fcmpeq>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff fff4 	bl	800108c <__aeabi_cfcmpeq>
 80010a4:	bf0c      	ite	eq
 80010a6:	2001      	moveq	r0, #1
 80010a8:	2000      	movne	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmplt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffea 	bl	800108c <__aeabi_cfcmpeq>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmple>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffe0 	bl	800108c <__aeabi_cfcmpeq>
 80010cc:	bf94      	ite	ls
 80010ce:	2001      	movls	r0, #1
 80010d0:	2000      	movhi	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmpge>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffd2 	bl	8001084 <__aeabi_cfrcmple>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpgt>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffc8 	bl	8001084 <__aeabi_cfrcmple>
 80010f4:	bf34      	ite	cc
 80010f6:	2001      	movcc	r0, #1
 80010f8:	2000      	movcs	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_fcmpun>:
 8001100:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001104:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001108:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800110c:	d102      	bne.n	8001114 <__aeabi_fcmpun+0x14>
 800110e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001112:	d108      	bne.n	8001126 <__aeabi_fcmpun+0x26>
 8001114:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001118:	d102      	bne.n	8001120 <__aeabi_fcmpun+0x20>
 800111a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800111e:	d102      	bne.n	8001126 <__aeabi_fcmpun+0x26>
 8001120:	f04f 0000 	mov.w	r0, #0
 8001124:	4770      	bx	lr
 8001126:	f04f 0001 	mov.w	r0, #1
 800112a:	4770      	bx	lr

0800112c <__aeabi_f2iz>:
 800112c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001130:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001134:	d30f      	bcc.n	8001156 <__aeabi_f2iz+0x2a>
 8001136:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800113a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800113e:	d90d      	bls.n	800115c <__aeabi_f2iz+0x30>
 8001140:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001144:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001148:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800114c:	fa23 f002 	lsr.w	r0, r3, r2
 8001150:	bf18      	it	ne
 8001152:	4240      	negne	r0, r0
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr
 800115c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001160:	d101      	bne.n	8001166 <__aeabi_f2iz+0x3a>
 8001162:	0242      	lsls	r2, r0, #9
 8001164:	d105      	bne.n	8001172 <__aeabi_f2iz+0x46>
 8001166:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800116a:	bf08      	it	eq
 800116c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001170:	4770      	bx	lr
 8001172:	f04f 0000 	mov.w	r0, #0
 8001176:	4770      	bx	lr

08001178 <setupMPU>:
float zeta = sqrt(3.0f / 4.0f) * PI * (0.0 / 180.0);
double deltaT = 0.0;
uint32_t newTime = 0;
uint32_t oldTime = 0;

uint8_t setupMPU(MPU9250_t *MPU9250, uint8_t addr) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	70fb      	strb	r3, [r7, #3]
        // addr should be valid for MPU
//	char badmpu1[] = "CHECK SETUP\n\r";
//	HAL_UART_Transmit(&huart6, badmpu1, strlen((char *)badmpu1), 0xFFFF);
        if ((addr>>1 < MPU9250_DEFAULT_ADDRESS) || (addr>>1 > MPU9250_DEFAULT_ADDRESS + 7)) {
 8001184:	78fb      	ldrb	r3, [r7, #3]
 8001186:	085b      	lsrs	r3, r3, #1
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b67      	cmp	r3, #103	; 0x67
 800118c:	d904      	bls.n	8001198 <setupMPU+0x20>
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	085b      	lsrs	r3, r3, #1
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b6f      	cmp	r3, #111	; 0x6f
 8001196:	d901      	bls.n	800119c <setupMPU+0x24>
//        	char badmpu[] = "Bad Address\n\r";
//        	HAL_UART_Transmit(&huart6, badmpu, strlen((char *)badmpu), 0xFFFF);
            return 0;
 8001198:	2300      	movs	r3, #0
 800119a:	e02f      	b.n	80011fc <setupMPU+0x84>
        }
        //mpu_i2c_addr = addr;
        MPU9250SelfTest(&hi2c1, SelfTest);
 800119c:	4919      	ldr	r1, [pc, #100]	; (8001204 <setupMPU+0x8c>)
 800119e:	481a      	ldr	r0, [pc, #104]	; (8001208 <setupMPU+0x90>)
 80011a0:	f002 fd86 	bl	8003cb0 <MPU9250SelfTest>
        calibrateMPU9250(&hi2c1, gyroBias, accelBias);
 80011a4:	4a19      	ldr	r2, [pc, #100]	; (800120c <setupMPU+0x94>)
 80011a6:	491a      	ldr	r1, [pc, #104]	; (8001210 <setupMPU+0x98>)
 80011a8:	4817      	ldr	r0, [pc, #92]	; (8001208 <setupMPU+0x90>)
 80011aa:	f003 fa49 	bl	8004640 <calibrateMPU9250>
   		HAL_Delay(1000);
 80011ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011b2:	f005 fac5 	bl	8006740 <HAL_Delay>

        if (isConnectedMPU9250(MPU9250)==1) {
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 f82c 	bl	8001214 <isConnectedMPU9250>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d117      	bne.n	80011f2 <setupMPU+0x7a>
        	MPU9250_Init(MPU9250);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 fd16 	bl	8001bf4 <MPU9250_Init>
            if (isConnectedAK8963(MPU9250)==1)
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f000 f850 	bl	800126e <isConnectedAK8963>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d108      	bne.n	80011e6 <setupMPU+0x6e>
                initAK8963(MPU9250);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 fc91 	bl	8001afc <initAK8963>
//        	char badmpu[] = "Check MPU ADDRESS\n\r";
//        	HAL_UART_Transmit(&huart6, badmpu, strlen((char *)badmpu), 0xFFFF);
        	MPU9250->has_connected = 0;
            return 0;
        }
        MPU9250->has_connected = 1;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        return 1;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00a      	b.n	80011fc <setupMPU+0x84>
            	MPU9250->has_connected = 0;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
                return 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	e004      	b.n	80011fc <setupMPU+0x84>
        	MPU9250->has_connected = 0;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
            return 0;
 80011fa:	2300      	movs	r3, #0
    }
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200000d4 	.word	0x200000d4
 8001208:	200002b0 	.word	0x200002b0
 800120c:	200000f8 	.word	0x200000f8
 8001210:	200000ec 	.word	0x200000ec

08001214 <isConnectedMPU9250>:
	            c = c & 0xBF;  // mask 1011111 keeps all the previous bits
	        }
	        writeByte(MPU9250_ADDRESS, PWR_MGMT_1, c);
}

uint8_t isConnectedMPU9250(){
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
	uint8_t c = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
 800121a:	2175      	movs	r1, #117	; 0x75
 800121c:	20d0      	movs	r0, #208	; 0xd0
 800121e:	f000 fdf7 	bl	8001e10 <readByte>
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
	uint8_t b = (c == MPU9250_WHOAMI_DEFAULT_VALUE);
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2b71      	cmp	r3, #113	; 0x71
 800122a:	bf0c      	ite	eq
 800122c:	2301      	moveq	r3, #1
 800122e:	2300      	movne	r3, #0
 8001230:	b2db      	uxtb	r3, r3
 8001232:	71bb      	strb	r3, [r7, #6]
	b |= (c == MPU9255_WHOAMI_DEFAULT_VALUE);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	2b73      	cmp	r3, #115	; 0x73
 8001238:	bf0c      	ite	eq
 800123a:	2301      	moveq	r3, #1
 800123c:	2300      	movne	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	b25a      	sxtb	r2, r3
 8001242:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001246:	4313      	orrs	r3, r2
 8001248:	b25b      	sxtb	r3, r3
 800124a:	71bb      	strb	r3, [r7, #6]
	b |= (c == MPU6500_WHOAMI_DEFAULT_VALUE);
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	2b70      	cmp	r3, #112	; 0x70
 8001250:	bf0c      	ite	eq
 8001252:	2301      	moveq	r3, #1
 8001254:	2300      	movne	r3, #0
 8001256:	b2db      	uxtb	r3, r3
 8001258:	b25a      	sxtb	r2, r3
 800125a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800125e:	4313      	orrs	r3, r2
 8001260:	b25b      	sxtb	r3, r3
 8001262:	71bb      	strb	r3, [r7, #6]
	return b;
 8001264:	79bb      	ldrb	r3, [r7, #6]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <isConnectedAK8963>:
uint8_t isConnectedAK8963(){
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
	uint8_t c = readByte(AK8963_ADDRESS, WHO_AM_I_AK8963);
 8001274:	2100      	movs	r1, #0
 8001276:	2018      	movs	r0, #24
 8001278:	f000 fdca 	bl	8001e10 <readByte>
 800127c:	4603      	mov	r3, r0
 800127e:	71fb      	strb	r3, [r7, #7]
	return (c == AK8963_WHOAMI_DEFAULT_VALUE);
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	2b48      	cmp	r3, #72	; 0x48
 8001284:	bf0c      	ite	eq
 8001286:	2301      	moveq	r3, #1
 8001288:	2300      	movne	r3, #0
 800128a:	b2db      	uxtb	r3, r3
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <MPUavailable>:

uint8_t MPUisSleeping(){
	uint8_t c = readByte(MPU9250_ADDRESS, PWR_MGMT_1);
	return (c & 0x40) == 0x40;
}
uint8_t MPUavailable(MPU9250_t *MPU9250){
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	return MPU9250 -> has_connected && (readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00a      	beq.n	80012bc <MPUavailable+0x28>
 80012a6:	213a      	movs	r1, #58	; 0x3a
 80012a8:	20d0      	movs	r0, #208	; 0xd0
 80012aa:	f000 fdb1 	bl	8001e10 <readByte>
 80012ae:	4603      	mov	r3, r0
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MPUavailable+0x28>
 80012b8:	2301      	movs	r3, #1
 80012ba:	e000      	b.n	80012be <MPUavailable+0x2a>
 80012bc:	2300      	movs	r3, #0
 80012be:	b2db      	uxtb	r3, r3
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <updateMPU>:

uint8_t updateMPU(MPU9250_t *MPU9250){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b092      	sub	sp, #72	; 0x48
 80012cc:	af06      	add	r7, sp, #24
 80012ce:	6078      	str	r0, [r7, #4]
	if (!(MPUavailable(MPU9250)==1)) return 0;
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ffdf 	bl	8001294 <MPUavailable>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d001      	beq.n	80012e0 <updateMPU+0x18>
 80012dc:	2300      	movs	r3, #0
 80012de:	e0a5      	b.n	800142c <updateMPU+0x164>

	        update_accel_gyro(MPU9250);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f000 fa0d 	bl	8001700 <update_accel_gyro>
	        update_mag(MPU9250);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 faa6 	bl	8001838 <update_mag>
	        // get quaternion based on aircraft coordinate (Right-Hand, X-Forward, Z-Down)
	        // acc[mg], gyro[deg/s], mag [mG]
	        // gyro will be convert from [deg/s] to [rad/s] inside of this function
	        // quat_filter.update(-a[0], a[1], a[2], g[0] * DEG_TO_RAD, -g[1] * DEG_TO_RAD, -g[2] * DEG_TO_RAD, m[1], -m[0], m[2], q);

	        float an = -MPU9250->a[0];
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80012f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80012f4:	62bb      	str	r3, [r7, #40]	; 0x28
	        float ae = +MPU9250->a[1];
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
	        float ad = +MPU9250->a[2];
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001300:	623b      	str	r3, [r7, #32]
	        float gn = +MPU9250->g[0] * DEG_TO_RAD;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f886 	bl	8000418 <__aeabi_f2d>
 800130c:	a34a      	add	r3, pc, #296	; (adr r3, 8001438 <updateMPU+0x170>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7ff f8d9 	bl	80004c8 <__aeabi_dmul>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	4b47      	ldr	r3, [pc, #284]	; (8001440 <updateMPU+0x178>)
 8001324:	f7ff f9fa 	bl	800071c <__aeabi_ddiv>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f7ff fbc2 	bl	8000ab8 <__aeabi_d2f>
 8001334:	4603      	mov	r3, r0
 8001336:	61fb      	str	r3, [r7, #28]
	        float ge = -MPU9250->g[1] * DEG_TO_RAD;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800133c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f869 	bl	8000418 <__aeabi_f2d>
 8001346:	a33c      	add	r3, pc, #240	; (adr r3, 8001438 <updateMPU+0x170>)
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	f7ff f8bc 	bl	80004c8 <__aeabi_dmul>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	4b38      	ldr	r3, [pc, #224]	; (8001440 <updateMPU+0x178>)
 800135e:	f7ff f9dd 	bl	800071c <__aeabi_ddiv>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f7ff fba5 	bl	8000ab8 <__aeabi_d2f>
 800136e:	4603      	mov	r3, r0
 8001370:	61bb      	str	r3, [r7, #24]
	        float gd = -MPU9250->g[2] * DEG_TO_RAD;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001378:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f84b 	bl	8000418 <__aeabi_f2d>
 8001382:	a32d      	add	r3, pc, #180	; (adr r3, 8001438 <updateMPU+0x170>)
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	f7ff f89e 	bl	80004c8 <__aeabi_dmul>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	4b29      	ldr	r3, [pc, #164]	; (8001440 <updateMPU+0x178>)
 800139a:	f7ff f9bf 	bl	800071c <__aeabi_ddiv>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	f7ff fb87 	bl	8000ab8 <__aeabi_d2f>
 80013aa:	4603      	mov	r3, r0
 80013ac:	617b      	str	r3, [r7, #20]
	        float mn = +MPU9250->m[1];
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013b4:	613b      	str	r3, [r7, #16]
	        float me = -MPU9250->m[0];
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80013c0:	60fb      	str	r3, [r7, #12]
	        float md = +MPU9250->m[2];
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013c8:	60bb      	str	r3, [r7, #8]

	        for (size_t i = 0; i < MPU9250->n_filter_iter; ++i) {
 80013ca:	2300      	movs	r3, #0
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ce:	e015      	b.n	80013fc <updateMPU+0x134>

	        	update_madgwick(an, ae, ad, gn, ge, gd, mn, me, md, MPU9250->q);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3390      	adds	r3, #144	; 0x90
 80013d4:	9305      	str	r3, [sp, #20]
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	9304      	str	r3, [sp, #16]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	9303      	str	r3, [sp, #12]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	9302      	str	r3, [sp, #8]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	6a3a      	ldr	r2, [r7, #32]
 80013ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013f2:	f000 fe65 	bl	80020c0 <update_madgwick>
	        for (size_t i = 0; i < MPU9250->n_filter_iter; ++i) {
 80013f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f8:	3301      	adds	r3, #1
 80013fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001404:	429a      	cmp	r2, r3
 8001406:	d3e3      	bcc.n	80013d0 <updateMPU+0x108>
	        }


	        update_rpy(MPU9250, MPU9250->q[0], MPU9250->q[1], MPU9250->q[2], MPU9250->q[3]);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	4603      	mov	r3, r0
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 f80f 	bl	8001448 <update_rpy>

	        return 1;
 800142a:	2301      	movs	r3, #1
}
 800142c:	4618      	mov	r0, r3
 800142e:	3730      	adds	r7, #48	; 0x30
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	f3af 8000 	nop.w
 8001438:	54442d18 	.word	0x54442d18
 800143c:	400921fb 	.word	0x400921fb
 8001440:	40668000 	.word	0x40668000
 8001444:	00000000 	.word	0x00000000

08001448 <update_rpy>:

void setMagneticDeclination(MPU9250_t *MPU9250, const float d) {
	MPU9250->magnetic_declination = d;
}

void update_rpy(MPU9250_t *MPU9250, float qw, float qx, float qy, float qz){
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b08b      	sub	sp, #44	; 0x2c
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	603b      	str	r3, [r7, #0]
	        // These arise from the definition of the homogeneous rotation matrix constructed from quaternions.
	        // Tait-Bryan angles as well as Euler angles are non-commutative; that is, the get the correct orientation the rotations must be
	        // applied in the correct order which for this configuration is yaw, pitch, and then roll.
	        // For more see http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles which has additional links.
	        float a12, a22, a31, a32, a33;  // rotation matrix coefficients for Euler angles and gravity components
	        a12 = 2.0f * (qx * qy + qw * qz);
 8001456:	6839      	ldr	r1, [r7, #0]
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff fc8b 	bl	8000d74 <__aeabi_fmul>
 800145e:	4603      	mov	r3, r0
 8001460:	461c      	mov	r4, r3
 8001462:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001464:	68b8      	ldr	r0, [r7, #8]
 8001466:	f7ff fc85 	bl	8000d74 <__aeabi_fmul>
 800146a:	4603      	mov	r3, r0
 800146c:	4619      	mov	r1, r3
 800146e:	4620      	mov	r0, r4
 8001470:	f7ff fb78 	bl	8000b64 <__addsf3>
 8001474:	4603      	mov	r3, r0
 8001476:	4619      	mov	r1, r3
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fb73 	bl	8000b64 <__addsf3>
 800147e:	4603      	mov	r3, r0
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
	        a22 = qw * qw + qx * qx - qy * qy - qz * qz;
 8001482:	68b9      	ldr	r1, [r7, #8]
 8001484:	68b8      	ldr	r0, [r7, #8]
 8001486:	f7ff fc75 	bl	8000d74 <__aeabi_fmul>
 800148a:	4603      	mov	r3, r0
 800148c:	461c      	mov	r4, r3
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff fc6f 	bl	8000d74 <__aeabi_fmul>
 8001496:	4603      	mov	r3, r0
 8001498:	4619      	mov	r1, r3
 800149a:	4620      	mov	r0, r4
 800149c:	f7ff fb62 	bl	8000b64 <__addsf3>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461c      	mov	r4, r3
 80014a4:	6839      	ldr	r1, [r7, #0]
 80014a6:	6838      	ldr	r0, [r7, #0]
 80014a8:	f7ff fc64 	bl	8000d74 <__aeabi_fmul>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4619      	mov	r1, r3
 80014b0:	4620      	mov	r0, r4
 80014b2:	f7ff fb55 	bl	8000b60 <__aeabi_fsub>
 80014b6:	4603      	mov	r3, r0
 80014b8:	461c      	mov	r4, r3
 80014ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80014bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80014be:	f7ff fc59 	bl	8000d74 <__aeabi_fmul>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4619      	mov	r1, r3
 80014c6:	4620      	mov	r0, r4
 80014c8:	f7ff fb4a 	bl	8000b60 <__aeabi_fsub>
 80014cc:	4603      	mov	r3, r0
 80014ce:	623b      	str	r3, [r7, #32]
	        a31 = 2.0f * (qw * qx + qy * qz);
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	68b8      	ldr	r0, [r7, #8]
 80014d4:	f7ff fc4e 	bl	8000d74 <__aeabi_fmul>
 80014d8:	4603      	mov	r3, r0
 80014da:	461c      	mov	r4, r3
 80014dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80014de:	6838      	ldr	r0, [r7, #0]
 80014e0:	f7ff fc48 	bl	8000d74 <__aeabi_fmul>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4619      	mov	r1, r3
 80014e8:	4620      	mov	r0, r4
 80014ea:	f7ff fb3b 	bl	8000b64 <__addsf3>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4619      	mov	r1, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fb36 	bl	8000b64 <__addsf3>
 80014f8:	4603      	mov	r3, r0
 80014fa:	61fb      	str	r3, [r7, #28]
	        a32 = 2.0f * (qx * qz - qw * qy);
 80014fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fc38 	bl	8000d74 <__aeabi_fmul>
 8001504:	4603      	mov	r3, r0
 8001506:	461c      	mov	r4, r3
 8001508:	6839      	ldr	r1, [r7, #0]
 800150a:	68b8      	ldr	r0, [r7, #8]
 800150c:	f7ff fc32 	bl	8000d74 <__aeabi_fmul>
 8001510:	4603      	mov	r3, r0
 8001512:	4619      	mov	r1, r3
 8001514:	4620      	mov	r0, r4
 8001516:	f7ff fb23 	bl	8000b60 <__aeabi_fsub>
 800151a:	4603      	mov	r3, r0
 800151c:	4619      	mov	r1, r3
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fb20 	bl	8000b64 <__addsf3>
 8001524:	4603      	mov	r3, r0
 8001526:	61bb      	str	r3, [r7, #24]
	        a33 = qw * qw - qx * qx - qy * qy + qz * qz;
 8001528:	68b9      	ldr	r1, [r7, #8]
 800152a:	68b8      	ldr	r0, [r7, #8]
 800152c:	f7ff fc22 	bl	8000d74 <__aeabi_fmul>
 8001530:	4603      	mov	r3, r0
 8001532:	461c      	mov	r4, r3
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff fc1c 	bl	8000d74 <__aeabi_fmul>
 800153c:	4603      	mov	r3, r0
 800153e:	4619      	mov	r1, r3
 8001540:	4620      	mov	r0, r4
 8001542:	f7ff fb0d 	bl	8000b60 <__aeabi_fsub>
 8001546:	4603      	mov	r3, r0
 8001548:	461c      	mov	r4, r3
 800154a:	6839      	ldr	r1, [r7, #0]
 800154c:	6838      	ldr	r0, [r7, #0]
 800154e:	f7ff fc11 	bl	8000d74 <__aeabi_fmul>
 8001552:	4603      	mov	r3, r0
 8001554:	4619      	mov	r1, r3
 8001556:	4620      	mov	r0, r4
 8001558:	f7ff fb02 	bl	8000b60 <__aeabi_fsub>
 800155c:	4603      	mov	r3, r0
 800155e:	461c      	mov	r4, r3
 8001560:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001562:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001564:	f7ff fc06 	bl	8000d74 <__aeabi_fmul>
 8001568:	4603      	mov	r3, r0
 800156a:	4619      	mov	r1, r3
 800156c:	4620      	mov	r0, r4
 800156e:	f7ff faf9 	bl	8000b64 <__addsf3>
 8001572:	4603      	mov	r3, r0
 8001574:	617b      	str	r3, [r7, #20]
	        MPU9250->rpy[0] = atan2f(a31, a33);
 8001576:	6979      	ldr	r1, [r7, #20]
 8001578:	69f8      	ldr	r0, [r7, #28]
 800157a:	f008 fbb5 	bl	8009ce8 <atan2f>
 800157e:	4602      	mov	r2, r0
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	        MPU9250->rpy[1] = -asinf(a32);
 8001586:	69b8      	ldr	r0, [r7, #24]
 8001588:	f008 fb8e 	bl	8009ca8 <asinf>
 800158c:	4603      	mov	r3, r0
 800158e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	        MPU9250->rpy[2] = atan2f(a12, a22);
 8001598:	6a39      	ldr	r1, [r7, #32]
 800159a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800159c:	f008 fba4 	bl	8009ce8 <atan2f>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	        MPU9250->rpy[0] *= 180.0f / PI;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ff32 	bl	8000418 <__aeabi_f2d>
 80015b4:	a34c      	add	r3, pc, #304	; (adr r3, 80016e8 <update_rpy+0x2a0>)
 80015b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ba:	f7fe ff85 	bl	80004c8 <__aeabi_dmul>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	f7ff fa77 	bl	8000ab8 <__aeabi_d2f>
 80015ca:	4602      	mov	r2, r0
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	        MPU9250->rpy[1] *= 180.0f / PI;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ff1d 	bl	8000418 <__aeabi_f2d>
 80015de:	a342      	add	r3, pc, #264	; (adr r3, 80016e8 <update_rpy+0x2a0>)
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	f7fe ff70 	bl	80004c8 <__aeabi_dmul>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	f7ff fa62 	bl	8000ab8 <__aeabi_d2f>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	        MPU9250->rpy[2] *= 180.0f / PI;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe ff08 	bl	8000418 <__aeabi_f2d>
 8001608:	a337      	add	r3, pc, #220	; (adr r3, 80016e8 <update_rpy+0x2a0>)
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	f7fe ff5b 	bl	80004c8 <__aeabi_dmul>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff fa4d 	bl	8000ab8 <__aeabi_d2f>
 800161e:	4602      	mov	r2, r0
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	        MPU9250->rpy[2] += MPU9250->magnetic_declination;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001630:	4619      	mov	r1, r3
 8001632:	4610      	mov	r0, r2
 8001634:	f7ff fa96 	bl	8000b64 <__addsf3>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	        if (MPU9250->rpy[2] >= +180.f)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001648:	4929      	ldr	r1, [pc, #164]	; (80016f0 <update_rpy+0x2a8>)
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fd44 	bl	80010d8 <__aeabi_fcmpge>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00c      	beq.n	8001670 <update_rpy+0x228>
	        	MPU9250->rpy[2] -= 360.f;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800165c:	4925      	ldr	r1, [pc, #148]	; (80016f4 <update_rpy+0x2ac>)
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fa7e 	bl	8000b60 <__aeabi_fsub>
 8001664:	4603      	mov	r3, r0
 8001666:	461a      	mov	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800166e:	e015      	b.n	800169c <update_rpy+0x254>
	        else if (MPU9250->rpy[2] < -180.f)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001676:	4920      	ldr	r1, [pc, #128]	; (80016f8 <update_rpy+0x2b0>)
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fd19 	bl	80010b0 <__aeabi_fcmplt>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00b      	beq.n	800169c <update_rpy+0x254>
	        	MPU9250->rpy[2] += 360.f;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800168a:	491a      	ldr	r1, [pc, #104]	; (80016f4 <update_rpy+0x2ac>)
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fa69 	bl	8000b64 <__addsf3>
 8001692:	4603      	mov	r3, r0
 8001694:	461a      	mov	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

	        MPU9250->lin_acc[0] = MPU9250->a[0] + a31;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016a0:	69f9      	ldr	r1, [r7, #28]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fa5e 	bl	8000b64 <__addsf3>
 80016a8:	4603      	mov	r3, r0
 80016aa:	461a      	mov	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	        MPU9250->lin_acc[1] = MPU9250->a[1] + a32;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b6:	69b9      	ldr	r1, [r7, #24]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fa53 	bl	8000b64 <__addsf3>
 80016be:	4603      	mov	r3, r0
 80016c0:	461a      	mov	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	        MPU9250->lin_acc[2] = MPU9250->a[2] - a33;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016cc:	6979      	ldr	r1, [r7, #20]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fa46 	bl	8000b60 <__aeabi_fsub>
 80016d4:	4603      	mov	r3, r0
 80016d6:	461a      	mov	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	        //char str[] = "IN UPDATE rpy \n\r";
	        //HAL_UART_Transmit(&huart6, str, strlen((char *)str), 0xFFFF);
}
 80016de:	bf00      	nop
 80016e0:	372c      	adds	r7, #44	; 0x2c
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd90      	pop	{r4, r7, pc}
 80016e6:	bf00      	nop
 80016e8:	1a63c1f8 	.word	0x1a63c1f8
 80016ec:	404ca5dc 	.word	0x404ca5dc
 80016f0:	43340000 	.word	0x43340000
 80016f4:	43b40000 	.word	0x43b40000
 80016f8:	c3340000 	.word	0xc3340000
 80016fc:	00000000 	.word	0x00000000

08001700 <update_accel_gyro>:

void update_accel_gyro(MPU9250_t *MPU9250) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
        int16_t raw_acc_gyro_data[7];        // used to read all 14 bytes at once from the MPU9250 accel/gyro
        readAccelGyro(raw_acc_gyro_data);  // INT cleared on any read
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	4618      	mov	r0, r3
 800170e:	f000 f94b 	bl	80019a8 <readAccelGyro>

        // Now we'll calculate the accleration value into actual g's
        MPU9250->a[0] = (float)raw_acc_gyro_data[0] * MPU9250->acc_resolution ;  // get actual g value, this depends on scale being set
 8001712:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fad8 	bl	8000ccc <__aeabi_i2f>
 800171c:	4602      	mov	r2, r0
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4619      	mov	r1, r3
 8001724:	4610      	mov	r0, r2
 8001726:	f7ff fb25 	bl	8000d74 <__aeabi_fmul>
 800172a:	4603      	mov	r3, r0
 800172c:	461a      	mov	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	66da      	str	r2, [r3, #108]	; 0x6c
        MPU9250->a[1] = (float)raw_acc_gyro_data[1] * MPU9250->acc_resolution ;
 8001732:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fac8 	bl	8000ccc <__aeabi_i2f>
 800173c:	4602      	mov	r2, r0
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4619      	mov	r1, r3
 8001744:	4610      	mov	r0, r2
 8001746:	f7ff fb15 	bl	8000d74 <__aeabi_fmul>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	671a      	str	r2, [r3, #112]	; 0x70
        MPU9250->a[2] = (float)raw_acc_gyro_data[2] * MPU9250->acc_resolution ;
 8001752:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fab8 	bl	8000ccc <__aeabi_i2f>
 800175c:	4602      	mov	r2, r0
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4619      	mov	r1, r3
 8001764:	4610      	mov	r0, r2
 8001766:	f7ff fb05 	bl	8000d74 <__aeabi_fmul>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	675a      	str	r2, [r3, #116]	; 0x74

        MPU9250->temperature_count = raw_acc_gyro_data[3];                  // Read the adc values
 8001772:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        MPU9250->temperature = ((float)MPU9250->temperature_count) / 333.87 + 21.0;  // Temperature in degrees Centigrade
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff faa2 	bl	8000ccc <__aeabi_i2f>
 8001788:	4603      	mov	r3, r0
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe fe44 	bl	8000418 <__aeabi_f2d>
 8001790:	a325      	add	r3, pc, #148	; (adr r3, 8001828 <update_accel_gyro+0x128>)
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	f7fe ffc1 	bl	800071c <__aeabi_ddiv>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4610      	mov	r0, r2
 80017a0:	4619      	mov	r1, r3
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	4b22      	ldr	r3, [pc, #136]	; (8001830 <update_accel_gyro+0x130>)
 80017a8:	f7fe fcd8 	bl	800015c <__adddf3>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	f7ff f980 	bl	8000ab8 <__aeabi_d2f>
 80017b8:	4602      	mov	r2, r0
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	651a      	str	r2, [r3, #80]	; 0x50

        // Calculate the gyro value into actual degrees per second
        MPU9250->g[0] = (float)raw_acc_gyro_data[4] * MPU9250->gyro_resolution ;  // get actual gyro value, this depends on scale being set
 80017be:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fa82 	bl	8000ccc <__aeabi_i2f>
 80017c8:	4602      	mov	r2, r0
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	4619      	mov	r1, r3
 80017d0:	4610      	mov	r0, r2
 80017d2:	f7ff facf 	bl	8000d74 <__aeabi_fmul>
 80017d6:	4603      	mov	r3, r0
 80017d8:	461a      	mov	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	679a      	str	r2, [r3, #120]	; 0x78
        MPU9250->g[1] = (float)raw_acc_gyro_data[5] * MPU9250->gyro_resolution ;
 80017de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fa72 	bl	8000ccc <__aeabi_i2f>
 80017e8:	4602      	mov	r2, r0
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	4619      	mov	r1, r3
 80017f0:	4610      	mov	r0, r2
 80017f2:	f7ff fabf 	bl	8000d74 <__aeabi_fmul>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	67da      	str	r2, [r3, #124]	; 0x7c
        MPU9250->g[2] = (float)raw_acc_gyro_data[6] * MPU9250->gyro_resolution ;
 80017fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fa62 	bl	8000ccc <__aeabi_i2f>
 8001808:	4602      	mov	r2, r0
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4619      	mov	r1, r3
 8001810:	4610      	mov	r0, r2
 8001812:	f7ff faaf 	bl	8000d74 <__aeabi_fmul>
 8001816:	4603      	mov	r3, r0
 8001818:	461a      	mov	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
 8001820:	bf00      	nop
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	851eb852 	.word	0x851eb852
 800182c:	4074ddeb 	.word	0x4074ddeb
 8001830:	40350000 	.word	0x40350000
 8001834:	00000000 	.word	0x00000000

08001838 <update_mag>:

void update_mag(MPU9250_t *MPU9250) {
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b087      	sub	sp, #28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
        int16_t mag_count[3] = {0, 0, 0};  // Stores the 16-bit signed magnetometer sensor output
 8001840:	2300      	movs	r3, #0
 8001842:	81bb      	strh	r3, [r7, #12]
 8001844:	2300      	movs	r3, #0
 8001846:	81fb      	strh	r3, [r7, #14]
 8001848:	2300      	movs	r3, #0
 800184a:	823b      	strh	r3, [r7, #16]

        // Read the x/y/z adc values
        if (readMag(mag_count)==1) {
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	4618      	mov	r0, r3
 8001852:	f000 f8fd 	bl	8001a50 <readMag>
 8001856:	4603      	mov	r3, r0
 8001858:	2b01      	cmp	r3, #1
 800185a:	f040 809c 	bne.w	8001996 <update_mag+0x15e>
            // Calculate the magnetometer values in milliGauss
            // Include factory calibration per data sheet and user environmental corrections
            // mag_bias is calcurated in 16BITS
            float bias_to_current_bits = MPU9250->mag_resolution / (10.*4912./32760.0);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fdd8 	bl	8000418 <__aeabi_f2d>
 8001868:	a34d      	add	r3, pc, #308	; (adr r3, 80019a0 <update_mag+0x168>)
 800186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186e:	f7fe ff55 	bl	800071c <__aeabi_ddiv>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	f7ff f91d 	bl	8000ab8 <__aeabi_d2f>
 800187e:	4603      	mov	r3, r0
 8001880:	617b      	str	r3, [r7, #20]
            MPU9250->m[0] = (float)(mag_count[0] * MPU9250->mag_resolution * MPU9250->mag_bias_factory[0] - MPU9250->mag_bias[0] * bias_to_current_bits) * MPU9250->mag_scale[0] ;  // get actual magnetometer value, this depends on scale being set
 8001882:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fa20 	bl	8000ccc <__aeabi_i2f>
 800188c:	4602      	mov	r2, r0
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	4619      	mov	r1, r3
 8001894:	4610      	mov	r0, r2
 8001896:	f7ff fa6d 	bl	8000d74 <__aeabi_fmul>
 800189a:	4603      	mov	r3, r0
 800189c:	461a      	mov	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	4619      	mov	r1, r3
 80018a4:	4610      	mov	r0, r2
 80018a6:	f7ff fa65 	bl	8000d74 <__aeabi_fmul>
 80018aa:	4603      	mov	r3, r0
 80018ac:	461c      	mov	r4, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	6979      	ldr	r1, [r7, #20]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fa5d 	bl	8000d74 <__aeabi_fmul>
 80018ba:	4603      	mov	r3, r0
 80018bc:	4619      	mov	r1, r3
 80018be:	4620      	mov	r0, r4
 80018c0:	f7ff f94e 	bl	8000b60 <__aeabi_fsub>
 80018c4:	4603      	mov	r3, r0
 80018c6:	461a      	mov	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018cc:	4619      	mov	r1, r3
 80018ce:	4610      	mov	r0, r2
 80018d0:	f7ff fa50 	bl	8000d74 <__aeabi_fmul>
 80018d4:	4603      	mov	r3, r0
 80018d6:	461a      	mov	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            MPU9250->m[1] = (float)(mag_count[1] * MPU9250->mag_resolution * MPU9250->mag_bias_factory[1] - MPU9250->mag_bias[1] * bias_to_current_bits) * MPU9250->mag_scale[1];
 80018de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff f9f2 	bl	8000ccc <__aeabi_i2f>
 80018e8:	4602      	mov	r2, r0
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	4619      	mov	r1, r3
 80018f0:	4610      	mov	r0, r2
 80018f2:	f7ff fa3f 	bl	8000d74 <__aeabi_fmul>
 80018f6:	4603      	mov	r3, r0
 80018f8:	461a      	mov	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fe:	4619      	mov	r1, r3
 8001900:	4610      	mov	r0, r2
 8001902:	f7ff fa37 	bl	8000d74 <__aeabi_fmul>
 8001906:	4603      	mov	r3, r0
 8001908:	461c      	mov	r4, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800190e:	6979      	ldr	r1, [r7, #20]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fa2f 	bl	8000d74 <__aeabi_fmul>
 8001916:	4603      	mov	r3, r0
 8001918:	4619      	mov	r1, r3
 800191a:	4620      	mov	r0, r4
 800191c:	f7ff f920 	bl	8000b60 <__aeabi_fsub>
 8001920:	4603      	mov	r3, r0
 8001922:	461a      	mov	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	4619      	mov	r1, r3
 800192a:	4610      	mov	r0, r2
 800192c:	f7ff fa22 	bl	8000d74 <__aeabi_fmul>
 8001930:	4603      	mov	r3, r0
 8001932:	461a      	mov	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            MPU9250->m[2] = (float)(mag_count[2] * MPU9250->mag_resolution * MPU9250->mag_bias_factory[2] - MPU9250->mag_bias[2] * bias_to_current_bits) * MPU9250->mag_scale[2];
 800193a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff f9c4 	bl	8000ccc <__aeabi_i2f>
 8001944:	4602      	mov	r2, r0
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	4619      	mov	r1, r3
 800194c:	4610      	mov	r0, r2
 800194e:	f7ff fa11 	bl	8000d74 <__aeabi_fmul>
 8001952:	4603      	mov	r3, r0
 8001954:	461a      	mov	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195a:	4619      	mov	r1, r3
 800195c:	4610      	mov	r0, r2
 800195e:	f7ff fa09 	bl	8000d74 <__aeabi_fmul>
 8001962:	4603      	mov	r3, r0
 8001964:	461c      	mov	r4, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196a:	6979      	ldr	r1, [r7, #20]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fa01 	bl	8000d74 <__aeabi_fmul>
 8001972:	4603      	mov	r3, r0
 8001974:	4619      	mov	r1, r3
 8001976:	4620      	mov	r0, r4
 8001978:	f7ff f8f2 	bl	8000b60 <__aeabi_fsub>
 800197c:	4603      	mov	r3, r0
 800197e:	461a      	mov	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001984:	4619      	mov	r1, r3
 8001986:	4610      	mov	r0, r2
 8001988:	f7ff f9f4 	bl	8000d74 <__aeabi_fmul>
 800198c:	4603      	mov	r3, r0
 800198e:	461a      	mov	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
    }
 8001996:	bf00      	nop
 8001998:	371c      	adds	r7, #28
 800199a:	46bd      	mov	sp, r7
 800199c:	bd90      	pop	{r4, r7, pc}
 800199e:	bf00      	nop
 80019a0:	d7fd7fd8 	.word	0xd7fd7fd8
 80019a4:	3ff7fd7f 	.word	0x3ff7fd7f

080019a8 <readAccelGyro>:

void readAccelGyro(int16_t* destination)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]

	uint8_t raw_data[14];                                                 // x/y/z accel register data stored here
	readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 14, &raw_data[0]);             // Read the 14 raw data registers into data array
 80019b0:	f107 0308 	add.w	r3, r7, #8
 80019b4:	220e      	movs	r2, #14
 80019b6:	213b      	movs	r1, #59	; 0x3b
 80019b8:	20d0      	movs	r0, #208	; 0xd0
 80019ba:	f000 fa4f 	bl	8001e5c <readBytes>
	destination[0] = ((int16_t)raw_data[0] << 8) | (int16_t)raw_data[1];  // Turn the MSB and LSB into a signed 16-bit value
 80019be:	7a3b      	ldrb	r3, [r7, #8]
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	b21a      	sxth	r2, r3
 80019c4:	7a7b      	ldrb	r3, [r7, #9]
 80019c6:	b21b      	sxth	r3, r3
 80019c8:	4313      	orrs	r3, r2
 80019ca:	b21a      	sxth	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	801a      	strh	r2, [r3, #0]
	destination[1] = ((int16_t)raw_data[2] << 8) | (int16_t)raw_data[3];
 80019d0:	7abb      	ldrb	r3, [r7, #10]
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	b219      	sxth	r1, r3
 80019d6:	7afb      	ldrb	r3, [r7, #11]
 80019d8:	b21a      	sxth	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3302      	adds	r3, #2
 80019de:	430a      	orrs	r2, r1
 80019e0:	b212      	sxth	r2, r2
 80019e2:	801a      	strh	r2, [r3, #0]
	destination[2] = ((int16_t)raw_data[4] << 8) | (int16_t)raw_data[5];
 80019e4:	7b3b      	ldrb	r3, [r7, #12]
 80019e6:	021b      	lsls	r3, r3, #8
 80019e8:	b219      	sxth	r1, r3
 80019ea:	7b7b      	ldrb	r3, [r7, #13]
 80019ec:	b21a      	sxth	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3304      	adds	r3, #4
 80019f2:	430a      	orrs	r2, r1
 80019f4:	b212      	sxth	r2, r2
 80019f6:	801a      	strh	r2, [r3, #0]
	destination[3] = ((int16_t)raw_data[6] << 8) | (int16_t)raw_data[7];
 80019f8:	7bbb      	ldrb	r3, [r7, #14]
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	b219      	sxth	r1, r3
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	b21a      	sxth	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3306      	adds	r3, #6
 8001a06:	430a      	orrs	r2, r1
 8001a08:	b212      	sxth	r2, r2
 8001a0a:	801a      	strh	r2, [r3, #0]
	destination[4] = ((int16_t)raw_data[8] << 8) | (int16_t)raw_data[9];
 8001a0c:	7c3b      	ldrb	r3, [r7, #16]
 8001a0e:	021b      	lsls	r3, r3, #8
 8001a10:	b219      	sxth	r1, r3
 8001a12:	7c7b      	ldrb	r3, [r7, #17]
 8001a14:	b21a      	sxth	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3308      	adds	r3, #8
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	b212      	sxth	r2, r2
 8001a1e:	801a      	strh	r2, [r3, #0]
	destination[5] = ((int16_t)raw_data[10] << 8) | (int16_t)raw_data[11];
 8001a20:	7cbb      	ldrb	r3, [r7, #18]
 8001a22:	021b      	lsls	r3, r3, #8
 8001a24:	b219      	sxth	r1, r3
 8001a26:	7cfb      	ldrb	r3, [r7, #19]
 8001a28:	b21a      	sxth	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	330a      	adds	r3, #10
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	b212      	sxth	r2, r2
 8001a32:	801a      	strh	r2, [r3, #0]
	destination[6] = ((int16_t)raw_data[12] << 8) | (int16_t)raw_data[13];
 8001a34:	7d3b      	ldrb	r3, [r7, #20]
 8001a36:	021b      	lsls	r3, r3, #8
 8001a38:	b219      	sxth	r1, r3
 8001a3a:	7d7b      	ldrb	r3, [r7, #21]
 8001a3c:	b21a      	sxth	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	330c      	adds	r3, #12
 8001a42:	430a      	orrs	r2, r1
 8001a44:	b212      	sxth	r2, r2
 8001a46:	801a      	strh	r2, [r3, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <readMag>:


uint8_t readMag(int16_t* destination)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	const uint8_t st1 = readByte(AK8963_ADDRESS, AK8963_ST1);
 8001a58:	2102      	movs	r1, #2
 8001a5a:	2018      	movs	r0, #24
 8001a5c:	f000 f9d8 	bl	8001e10 <readByte>
 8001a60:	4603      	mov	r3, r0
 8001a62:	75fb      	strb	r3, [r7, #23]
	if (st1 & 0x01) {                                                    // wait for magnetometer data ready bit to be set
 8001a64:	7dfb      	ldrb	r3, [r7, #23]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d03f      	beq.n	8001aee <readMag+0x9e>
	            uint8_t raw_data[7];                                             // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	            readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &raw_data[0]);      // Read the six raw data and ST2 registers sequentially into data array
 8001a6e:	f107 030c 	add.w	r3, r7, #12
 8001a72:	2207      	movs	r2, #7
 8001a74:	2103      	movs	r1, #3
 8001a76:	2018      	movs	r0, #24
 8001a78:	f000 f9f0 	bl	8001e5c <readBytes>
	            if (Mmode == 0x02 || Mmode == 0x04 || Mmode == 0x06) {  // continuous or external trigger read mode
 8001a7c:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <readMag+0xa8>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d007      	beq.n	8001a94 <readMag+0x44>
 8001a84:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <readMag+0xa8>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d003      	beq.n	8001a94 <readMag+0x44>
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <readMag+0xa8>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b06      	cmp	r3, #6
 8001a92:	d106      	bne.n	8001aa2 <readMag+0x52>
	                if ((st1 & 0x02) == 0)                                       // check if data is not skipped
 8001a94:	7dfb      	ldrb	r3, [r7, #23]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <readMag+0x52>
	                    return 0;                                            // this should be after data reading to clear DRDY register
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e026      	b.n	8001af0 <readMag+0xa0>
	            }

	            uint8_t c = raw_data[6];                                         // End data read by reading ST2 register
 8001aa2:	7cbb      	ldrb	r3, [r7, #18]
 8001aa4:	75bb      	strb	r3, [r7, #22]
	            if (!(c & 0x08)) {                                               // Check if magnetic sensor overflow set, if not then report data
 8001aa6:	7dbb      	ldrb	r3, [r7, #22]
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d11e      	bne.n	8001aee <readMag+0x9e>
	                destination[0] = ((int16_t)raw_data[1] << 8) | raw_data[0];  // Turn the MSB and LSB into a signed 16-bit value
 8001ab0:	7b7b      	ldrb	r3, [r7, #13]
 8001ab2:	021b      	lsls	r3, r3, #8
 8001ab4:	b21a      	sxth	r2, r3
 8001ab6:	7b3b      	ldrb	r3, [r7, #12]
 8001ab8:	b21b      	sxth	r3, r3
 8001aba:	4313      	orrs	r3, r2
 8001abc:	b21a      	sxth	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	801a      	strh	r2, [r3, #0]
	                destination[1] = ((int16_t)raw_data[3] << 8) | raw_data[2];  // Data stored as little Endian
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	021b      	lsls	r3, r3, #8
 8001ac6:	b219      	sxth	r1, r3
 8001ac8:	7bbb      	ldrb	r3, [r7, #14]
 8001aca:	b21a      	sxth	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3302      	adds	r3, #2
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	b212      	sxth	r2, r2
 8001ad4:	801a      	strh	r2, [r3, #0]
	                destination[2] = ((int16_t)raw_data[5] << 8) | raw_data[4];
 8001ad6:	7c7b      	ldrb	r3, [r7, #17]
 8001ad8:	021b      	lsls	r3, r3, #8
 8001ada:	b219      	sxth	r1, r3
 8001adc:	7c3b      	ldrb	r3, [r7, #16]
 8001ade:	b21a      	sxth	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	b212      	sxth	r2, r2
 8001ae8:	801a      	strh	r2, [r3, #0]
	                return 1;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <readMag+0xa0>
	            }
	        }
	        return 0;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000003 	.word	0x20000003

08001afc <initAK8963>:
        if (n > 0) MPU9250->n_filter_iter = n;
    }


void initAK8963(MPU9250_t *MPU9250)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  // First extract the factory calibration for each magnetometer axis
  uint8_t rawData[3];  // x/y/z gyro calibration data stored here
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8001b04:	2200      	movs	r2, #0
 8001b06:	210a      	movs	r1, #10
 8001b08:	2018      	movs	r0, #24
 8001b0a:	f000 f9e3 	bl	8001ed4 <writeByte>
  HAL_Delay(100);
 8001b0e:	2064      	movs	r0, #100	; 0x64
 8001b10:	f004 fe16 	bl	8006740 <HAL_Delay>
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8001b14:	220f      	movs	r2, #15
 8001b16:	210a      	movs	r1, #10
 8001b18:	2018      	movs	r0, #24
 8001b1a:	f000 f9db 	bl	8001ed4 <writeByte>
  HAL_Delay(100);
 8001b1e:	2064      	movs	r0, #100	; 0x64
 8001b20:	f004 fe0e 	bl	8006740 <HAL_Delay>
  readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 8001b24:	f107 030c 	add.w	r3, r7, #12
 8001b28:	2203      	movs	r2, #3
 8001b2a:	2110      	movs	r1, #16
 8001b2c:	2018      	movs	r0, #24
 8001b2e:	f000 f995 	bl	8001e5c <readBytes>
  MPU9250->mag_bias_factory[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 8001b32:	7b3b      	ldrb	r3, [r7, #12]
 8001b34:	3b80      	subs	r3, #128	; 0x80
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff f8c8 	bl	8000ccc <__aeabi_i2f>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff f9ca 	bl	8000edc <__aeabi_fdiv>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff f808 	bl	8000b64 <__addsf3>
 8001b54:	4603      	mov	r3, r0
 8001b56:	461a      	mov	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	625a      	str	r2, [r3, #36]	; 0x24
  MPU9250->mag_bias_factory[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 8001b5c:	7b7b      	ldrb	r3, [r7, #13]
 8001b5e:	3b80      	subs	r3, #128	; 0x80
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff f8b3 	bl	8000ccc <__aeabi_i2f>
 8001b66:	4603      	mov	r3, r0
 8001b68:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff f9b5 	bl	8000edc <__aeabi_fdiv>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fff3 	bl	8000b64 <__addsf3>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	461a      	mov	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	629a      	str	r2, [r3, #40]	; 0x28
  MPU9250->mag_bias_factory[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 8001b86:	7bbb      	ldrb	r3, [r7, #14]
 8001b88:	3b80      	subs	r3, #128	; 0x80
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff f89e 	bl	8000ccc <__aeabi_i2f>
 8001b90:	4603      	mov	r3, r0
 8001b92:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff f9a0 	bl	8000edc <__aeabi_fdiv>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe ffde 	bl	8000b64 <__addsf3>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	461a      	mov	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	62da      	str	r2, [r3, #44]	; 0x2c
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	210a      	movs	r1, #10
 8001bb4:	2018      	movs	r0, #24
 8001bb6:	f000 f98d 	bl	8001ed4 <writeByte>
  HAL_Delay(100);
 8001bba:	2064      	movs	r0, #100	; 0x64
 8001bbc:	f004 fdc0 	bl	8006740 <HAL_Delay>
  // Configure the magnetometer for continuous read and highest resolution
  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
  writeByte(AK8963_ADDRESS, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <initAK8963+0xf0>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	011b      	lsls	r3, r3, #4
 8001bc6:	b25a      	sxtb	r2, r3
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <initAK8963+0xf4>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	b25b      	sxtb	r3, r3
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	b25b      	sxtb	r3, r3
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	210a      	movs	r1, #10
 8001bd8:	2018      	movs	r0, #24
 8001bda:	f000 f97b 	bl	8001ed4 <writeByte>
  HAL_Delay(100);
 8001bde:	2064      	movs	r0, #100	; 0x64
 8001be0:	f004 fdae 	bl	8006740 <HAL_Delay>
}
 8001be4:	bf00      	nop
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000002 	.word	0x20000002
 8001bf0:	20000003 	.word	0x20000003

08001bf4 <MPU9250_Init>:

void MPU9250_Init(MPU9250_t *MPU9250){
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	// Initialize MPU9250 device
	 // wake up device
	getAres(MPU9250);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f8d7 	bl	8001db0 <getAres>
	getGres(MPU9250);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f8a0 	bl	8001d48 <getGres>
	getMres(MPU9250);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f87f 	bl	8001d0c <getMres>
	// reset device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8001c0e:	2280      	movs	r2, #128	; 0x80
 8001c10:	216b      	movs	r1, #107	; 0x6b
 8001c12:	20d0      	movs	r0, #208	; 0xd0
 8001c14:	f000 f95e 	bl	8001ed4 <writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8001c18:	2064      	movs	r0, #100	; 0x64
 8001c1a:	f004 fd91 	bl	8006740 <HAL_Delay>

	// wake up device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8001c1e:	2200      	movs	r2, #0
 8001c20:	216b      	movs	r1, #107	; 0x6b
 8001c22:	20d0      	movs	r0, #208	; 0xd0
 8001c24:	f000 f956 	bl	8001ed4 <writeByte>
	HAL_Delay(100);
 8001c28:	2064      	movs	r0, #100	; 0x64
 8001c2a:	f004 fd89 	bl	8006740 <HAL_Delay>

	// get stable time source
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
 8001c2e:	2201      	movs	r2, #1
 8001c30:	216b      	movs	r1, #107	; 0x6b
 8001c32:	20d0      	movs	r0, #208	; 0xd0
 8001c34:	f000 f94e 	bl	8001ed4 <writeByte>
	HAL_Delay(100);
 8001c38:	2064      	movs	r0, #100	; 0x64
 8001c3a:	f004 fd81 	bl	8006740 <HAL_Delay>

	 // Configure Gyro and Accelerometer
	 // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
	 // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
	 // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	  writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
 8001c3e:	2203      	movs	r2, #3
 8001c40:	211a      	movs	r1, #26
 8001c42:	20d0      	movs	r0, #208	; 0xd0
 8001c44:	f000 f946 	bl	8001ed4 <writeByte>

	 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	  writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 8001c48:	2204      	movs	r2, #4
 8001c4a:	2119      	movs	r1, #25
 8001c4c:	20d0      	movs	r0, #208	; 0xd0
 8001c4e:	f000 f941 	bl	8001ed4 <writeByte>

	 // Set gyroscope full scale range
	 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	  uint8_t c =  readByte(MPU9250_ADDRESS, GYRO_CONFIG);
 8001c52:	211b      	movs	r1, #27
 8001c54:	20d0      	movs	r0, #208	; 0xd0
 8001c56:	f000 f8db 	bl	8001e10 <readByte>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	73fb      	strb	r3, [r7, #15]
	 // c = c & ~0xE0;                                     // Clear self-test bits [7:5]
	  c = c & ~0x03;                                     // Clear Fchoice bits [1:0]
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	f023 0303 	bic.w	r3, r3, #3
 8001c64:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x18;                                     // Clear GYRO_FS_SEL bits [4:3]
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	f023 0318 	bic.w	r3, r3, #24
 8001c6c:	73fb      	strb	r3, [r7, #15]
	  c = c | (Gscale << 3);       // Set full scale range for the gyro
 8001c6e:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <MPU9250_Init+0x110>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	b25a      	sxtb	r2, r3
 8001c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	b25b      	sxtb	r3, r3
 8001c7e:	73fb      	strb	r3, [r7, #15]
	  //c = c | (0x03 & 0x03);   // Set Fchoice for the gyro
	  writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c); // Set full scale range for the gyro
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	461a      	mov	r2, r3
 8001c84:	211b      	movs	r1, #27
 8001c86:	20d0      	movs	r0, #208	; 0xd0
 8001c88:	f000 f924 	bl	8001ed4 <writeByte>

	 // Set accelerometer configuration
	  c =  readByte(MPU9250_ADDRESS, ACCEL_CONFIG);
 8001c8c:	211c      	movs	r1, #28
 8001c8e:	20d0      	movs	r0, #208	; 0xd0
 8001c90:	f000 f8be 	bl	8001e10 <readByte>
 8001c94:	4603      	mov	r3, r0
 8001c96:	73fb      	strb	r3, [r7, #15]
	  //c = c & ~0xE0;                                 // Clear self-test bits [7:5]
	  c = c & ~0x18;                                 // Clear ACCEL_FS_SEL bits [4:3]
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	f023 0318 	bic.w	r3, r3, #24
 8001c9e:	73fb      	strb	r3, [r7, #15]
	  c = c | (Ascale << 3);  // Set full scale range for the accelerometer
 8001ca0:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <MPU9250_Init+0x114>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	b25a      	sxtb	r2, r3
 8001ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	b25b      	sxtb	r3, r3
 8001cb0:	73fb      	strb	r3, [r7, #15]
	  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Set full scale range for the accelerometer
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	211c      	movs	r1, #28
 8001cb8:	20d0      	movs	r0, #208	; 0xd0
 8001cba:	f000 f90b 	bl	8001ed4 <writeByte>

	 // Set accelerometer sample rate configuration
	 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	  c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG2);
 8001cbe:	211d      	movs	r1, #29
 8001cc0:	20d0      	movs	r0, #208	; 0xd0
 8001cc2:	f000 f8a5 	bl	8001e10 <readByte>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x0F;                                     // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	f023 030f 	bic.w	r3, r3, #15
 8001cd0:	73fb      	strb	r3, [r7, #15]
	  c = c | 0x03;
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	f043 0303 	orr.w	r3, r3, #3
 8001cd8:	73fb      	strb	r3, [r7, #15]

//	  c = c | (~(0x01 << 3) & 0x08);    // Set accel_fchoice_b to 1
//	  c = c | (0x03 & 0x07);  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz

	  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	211d      	movs	r1, #29
 8001ce0:	20d0      	movs	r0, #208	; 0xd0
 8001ce2:	f000 f8f7 	bl	8001ed4 <writeByte>
	 // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	  // Configure Interrupts and Bypass Enable
	  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
	  // can join the I2C bus and all can be controlled by the Arduino as master
	   writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
 8001ce6:	2222      	movs	r2, #34	; 0x22
 8001ce8:	2137      	movs	r1, #55	; 0x37
 8001cea:	20d0      	movs	r0, #208	; 0xd0
 8001cec:	f000 f8f2 	bl	8001ed4 <writeByte>
	   writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01); // Enable data ready (bit 0) interrupt
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	2138      	movs	r1, #56	; 0x38
 8001cf4:	20d0      	movs	r0, #208	; 0xd0
 8001cf6:	f000 f8ed 	bl	8001ed4 <writeByte>

}
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000001 	.word	0x20000001
 8001d08:	20000000 	.word	0x20000000

08001d0c <getMres>:

void getMres(MPU9250_t *MPU9250) {
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  switch (Mscale)
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <getMres+0x30>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d002      	beq.n	8001d22 <getMres+0x16>
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d004      	beq.n	8001d2a <getMres+0x1e>
          break;
    case MFS_16BITS:
    	MPU9250->mag_resolution = 10.*4912./32760.0; // Proper scale to return milliGauss
          break;
  }
}
 8001d20:	e007      	b.n	8001d32 <getMres+0x26>
    	MPU9250->mag_resolution = 10.*4912./8190.; // Proper scale to return milliGauss
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a06      	ldr	r2, [pc, #24]	; (8001d40 <getMres+0x34>)
 8001d26:	609a      	str	r2, [r3, #8]
          break;
 8001d28:	e003      	b.n	8001d32 <getMres+0x26>
    	MPU9250->mag_resolution = 10.*4912./32760.0; // Proper scale to return milliGauss
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <getMres+0x38>)
 8001d2e:	609a      	str	r2, [r3, #8]
          break;
 8001d30:	bf00      	nop
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	20000002 	.word	0x20000002
 8001d40:	40bfebff 	.word	0x40bfebff
 8001d44:	3fbfebff 	.word	0x3fbfebff

08001d48 <getGres>:


void getGres(MPU9250_t *MPU9250) {
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  switch (Gscale)
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <getGres+0x54>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	d81a      	bhi.n	8001d90 <getGres+0x48>
 8001d5a:	a201      	add	r2, pc, #4	; (adr r2, 8001d60 <getGres+0x18>)
 8001d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d60:	08001d71 	.word	0x08001d71
 8001d64:	08001d79 	.word	0x08001d79
 8001d68:	08001d81 	.word	0x08001d81
 8001d6c:	08001d89 	.word	0x08001d89
  {
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          MPU9250->gyro_resolution = 250.0/32768.0;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <getGres+0x58>)
 8001d74:	605a      	str	r2, [r3, #4]
          break;
 8001d76:	e00b      	b.n	8001d90 <getGres+0x48>
    case GFS_500DPS:
    	MPU9250->gyro_resolution = 500.0/32768.0;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <getGres+0x5c>)
 8001d7c:	605a      	str	r2, [r3, #4]
          break;
 8001d7e:	e007      	b.n	8001d90 <getGres+0x48>
    case GFS_1000DPS:
    	MPU9250->gyro_resolution = 1000.0/32768.0;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a09      	ldr	r2, [pc, #36]	; (8001da8 <getGres+0x60>)
 8001d84:	605a      	str	r2, [r3, #4]
          break;
 8001d86:	e003      	b.n	8001d90 <getGres+0x48>
    case GFS_2000DPS:
    	MPU9250->gyro_resolution = 2000.0/32768.0;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a08      	ldr	r2, [pc, #32]	; (8001dac <getGres+0x64>)
 8001d8c:	605a      	str	r2, [r3, #4]
          break;
 8001d8e:	bf00      	nop
  }
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000001 	.word	0x20000001
 8001da0:	3bfa0000 	.word	0x3bfa0000
 8001da4:	3c7a0000 	.word	0x3c7a0000
 8001da8:	3cfa0000 	.word	0x3cfa0000
 8001dac:	3d7a0000 	.word	0x3d7a0000

08001db0 <getAres>:


void getAres(MPU9250_t *MPU9250) {
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  switch (Ascale)
 8001db8:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <getAres+0x5c>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d81e      	bhi.n	8001e00 <getAres+0x50>
 8001dc2:	a201      	add	r2, pc, #4	; (adr r2, 8001dc8 <getAres+0x18>)
 8001dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc8:	08001dd9 	.word	0x08001dd9
 8001dcc:	08001de3 	.word	0x08001de3
 8001dd0:	08001ded 	.word	0x08001ded
 8001dd4:	08001df7 	.word	0x08001df7
  {
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
    	MPU9250->acc_resolution = 2.0/32768.0;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001dde:	601a      	str	r2, [r3, #0]
          break;
 8001de0:	e00e      	b.n	8001e00 <getAres+0x50>
    case AFS_4G:
    	MPU9250->acc_resolution = 4.0/32768.0;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001de8:	601a      	str	r2, [r3, #0]
          break;
 8001dea:	e009      	b.n	8001e00 <getAres+0x50>
    case AFS_8G:
    	MPU9250->acc_resolution = 8.0/32768.0;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001df2:	601a      	str	r2, [r3, #0]
          break;
 8001df4:	e004      	b.n	8001e00 <getAres+0x50>
    case AFS_16G:
    	MPU9250->acc_resolution = 16.0/32768.0;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001dfc:	601a      	str	r2, [r3, #0]
          break;
 8001dfe:	bf00      	nop
  }
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20000000 	.word	0x20000000

08001e10 <readByte>:


char readByte(uint8_t I2C_ADDRESS, uint8_t RegAddr){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af02      	add	r7, sp, #8
 8001e16:	4603      	mov	r3, r0
 8001e18:	460a      	mov	r2, r1
 8001e1a:	71fb      	strb	r3, [r7, #7]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	71bb      	strb	r3, [r7, #6]
	char data[1];
	char data_write[1];
	data_write[0] = RegAddr;
 8001e20:	79bb      	ldrb	r3, [r7, #6]
 8001e22:	723b      	strb	r3, [r7, #8]

	//Откуда будем считывать данные

	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data_write, 1, 100);
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	b299      	uxth	r1, r3
 8001e28:	f107 0208 	add.w	r2, r7, #8
 8001e2c:	2364      	movs	r3, #100	; 0x64
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	2301      	movs	r3, #1
 8001e32:	4809      	ldr	r0, [pc, #36]	; (8001e58 <readByte+0x48>)
 8001e34:	f005 f896 	bl	8006f64 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)I2C_ADDRESS, data, (uint16_t)1, (uint16_t)100);
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	b299      	uxth	r1, r3
 8001e3c:	f107 020c 	add.w	r2, r7, #12
 8001e40:	2364      	movs	r3, #100	; 0x64
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	2301      	movs	r3, #1
 8001e46:	4804      	ldr	r0, [pc, #16]	; (8001e58 <readByte+0x48>)
 8001e48:	f005 f98a 	bl	8007160 <HAL_I2C_Master_Receive>

	return data[0];
 8001e4c:	7b3b      	ldrb	r3, [r7, #12]

}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200002b0 	.word	0x200002b0

08001e5c <readBytes>:
void readBytes(uint8_t I2C_ADDRESS, uint8_t RegAddr, uint8_t count, uint8_t * dest)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af02      	add	r7, sp, #8
 8001e62:	603b      	str	r3, [r7, #0]
 8001e64:	4603      	mov	r3, r0
 8001e66:	71fb      	strb	r3, [r7, #7]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	71bb      	strb	r3, [r7, #6]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	717b      	strb	r3, [r7, #5]
	char data[14];
	char data_write[1];
	data_write[0] = RegAddr;
 8001e70:	79bb      	ldrb	r3, [r7, #6]
 8001e72:	723b      	strb	r3, [r7, #8]
	//Откуда будем считывать данные

	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data_write, 1, 100);
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	b299      	uxth	r1, r3
 8001e78:	f107 0208 	add.w	r2, r7, #8
 8001e7c:	2364      	movs	r3, #100	; 0x64
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	2301      	movs	r3, #1
 8001e82:	4813      	ldr	r0, [pc, #76]	; (8001ed0 <readBytes+0x74>)
 8001e84:	f005 f86e 	bl	8006f64 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(I2C_ADDRESS), data, count, (uint16_t)100);
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	b299      	uxth	r1, r3
 8001e8c:	797b      	ldrb	r3, [r7, #5]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	f107 020c 	add.w	r2, r7, #12
 8001e94:	2064      	movs	r0, #100	; 0x64
 8001e96:	9000      	str	r0, [sp, #0]
 8001e98:	480d      	ldr	r0, [pc, #52]	; (8001ed0 <readBytes+0x74>)
 8001e9a:	f005 f961 	bl	8007160 <HAL_I2C_Master_Receive>
	for(int ii = 0; ii < count; ii++) {
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
 8001ea2:	e00b      	b.n	8001ebc <readBytes+0x60>
			dest[ii] = data[ii];
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f107 010c 	add.w	r1, r7, #12
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	440a      	add	r2, r1
 8001eb2:	7812      	ldrb	r2, [r2, #0]
 8001eb4:	701a      	strb	r2, [r3, #0]
	for(int ii = 0; ii < count; ii++) {
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	61fb      	str	r3, [r7, #28]
 8001ebc:	797b      	ldrb	r3, [r7, #5]
 8001ebe:	69fa      	ldr	r2, [r7, #28]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	dbef      	blt.n	8001ea4 <readBytes+0x48>
		}

}
 8001ec4:	bf00      	nop
 8001ec6:	bf00      	nop
 8001ec8:	3720      	adds	r7, #32
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	200002b0 	.word	0x200002b0

08001ed4 <writeByte>:

void writeByte(uint8_t I2C_ADDRESS, uint8_t RegAddr, uint8_t data){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	71bb      	strb	r3, [r7, #6]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	717b      	strb	r3, [r7, #5]
	char data_write[2];
	data_write[0] = RegAddr;
 8001ee6:	79bb      	ldrb	r3, [r7, #6]
 8001ee8:	733b      	strb	r3, [r7, #12]
	data_write[1] = data;
 8001eea:	797b      	ldrb	r3, [r7, #5]
 8001eec:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data_write, 2, 100);
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	b299      	uxth	r1, r3
 8001ef2:	f107 020c 	add.w	r2, r7, #12
 8001ef6:	2364      	movs	r3, #100	; 0x64
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	2302      	movs	r3, #2
 8001efc:	4803      	ldr	r0, [pc, #12]	; (8001f0c <writeByte+0x38>)
 8001efe:	f005 f831 	bl	8006f64 <HAL_I2C_Master_Transmit>
}
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	200002b0 	.word	0x200002b0

08001f10 <MPU9250SetDefault>:

void MPU9250SetDefault(MPU9250_t *MPU9250){
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	MPU9250 -> acc_resolution = 0.;                // scale resolutions per LSB for the sensors
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
	MPU9250 -> gyro_resolution = 0.;               // scale resolutions per LSB for the sensors
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	605a      	str	r2, [r3, #4]
	MPU9250 -> mag_resolution = 0.;                // scale resolutions per LSB for the sensors
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]

		// Calibration Parameters
	MPU9250 -> acc_bias[0] = 0.;   // acc calibration value in ACCEL_FS_SEL: 2g
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	60da      	str	r2, [r3, #12]
	MPU9250 -> acc_bias[1] = 0.;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]
	MPU9250 -> acc_bias[2] = 0.;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	615a      	str	r2, [r3, #20]
	MPU9250 -> gyro_bias[0] = 0.;  // gyro calibration value in GYRO_FS_SEL: 250dps
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	619a      	str	r2, [r3, #24]
	MPU9250 -> gyro_bias[1] = 0.;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	61da      	str	r2, [r3, #28]
	MPU9250 -> gyro_bias[2] = 0.;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	621a      	str	r2, [r3, #32]
	MPU9250 -> mag_bias_factory[0] = 0.;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24
	MPU9250 -> mag_bias_factory[1] = 0.;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	629a      	str	r2, [r3, #40]	; 0x28
	MPU9250 -> mag_bias_factory[2] = 0.;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	62da      	str	r2, [r3, #44]	; 0x2c

	MPU9250 -> mag_bias[0] = 0.;  // mag calibration value in MAG_OUTPUT_BITS: 16BITS
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	631a      	str	r2, [r3, #48]	; 0x30
	MPU9250 -> mag_bias[1] = 0.;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	635a      	str	r2, [r3, #52]	; 0x34
	MPU9250 -> mag_bias[2] = 0.;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	639a      	str	r2, [r3, #56]	; 0x38
	MPU9250 -> mag_scale[0] = 1.;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f96:	63da      	str	r2, [r3, #60]	; 0x3c
	MPU9250 -> mag_scale[1] = 1.;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f9e:	641a      	str	r2, [r3, #64]	; 0x40
	MPU9250 -> mag_scale[2] = 1.;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001fa6:	645a      	str	r2, [r3, #68]	; 0x44
	MPU9250 -> magnetic_declination  = 10.91;  // Moscow, 24th June
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a44      	ldr	r2, [pc, #272]	; (80020bc <MPU9250SetDefault+0x1ac>)
 8001fac:	649a      	str	r2, [r3, #72]	; 0x48

		    // Temperature
	MPU9250 -> temperature_count = 0.;  // temperature raw count output
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	MPU9250 -> temperature = 0.;        // Stores the real internal chip temperature in degrees Celsius
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	651a      	str	r2, [r3, #80]	; 0x50

		// Self Test
	MPU9250 -> self_test_result[0] = 0.;  // holds results of gyro and accelerometer self test
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	655a      	str	r2, [r3, #84]	; 0x54
	MPU9250 -> self_test_result[1] = 0.;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	659a      	str	r2, [r3, #88]	; 0x58
	MPU9250 -> self_test_result[2] = 0.;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	65da      	str	r2, [r3, #92]	; 0x5c
	MPU9250 -> self_test_result[3] = 0.;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	661a      	str	r2, [r3, #96]	; 0x60
	MPU9250 -> self_test_result[4] = 0.;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	665a      	str	r2, [r3, #100]	; 0x64
	MPU9250 -> self_test_result[5] = 0.;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	669a      	str	r2, [r3, #104]	; 0x68

		// IMU Data
	MPU9250 -> a[0] = 0.;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	66da      	str	r2, [r3, #108]	; 0x6c
	MPU9250 -> a[1] = 0.;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	671a      	str	r2, [r3, #112]	; 0x70
	MPU9250 -> a[2] = 0.;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	675a      	str	r2, [r3, #116]	; 0x74
	MPU9250 -> g[0] = 0.;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	679a      	str	r2, [r3, #120]	; 0x78
	MPU9250 -> g[1] = 0.;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	67da      	str	r2, [r3, #124]	; 0x7c
	MPU9250 -> g[2] = 0.;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MPU9250 -> m[0] = 0.;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	MPU9250 -> m[1] = 0.;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	MPU9250 -> m[2] = 0.;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	MPU9250 -> q[0] = 1.;  // vector to hold quaternion
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002044:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	MPU9250 -> q[1] = 0.;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	MPU9250 -> q[2] = 0.;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	MPU9250 -> q[3] = 0.;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	MPU9250 -> rpy[0] = 0.;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	MPU9250 -> rpy[1] = 0.;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	MPU9250 -> rpy[2] = 0.;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	MPU9250 -> lin_acc[0] = 0.;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	MPU9250 -> lin_acc[1] = 0.;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	MPU9250 -> lin_acc[2] = 0.;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	MPU9250 -> has_connected = 0;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	MPU9250 -> n_filter_iter = 1;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr
 80020bc:	412e8f5c 	.word	0x412e8f5c

080020c0 <update_madgwick>:

void update_madgwick(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz, float* q){
 80020c0:	b5b0      	push	{r4, r5, r7, lr}
 80020c2:	b08a      	sub	sp, #40	; 0x28
 80020c4:	af06      	add	r7, sp, #24
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	603b      	str	r3, [r7, #0]
	newTime = HAL_GetTick();
 80020ce:	f004 fb2d 	bl	800672c <HAL_GetTick>
 80020d2:	4603      	mov	r3, r0
 80020d4:	4a1e      	ldr	r2, [pc, #120]	; (8002150 <update_madgwick+0x90>)
 80020d6:	6013      	str	r3, [r2, #0]
	deltaT = newTime - oldTime;
 80020d8:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <update_madgwick+0x90>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <update_madgwick+0x94>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe f976 	bl	80003d4 <__aeabi_ui2d>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	491a      	ldr	r1, [pc, #104]	; (8002158 <update_madgwick+0x98>)
 80020ee:	e9c1 2300 	strd	r2, r3, [r1]
	oldTime = newTime;
 80020f2:	4b17      	ldr	r3, [pc, #92]	; (8002150 <update_madgwick+0x90>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a17      	ldr	r2, [pc, #92]	; (8002154 <update_madgwick+0x94>)
 80020f8:	6013      	str	r3, [r2, #0]
	deltaT = fabs(deltaT * 0.001);
 80020fa:	4b17      	ldr	r3, [pc, #92]	; (8002158 <update_madgwick+0x98>)
 80020fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002100:	a311      	add	r3, pc, #68	; (adr r3, 8002148 <update_madgwick+0x88>)
 8002102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002106:	f7fe f9df 	bl	80004c8 <__aeabi_dmul>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4614      	mov	r4, r2
 8002110:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002114:	4b10      	ldr	r3, [pc, #64]	; (8002158 <update_madgwick+0x98>)
 8002116:	e9c3 4500 	strd	r4, r5, [r3]

	madgwick(ax, ay, az, gx, gy, gz, mx, my, mz, q);
 800211a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211c:	9305      	str	r3, [sp, #20]
 800211e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002120:	9304      	str	r3, [sp, #16]
 8002122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002124:	9303      	str	r3, [sp, #12]
 8002126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002128:	9302      	str	r3, [sp, #8]
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	9301      	str	r3, [sp, #4]
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	68b9      	ldr	r1, [r7, #8]
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 f80f 	bl	800215c <madgwick>
}
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bdb0      	pop	{r4, r5, r7, pc}
 8002146:	bf00      	nop
 8002148:	d2f1a9fc 	.word	0xd2f1a9fc
 800214c:	3f50624d 	.word	0x3f50624d
 8002150:	20000110 	.word	0x20000110
 8002154:	20000114 	.word	0x20000114
 8002158:	20000108 	.word	0x20000108

0800215c <madgwick>:

void madgwick(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz, float* q){
 800215c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002160:	b0e5      	sub	sp, #404	; 0x194
 8002162:	af00      	add	r7, sp, #0
 8002164:	f507 74c8 	add.w	r4, r7, #400	; 0x190
 8002168:	f5a4 74a6 	sub.w	r4, r4, #332	; 0x14c
 800216c:	6020      	str	r0, [r4, #0]
 800216e:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8002172:	f5a0 70a8 	sub.w	r0, r0, #336	; 0x150
 8002176:	6001      	str	r1, [r0, #0]
 8002178:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 800217c:	f5a1 71aa 	sub.w	r1, r1, #340	; 0x154
 8002180:	600a      	str	r2, [r1, #0]
 8002182:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8002186:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800218a:	6013      	str	r3, [r2, #0]
	double q0 = q[0], q1 = q[1], q2 = q[2], q3 = q[3];  // short name local variable for readability
 800218c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe f940 	bl	8000418 <__aeabi_f2d>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
 80021a0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80021a4:	3304      	adds	r3, #4
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe f935 	bl	8000418 <__aeabi_f2d>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
 80021b6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80021ba:	3308      	adds	r3, #8
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe f92a 	bl	8000418 <__aeabi_f2d>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
 80021cc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80021d0:	330c      	adds	r3, #12
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe f91f 	bl	8000418 <__aeabi_f2d>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
	        double qDot1, qDot2, qDot3, qDot4;
	        double hx, hy;
	        double _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	        // Rate of change of quaternion from gyroscope
	        qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80021e2:	f8d7 5180 	ldr.w	r5, [r7, #384]	; 0x180
 80021e6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80021ea:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 80021ee:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80021f2:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80021f6:	6818      	ldr	r0, [r3, #0]
 80021f8:	f7fe f90e 	bl	8000418 <__aeabi_f2d>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4628      	mov	r0, r5
 8002202:	4631      	mov	r1, r6
 8002204:	f7fe f960 	bl	80004c8 <__aeabi_dmul>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4614      	mov	r4, r2
 800220e:	461d      	mov	r5, r3
 8002210:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8002214:	f7fe f900 	bl	8000418 <__aeabi_f2d>
 8002218:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800221c:	f7fe f954 	bl	80004c8 <__aeabi_dmul>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4620      	mov	r0, r4
 8002226:	4629      	mov	r1, r5
 8002228:	f7fd ff96 	bl	8000158 <__aeabi_dsub>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4614      	mov	r4, r2
 8002232:	461d      	mov	r5, r3
 8002234:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8002238:	f7fe f8ee 	bl	8000418 <__aeabi_f2d>
 800223c:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8002240:	f7fe f942 	bl	80004c8 <__aeabi_dmul>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4620      	mov	r0, r4
 800224a:	4629      	mov	r1, r5
 800224c:	f7fd ff84 	bl	8000158 <__aeabi_dsub>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4610      	mov	r0, r2
 8002256:	4619      	mov	r1, r3
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	4bcc      	ldr	r3, [pc, #816]	; (8002590 <madgwick+0x434>)
 800225e:	f7fe f933 	bl	80004c8 <__aeabi_dmul>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
	        qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800226a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800226e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002272:	6818      	ldr	r0, [r3, #0]
 8002274:	f7fe f8d0 	bl	8000418 <__aeabi_f2d>
 8002278:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800227c:	f7fe f924 	bl	80004c8 <__aeabi_dmul>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4614      	mov	r4, r2
 8002286:	461d      	mov	r5, r3
 8002288:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 800228c:	f7fe f8c4 	bl	8000418 <__aeabi_f2d>
 8002290:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8002294:	f7fe f918 	bl	80004c8 <__aeabi_dmul>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4620      	mov	r0, r4
 800229e:	4629      	mov	r1, r5
 80022a0:	f7fd ff5c 	bl	800015c <__adddf3>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4614      	mov	r4, r2
 80022aa:	461d      	mov	r5, r3
 80022ac:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 80022b0:	f7fe f8b2 	bl	8000418 <__aeabi_f2d>
 80022b4:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80022b8:	f7fe f906 	bl	80004c8 <__aeabi_dmul>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4620      	mov	r0, r4
 80022c2:	4629      	mov	r1, r5
 80022c4:	f7fd ff48 	bl	8000158 <__aeabi_dsub>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4610      	mov	r0, r2
 80022ce:	4619      	mov	r1, r3
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	4bae      	ldr	r3, [pc, #696]	; (8002590 <madgwick+0x434>)
 80022d6:	f7fe f8f7 	bl	80004c8 <__aeabi_dmul>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
	        qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80022e2:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 80022e6:	f7fe f897 	bl	8000418 <__aeabi_f2d>
 80022ea:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80022ee:	f7fe f8eb 	bl	80004c8 <__aeabi_dmul>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4614      	mov	r4, r2
 80022f8:	461d      	mov	r5, r3
 80022fa:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 80022fe:	f7fe f88b 	bl	8000418 <__aeabi_f2d>
 8002302:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8002306:	f7fe f8df 	bl	80004c8 <__aeabi_dmul>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4620      	mov	r0, r4
 8002310:	4629      	mov	r1, r5
 8002312:	f7fd ff21 	bl	8000158 <__aeabi_dsub>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4614      	mov	r4, r2
 800231c:	461d      	mov	r5, r3
 800231e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002322:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002326:	6818      	ldr	r0, [r3, #0]
 8002328:	f7fe f876 	bl	8000418 <__aeabi_f2d>
 800232c:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8002330:	f7fe f8ca 	bl	80004c8 <__aeabi_dmul>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4620      	mov	r0, r4
 800233a:	4629      	mov	r1, r5
 800233c:	f7fd ff0e 	bl	800015c <__adddf3>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4610      	mov	r0, r2
 8002346:	4619      	mov	r1, r3
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	4b90      	ldr	r3, [pc, #576]	; (8002590 <madgwick+0x434>)
 800234e:	f7fe f8bb 	bl	80004c8 <__aeabi_dmul>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
	        qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800235a:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 800235e:	f7fe f85b 	bl	8000418 <__aeabi_f2d>
 8002362:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002366:	f7fe f8af 	bl	80004c8 <__aeabi_dmul>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4614      	mov	r4, r2
 8002370:	461d      	mov	r5, r3
 8002372:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8002376:	f7fe f84f 	bl	8000418 <__aeabi_f2d>
 800237a:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800237e:	f7fe f8a3 	bl	80004c8 <__aeabi_dmul>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4620      	mov	r0, r4
 8002388:	4629      	mov	r1, r5
 800238a:	f7fd fee7 	bl	800015c <__adddf3>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4614      	mov	r4, r2
 8002394:	461d      	mov	r5, r3
 8002396:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800239a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800239e:	6818      	ldr	r0, [r3, #0]
 80023a0:	f7fe f83a 	bl	8000418 <__aeabi_f2d>
 80023a4:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80023a8:	f7fe f88e 	bl	80004c8 <__aeabi_dmul>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4620      	mov	r0, r4
 80023b2:	4629      	mov	r1, r5
 80023b4:	f7fd fed0 	bl	8000158 <__aeabi_dsub>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4610      	mov	r0, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	4b72      	ldr	r3, [pc, #456]	; (8002590 <madgwick+0x434>)
 80023c6:	f7fe f87f 	bl	80004c8 <__aeabi_dmul>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150

	        // Normalise accelerometer measurement
	        double a_norm = ax * ax + ay * ay + az * az;
 80023d2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80023d6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80023da:	6819      	ldr	r1, [r3, #0]
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	f7fe fcc9 	bl	8000d74 <__aeabi_fmul>
 80023e2:	4603      	mov	r3, r0
 80023e4:	461c      	mov	r4, r3
 80023e6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80023ea:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80023ee:	6819      	ldr	r1, [r3, #0]
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	f7fe fcbf 	bl	8000d74 <__aeabi_fmul>
 80023f6:	4603      	mov	r3, r0
 80023f8:	4619      	mov	r1, r3
 80023fa:	4620      	mov	r0, r4
 80023fc:	f7fe fbb2 	bl	8000b64 <__addsf3>
 8002400:	4603      	mov	r3, r0
 8002402:	461c      	mov	r4, r3
 8002404:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002408:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800240c:	6819      	ldr	r1, [r3, #0]
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	f7fe fcb0 	bl	8000d74 <__aeabi_fmul>
 8002414:	4603      	mov	r3, r0
 8002416:	4619      	mov	r1, r3
 8002418:	4620      	mov	r0, r4
 800241a:	f7fe fba3 	bl	8000b64 <__addsf3>
 800241e:	4603      	mov	r3, r0
 8002420:	4618      	mov	r0, r3
 8002422:	f7fd fff9 	bl	8000418 <__aeabi_f2d>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	        if (a_norm == 0.) return;  // handle NaN
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	f04f 0300 	mov.w	r3, #0
 8002436:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800243a:	f7fe faad 	bl	8000998 <__aeabi_dcmpeq>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	f041 842a 	bne.w	8003c9a <madgwick+0x1b3e>
	        recipNorm = 1.0 / sqrt(a_norm);
 8002446:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800244a:	f007 fc09 	bl	8009c60 <sqrt>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	f04f 0000 	mov.w	r0, #0
 8002456:	494f      	ldr	r1, [pc, #316]	; (8002594 <madgwick+0x438>)
 8002458:	f7fe f960 	bl	800071c <__aeabi_ddiv>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	        ax *= recipNorm;
 8002464:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002468:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	f7fd ffd3 	bl	8000418 <__aeabi_f2d>
 8002472:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8002476:	f7fe f827 	bl	80004c8 <__aeabi_dmul>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4610      	mov	r0, r2
 8002480:	4619      	mov	r1, r3
 8002482:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002486:	f5a3 74a6 	sub.w	r4, r3, #332	; 0x14c
 800248a:	f7fe fb15 	bl	8000ab8 <__aeabi_d2f>
 800248e:	4603      	mov	r3, r0
 8002490:	6023      	str	r3, [r4, #0]
	        ay *= recipNorm;
 8002492:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002496:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	f7fd ffbc 	bl	8000418 <__aeabi_f2d>
 80024a0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80024a4:	f7fe f810 	bl	80004c8 <__aeabi_dmul>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80024b4:	f5a3 74a8 	sub.w	r4, r3, #336	; 0x150
 80024b8:	f7fe fafe 	bl	8000ab8 <__aeabi_d2f>
 80024bc:	4603      	mov	r3, r0
 80024be:	6023      	str	r3, [r4, #0]
	        az *= recipNorm;
 80024c0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80024c4:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	f7fd ffa5 	bl	8000418 <__aeabi_f2d>
 80024ce:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80024d2:	f7fd fff9 	bl	80004c8 <__aeabi_dmul>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	4610      	mov	r0, r2
 80024dc:	4619      	mov	r1, r3
 80024de:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80024e2:	f5a3 74aa 	sub.w	r4, r3, #340	; 0x154
 80024e6:	f7fe fae7 	bl	8000ab8 <__aeabi_d2f>
 80024ea:	4603      	mov	r3, r0
 80024ec:	6023      	str	r3, [r4, #0]


	        // Normalise magnetometer measurement
	        double m_norm = mx * mx + my * my + mz * mz;
 80024ee:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 80024f2:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 80024f6:	f7fe fc3d 	bl	8000d74 <__aeabi_fmul>
 80024fa:	4603      	mov	r3, r0
 80024fc:	461c      	mov	r4, r3
 80024fe:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 8002502:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 8002506:	f7fe fc35 	bl	8000d74 <__aeabi_fmul>
 800250a:	4603      	mov	r3, r0
 800250c:	4619      	mov	r1, r3
 800250e:	4620      	mov	r0, r4
 8002510:	f7fe fb28 	bl	8000b64 <__addsf3>
 8002514:	4603      	mov	r3, r0
 8002516:	461c      	mov	r4, r3
 8002518:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 800251c:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8002520:	f7fe fc28 	bl	8000d74 <__aeabi_fmul>
 8002524:	4603      	mov	r3, r0
 8002526:	4619      	mov	r1, r3
 8002528:	4620      	mov	r0, r4
 800252a:	f7fe fb1b 	bl	8000b64 <__addsf3>
 800252e:	4603      	mov	r3, r0
 8002530:	4618      	mov	r0, r3
 8002532:	f7fd ff71 	bl	8000418 <__aeabi_f2d>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	        if (m_norm == 0.) return;  // handle NaN
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800254a:	f7fe fa25 	bl	8000998 <__aeabi_dcmpeq>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	f041 83a4 	bne.w	8003c9e <madgwick+0x1b42>
	        recipNorm = 1.0 / sqrt(m_norm);
 8002556:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800255a:	f007 fb81 	bl	8009c60 <sqrt>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	f04f 0000 	mov.w	r0, #0
 8002566:	490b      	ldr	r1, [pc, #44]	; (8002594 <madgwick+0x438>)
 8002568:	f7fe f8d8 	bl	800071c <__aeabi_ddiv>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	        mx *= recipNorm;
 8002574:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8002578:	f7fd ff4e 	bl	8000418 <__aeabi_f2d>
 800257c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8002580:	f7fd ffa2 	bl	80004c8 <__aeabi_dmul>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	e004      	b.n	8002598 <madgwick+0x43c>
 800258e:	bf00      	nop
 8002590:	3fe00000 	.word	0x3fe00000
 8002594:	3ff00000 	.word	0x3ff00000
 8002598:	f7fe fa8e 	bl	8000ab8 <__aeabi_d2f>
 800259c:	4603      	mov	r3, r0
 800259e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	        my *= recipNorm;
 80025a2:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 80025a6:	f7fd ff37 	bl	8000418 <__aeabi_f2d>
 80025aa:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80025ae:	f7fd ff8b 	bl	80004c8 <__aeabi_dmul>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4610      	mov	r0, r2
 80025b8:	4619      	mov	r1, r3
 80025ba:	f7fe fa7d 	bl	8000ab8 <__aeabi_d2f>
 80025be:	4603      	mov	r3, r0
 80025c0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	        mz *= recipNorm;
 80025c4:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80025c8:	f7fd ff26 	bl	8000418 <__aeabi_f2d>
 80025cc:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80025d0:	f7fd ff7a 	bl	80004c8 <__aeabi_dmul>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	f7fe fa6c 	bl	8000ab8 <__aeabi_d2f>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8

	        // Auxiliary variables to avoid repeated arithmetic
	        _2q0mx = 2.0f * q0 * mx;
 80025e6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	f7fd fdb5 	bl	800015c <__adddf3>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4614      	mov	r4, r2
 80025f8:	461d      	mov	r5, r3
 80025fa:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 80025fe:	f7fd ff0b 	bl	8000418 <__aeabi_f2d>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4620      	mov	r0, r4
 8002608:	4629      	mov	r1, r5
 800260a:	f7fd ff5d 	bl	80004c8 <__aeabi_dmul>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	        _2q0my = 2.0f * q0 * my;
 8002616:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	f7fd fd9d 	bl	800015c <__adddf3>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4614      	mov	r4, r2
 8002628:	461d      	mov	r5, r3
 800262a:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 800262e:	f7fd fef3 	bl	8000418 <__aeabi_f2d>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4620      	mov	r0, r4
 8002638:	4629      	mov	r1, r5
 800263a:	f7fd ff45 	bl	80004c8 <__aeabi_dmul>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	        _2q0mz = 2.0f * q0 * mz;
 8002646:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	f7fd fd85 	bl	800015c <__adddf3>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4614      	mov	r4, r2
 8002658:	461d      	mov	r5, r3
 800265a:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 800265e:	f7fd fedb 	bl	8000418 <__aeabi_f2d>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4620      	mov	r0, r4
 8002668:	4629      	mov	r1, r5
 800266a:	f7fd ff2d 	bl	80004c8 <__aeabi_dmul>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	        _2q1mx = 2.0f * q1 * mx;
 8002676:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	f7fd fd6d 	bl	800015c <__adddf3>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4614      	mov	r4, r2
 8002688:	461d      	mov	r5, r3
 800268a:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 800268e:	f7fd fec3 	bl	8000418 <__aeabi_f2d>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4620      	mov	r0, r4
 8002698:	4629      	mov	r1, r5
 800269a:	f7fd ff15 	bl	80004c8 <__aeabi_dmul>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	        _2q0 = 2.0f * q0;
 80026a6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	f7fd fd55 	bl	800015c <__adddf3>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	        _2q1 = 2.0f * q1;
 80026ba:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	f7fd fd4b 	bl	800015c <__adddf3>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
	        _2q2 = 2.0f * q2;
 80026ce:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	f7fd fd41 	bl	800015c <__adddf3>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
	        _2q3 = 2.0f * q3;
 80026e2:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	f7fd fd37 	bl	800015c <__adddf3>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
	        _2q0q2 = 2.0f * q0 * q2;
 80026f6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	f7fd fd2d 	bl	800015c <__adddf3>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800270a:	f7fd fedd 	bl	80004c8 <__aeabi_dmul>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	        _2q2q3 = 2.0f * q2 * q3;
 8002716:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	f7fd fd1d 	bl	800015c <__adddf3>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800272a:	f7fd fecd 	bl	80004c8 <__aeabi_dmul>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
	        q0q0 = q0 * q0;
 8002736:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800273a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800273e:	f7fd fec3 	bl	80004c8 <__aeabi_dmul>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
	        q0q1 = q0 * q1;
 800274a:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800274e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002752:	f7fd feb9 	bl	80004c8 <__aeabi_dmul>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	        q0q2 = q0 * q2;
 800275e:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8002762:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002766:	f7fd feaf 	bl	80004c8 <__aeabi_dmul>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	        q0q3 = q0 * q3;
 8002772:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8002776:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800277a:	f7fd fea5 	bl	80004c8 <__aeabi_dmul>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
	        q1q1 = q1 * q1;
 8002786:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800278a:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 800278e:	f7fd fe9b 	bl	80004c8 <__aeabi_dmul>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	        q1q2 = q1 * q2;
 800279a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800279e:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 80027a2:	f7fd fe91 	bl	80004c8 <__aeabi_dmul>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	        q1q3 = q1 * q3;
 80027ae:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80027b2:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 80027b6:	f7fd fe87 	bl	80004c8 <__aeabi_dmul>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	        q2q2 = q2 * q2;
 80027c2:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80027c6:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80027ca:	f7fd fe7d 	bl	80004c8 <__aeabi_dmul>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	        q2q3 = q2 * q3;
 80027d6:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80027da:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80027de:	f7fd fe73 	bl	80004c8 <__aeabi_dmul>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	        q3q3 = q3 * q3;
 80027ea:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80027ee:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80027f2:	f7fd fe69 	bl	80004c8 <__aeabi_dmul>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98

	        // Reference direction of Earth's magnetic field
	        hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 80027fe:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8002802:	f7fd fe09 	bl	8000418 <__aeabi_f2d>
 8002806:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800280a:	f7fd fe5d 	bl	80004c8 <__aeabi_dmul>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4614      	mov	r4, r2
 8002814:	461d      	mov	r5, r3
 8002816:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800281a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800281e:	f7fd fe53 	bl	80004c8 <__aeabi_dmul>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4620      	mov	r0, r4
 8002828:	4629      	mov	r1, r5
 800282a:	f7fd fc95 	bl	8000158 <__aeabi_dsub>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4614      	mov	r4, r2
 8002834:	461d      	mov	r5, r3
 8002836:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800283a:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800283e:	f7fd fe43 	bl	80004c8 <__aeabi_dmul>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4620      	mov	r0, r4
 8002848:	4629      	mov	r1, r5
 800284a:	f7fd fc87 	bl	800015c <__adddf3>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4614      	mov	r4, r2
 8002854:	461d      	mov	r5, r3
 8002856:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 800285a:	f7fd fddd 	bl	8000418 <__aeabi_f2d>
 800285e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8002862:	f7fd fe31 	bl	80004c8 <__aeabi_dmul>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4620      	mov	r0, r4
 800286c:	4629      	mov	r1, r5
 800286e:	f7fd fc75 	bl	800015c <__adddf3>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4614      	mov	r4, r2
 8002878:	461d      	mov	r5, r3
 800287a:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 800287e:	f7fd fdcb 	bl	8000418 <__aeabi_f2d>
 8002882:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8002886:	f7fd fe1f 	bl	80004c8 <__aeabi_dmul>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4610      	mov	r0, r2
 8002890:	4619      	mov	r1, r3
 8002892:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8002896:	f7fd fe17 	bl	80004c8 <__aeabi_dmul>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	4620      	mov	r0, r4
 80028a0:	4629      	mov	r1, r5
 80028a2:	f7fd fc5b 	bl	800015c <__adddf3>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4614      	mov	r4, r2
 80028ac:	461d      	mov	r5, r3
 80028ae:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80028b2:	f7fd fdb1 	bl	8000418 <__aeabi_f2d>
 80028b6:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80028ba:	f7fd fe05 	bl	80004c8 <__aeabi_dmul>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	4610      	mov	r0, r2
 80028c4:	4619      	mov	r1, r3
 80028c6:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80028ca:	f7fd fdfd 	bl	80004c8 <__aeabi_dmul>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4620      	mov	r0, r4
 80028d4:	4629      	mov	r1, r5
 80028d6:	f7fd fc41 	bl	800015c <__adddf3>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4614      	mov	r4, r2
 80028e0:	461d      	mov	r5, r3
 80028e2:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 80028e6:	f7fd fd97 	bl	8000418 <__aeabi_f2d>
 80028ea:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80028ee:	f7fd fdeb 	bl	80004c8 <__aeabi_dmul>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4620      	mov	r0, r4
 80028f8:	4629      	mov	r1, r5
 80028fa:	f7fd fc2d 	bl	8000158 <__aeabi_dsub>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4614      	mov	r4, r2
 8002904:	461d      	mov	r5, r3
 8002906:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 800290a:	f7fd fd85 	bl	8000418 <__aeabi_f2d>
 800290e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8002912:	f7fd fdd9 	bl	80004c8 <__aeabi_dmul>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4620      	mov	r0, r4
 800291c:	4629      	mov	r1, r5
 800291e:	f7fd fc1b 	bl	8000158 <__aeabi_dsub>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	        hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 800292a:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800292e:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8002932:	f7fd fdc9 	bl	80004c8 <__aeabi_dmul>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4614      	mov	r4, r2
 800293c:	461d      	mov	r5, r3
 800293e:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 8002942:	f7fd fd69 	bl	8000418 <__aeabi_f2d>
 8002946:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800294a:	f7fd fdbd 	bl	80004c8 <__aeabi_dmul>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4620      	mov	r0, r4
 8002954:	4629      	mov	r1, r5
 8002956:	f7fd fc01 	bl	800015c <__adddf3>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4614      	mov	r4, r2
 8002960:	461d      	mov	r5, r3
 8002962:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8002966:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800296a:	f7fd fdad 	bl	80004c8 <__aeabi_dmul>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	4620      	mov	r0, r4
 8002974:	4629      	mov	r1, r5
 8002976:	f7fd fbef 	bl	8000158 <__aeabi_dsub>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4614      	mov	r4, r2
 8002980:	461d      	mov	r5, r3
 8002982:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8002986:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800298a:	f7fd fd9d 	bl	80004c8 <__aeabi_dmul>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4620      	mov	r0, r4
 8002994:	4629      	mov	r1, r5
 8002996:	f7fd fbe1 	bl	800015c <__adddf3>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4614      	mov	r4, r2
 80029a0:	461d      	mov	r5, r3
 80029a2:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 80029a6:	f7fd fd37 	bl	8000418 <__aeabi_f2d>
 80029aa:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80029ae:	f7fd fd8b 	bl	80004c8 <__aeabi_dmul>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4620      	mov	r0, r4
 80029b8:	4629      	mov	r1, r5
 80029ba:	f7fd fbcd 	bl	8000158 <__aeabi_dsub>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4614      	mov	r4, r2
 80029c4:	461d      	mov	r5, r3
 80029c6:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 80029ca:	f7fd fd25 	bl	8000418 <__aeabi_f2d>
 80029ce:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80029d2:	f7fd fd79 	bl	80004c8 <__aeabi_dmul>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4620      	mov	r0, r4
 80029dc:	4629      	mov	r1, r5
 80029de:	f7fd fbbd 	bl	800015c <__adddf3>
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	4614      	mov	r4, r2
 80029e8:	461d      	mov	r5, r3
 80029ea:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80029ee:	f7fd fd13 	bl	8000418 <__aeabi_f2d>
 80029f2:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80029f6:	f7fd fd67 	bl	80004c8 <__aeabi_dmul>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4610      	mov	r0, r2
 8002a00:	4619      	mov	r1, r3
 8002a02:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8002a06:	f7fd fd5f 	bl	80004c8 <__aeabi_dmul>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	4620      	mov	r0, r4
 8002a10:	4629      	mov	r1, r5
 8002a12:	f7fd fba3 	bl	800015c <__adddf3>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4614      	mov	r4, r2
 8002a1c:	461d      	mov	r5, r3
 8002a1e:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 8002a22:	f7fd fcf9 	bl	8000418 <__aeabi_f2d>
 8002a26:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8002a2a:	f7fd fd4d 	bl	80004c8 <__aeabi_dmul>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4620      	mov	r0, r4
 8002a34:	4629      	mov	r1, r5
 8002a36:	f7fd fb8f 	bl	8000158 <__aeabi_dsub>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	        _2bx = sqrt(hx * hx + hy * hy);
 8002a42:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8002a46:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8002a4a:	f7fd fd3d 	bl	80004c8 <__aeabi_dmul>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4614      	mov	r4, r2
 8002a54:	461d      	mov	r5, r3
 8002a56:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002a5a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002a5e:	f7fd fd33 	bl	80004c8 <__aeabi_dmul>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4620      	mov	r0, r4
 8002a68:	4629      	mov	r1, r5
 8002a6a:	f7fd fb77 	bl	800015c <__adddf3>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	4610      	mov	r0, r2
 8002a74:	4619      	mov	r1, r3
 8002a76:	f007 f8f3 	bl	8009c60 <sqrt>
 8002a7a:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
	        _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8002a7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002a82:	633b      	str	r3, [r7, #48]	; 0x30
 8002a84:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002a88:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a8e:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8002a92:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002a96:	f7fd fd17 	bl	80004c8 <__aeabi_dmul>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4614      	mov	r4, r2
 8002aa0:	461d      	mov	r5, r3
 8002aa2:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8002aa6:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8002aaa:	f7fd fd0d 	bl	80004c8 <__aeabi_dmul>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	f7fd fb51 	bl	800015c <__adddf3>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4614      	mov	r4, r2
 8002ac0:	461d      	mov	r5, r3
 8002ac2:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8002ac6:	f7fd fca7 	bl	8000418 <__aeabi_f2d>
 8002aca:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8002ace:	f7fd fcfb 	bl	80004c8 <__aeabi_dmul>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4620      	mov	r0, r4
 8002ad8:	4629      	mov	r1, r5
 8002ada:	f7fd fb3f 	bl	800015c <__adddf3>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4614      	mov	r4, r2
 8002ae4:	461d      	mov	r5, r3
 8002ae6:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8002aea:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8002aee:	f7fd fceb 	bl	80004c8 <__aeabi_dmul>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4620      	mov	r0, r4
 8002af8:	4629      	mov	r1, r5
 8002afa:	f7fd fb2f 	bl	800015c <__adddf3>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4614      	mov	r4, r2
 8002b04:	461d      	mov	r5, r3
 8002b06:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8002b0a:	f7fd fc85 	bl	8000418 <__aeabi_f2d>
 8002b0e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8002b12:	f7fd fcd9 	bl	80004c8 <__aeabi_dmul>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	4629      	mov	r1, r5
 8002b1e:	f7fd fb1b 	bl	8000158 <__aeabi_dsub>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4614      	mov	r4, r2
 8002b28:	461d      	mov	r5, r3
 8002b2a:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 8002b2e:	f7fd fc73 	bl	8000418 <__aeabi_f2d>
 8002b32:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8002b36:	f7fd fcc7 	bl	80004c8 <__aeabi_dmul>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4610      	mov	r0, r2
 8002b40:	4619      	mov	r1, r3
 8002b42:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8002b46:	f7fd fcbf 	bl	80004c8 <__aeabi_dmul>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4620      	mov	r0, r4
 8002b50:	4629      	mov	r1, r5
 8002b52:	f7fd fb03 	bl	800015c <__adddf3>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4614      	mov	r4, r2
 8002b5c:	461d      	mov	r5, r3
 8002b5e:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8002b62:	f7fd fc59 	bl	8000418 <__aeabi_f2d>
 8002b66:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002b6a:	f7fd fcad 	bl	80004c8 <__aeabi_dmul>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4620      	mov	r0, r4
 8002b74:	4629      	mov	r1, r5
 8002b76:	f7fd faef 	bl	8000158 <__aeabi_dsub>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4614      	mov	r4, r2
 8002b80:	461d      	mov	r5, r3
 8002b82:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8002b86:	f7fd fc47 	bl	8000418 <__aeabi_f2d>
 8002b8a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8002b8e:	f7fd fc9b 	bl	80004c8 <__aeabi_dmul>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4620      	mov	r0, r4
 8002b98:	4629      	mov	r1, r5
 8002b9a:	f7fd fadf 	bl	800015c <__adddf3>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	        _4bx = 2.0f * _2bx;
 8002ba6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	f7fd fad5 	bl	800015c <__adddf3>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	        _4bz = 2.0f * _2bz;
 8002bba:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	f7fd facb 	bl	800015c <__adddf3>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

	        // Gradient decent algorithm corrective step
	        s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8002bce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002bd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002bd8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	f7fd fab9 	bl	800015c <__adddf3>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4610      	mov	r0, r2
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8002bf6:	f7fd faaf 	bl	8000158 <__aeabi_dsub>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4614      	mov	r4, r2
 8002c00:	461d      	mov	r5, r3
 8002c02:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002c06:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	f7fd fc04 	bl	8000418 <__aeabi_f2d>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4620      	mov	r0, r4
 8002c16:	4629      	mov	r1, r5
 8002c18:	f7fd fa9e 	bl	8000158 <__aeabi_dsub>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c24:	f7fd fc50 	bl	80004c8 <__aeabi_dmul>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4690      	mov	r8, r2
 8002c2e:	4699      	mov	r9, r3
 8002c30:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	f7fd fa90 	bl	800015c <__adddf3>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8002c48:	f7fd fa88 	bl	800015c <__adddf3>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4614      	mov	r4, r2
 8002c52:	461d      	mov	r5, r3
 8002c54:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002c58:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	f7fd fbdb 	bl	8000418 <__aeabi_f2d>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4620      	mov	r0, r4
 8002c68:	4629      	mov	r1, r5
 8002c6a:	f7fd fa75 	bl	8000158 <__aeabi_dsub>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4610      	mov	r0, r2
 8002c74:	4619      	mov	r1, r3
 8002c76:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8002c7a:	f7fd fc25 	bl	80004c8 <__aeabi_dmul>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4640      	mov	r0, r8
 8002c84:	4649      	mov	r1, r9
 8002c86:	f7fd fa69 	bl	800015c <__adddf3>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4692      	mov	sl, r2
 8002c90:	469b      	mov	fp, r3
 8002c92:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8002c96:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002c9a:	f7fd fc15 	bl	80004c8 <__aeabi_dmul>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4690      	mov	r8, r2
 8002ca4:	4699      	mov	r9, r3
 8002ca6:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002caa:	f04f 0000 	mov.w	r0, #0
 8002cae:	49d8      	ldr	r1, [pc, #864]	; (8003010 <madgwick+0xeb4>)
 8002cb0:	f7fd fa52 	bl	8000158 <__aeabi_dsub>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4610      	mov	r0, r2
 8002cba:	4619      	mov	r1, r3
 8002cbc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8002cc0:	f7fd fa4a 	bl	8000158 <__aeabi_dsub>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4610      	mov	r0, r2
 8002cca:	4619      	mov	r1, r3
 8002ccc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002cd0:	f7fd fbfa 	bl	80004c8 <__aeabi_dmul>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4614      	mov	r4, r2
 8002cda:	461d      	mov	r5, r3
 8002cdc:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8002ce0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002ce4:	f7fd fa38 	bl	8000158 <__aeabi_dsub>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4610      	mov	r0, r2
 8002cee:	4619      	mov	r1, r3
 8002cf0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002cf4:	f7fd fbe8 	bl	80004c8 <__aeabi_dmul>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	4629      	mov	r1, r5
 8002d00:	f7fd fa2c 	bl	800015c <__adddf3>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4614      	mov	r4, r2
 8002d0a:	461d      	mov	r5, r3
 8002d0c:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8002d10:	f7fd fb82 	bl	8000418 <__aeabi_f2d>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4620      	mov	r0, r4
 8002d1a:	4629      	mov	r1, r5
 8002d1c:	f7fd fa1c 	bl	8000158 <__aeabi_dsub>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4640      	mov	r0, r8
 8002d26:	4649      	mov	r1, r9
 8002d28:	f7fd fbce 	bl	80004c8 <__aeabi_dmul>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4650      	mov	r0, sl
 8002d32:	4659      	mov	r1, fp
 8002d34:	f7fd fa10 	bl	8000158 <__aeabi_dsub>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4692      	mov	sl, r2
 8002d3e:	469b      	mov	fp, r3
 8002d40:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002d44:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	623b      	str	r3, [r7, #32]
 8002d4c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002d50:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5c:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8002d60:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d64:	f7fd fbb0 	bl	80004c8 <__aeabi_dmul>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4614      	mov	r4, r2
 8002d6e:	461d      	mov	r5, r3
 8002d70:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8002d74:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002d78:	f7fd fba6 	bl	80004c8 <__aeabi_dmul>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4620      	mov	r0, r4
 8002d82:	4629      	mov	r1, r5
 8002d84:	f7fd f9ea 	bl	800015c <__adddf3>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4690      	mov	r8, r2
 8002d8e:	4699      	mov	r9, r3
 8002d90:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8002d94:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002d98:	f7fd f9de 	bl	8000158 <__aeabi_dsub>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4610      	mov	r0, r2
 8002da2:	4619      	mov	r1, r3
 8002da4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002da8:	f7fd fb8e 	bl	80004c8 <__aeabi_dmul>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4614      	mov	r4, r2
 8002db2:	461d      	mov	r5, r3
 8002db4:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002db8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002dbc:	f7fd f9ce 	bl	800015c <__adddf3>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002dcc:	f7fd fb7c 	bl	80004c8 <__aeabi_dmul>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	4629      	mov	r1, r5
 8002dd8:	f7fd f9c0 	bl	800015c <__adddf3>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4614      	mov	r4, r2
 8002de2:	461d      	mov	r5, r3
 8002de4:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 8002de8:	f7fd fb16 	bl	8000418 <__aeabi_f2d>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4620      	mov	r0, r4
 8002df2:	4629      	mov	r1, r5
 8002df4:	f7fd f9b0 	bl	8000158 <__aeabi_dsub>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4640      	mov	r0, r8
 8002dfe:	4649      	mov	r1, r9
 8002e00:	f7fd fb62 	bl	80004c8 <__aeabi_dmul>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4650      	mov	r0, sl
 8002e0a:	4659      	mov	r1, fp
 8002e0c:	f7fd f9a6 	bl	800015c <__adddf3>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4692      	mov	sl, r2
 8002e16:	469b      	mov	fp, r3
 8002e18:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8002e1c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e20:	f7fd fb52 	bl	80004c8 <__aeabi_dmul>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4690      	mov	r8, r2
 8002e2a:	4699      	mov	r9, r3
 8002e2c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8002e30:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002e34:	f7fd f992 	bl	800015c <__adddf3>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	4619      	mov	r1, r3
 8002e40:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002e44:	f7fd fb40 	bl	80004c8 <__aeabi_dmul>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4614      	mov	r4, r2
 8002e4e:	461d      	mov	r5, r3
 8002e50:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8002e54:	f04f 0000 	mov.w	r0, #0
 8002e58:	496d      	ldr	r1, [pc, #436]	; (8003010 <madgwick+0xeb4>)
 8002e5a:	f7fd f97d 	bl	8000158 <__aeabi_dsub>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4610      	mov	r0, r2
 8002e64:	4619      	mov	r1, r3
 8002e66:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002e6a:	f7fd f975 	bl	8000158 <__aeabi_dsub>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4610      	mov	r0, r2
 8002e74:	4619      	mov	r1, r3
 8002e76:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002e7a:	f7fd fb25 	bl	80004c8 <__aeabi_dmul>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	4620      	mov	r0, r4
 8002e84:	4629      	mov	r1, r5
 8002e86:	f7fd f969 	bl	800015c <__adddf3>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4614      	mov	r4, r2
 8002e90:	461d      	mov	r5, r3
 8002e92:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8002e96:	f7fd fabf 	bl	8000418 <__aeabi_f2d>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	4629      	mov	r1, r5
 8002ea2:	f7fd f959 	bl	8000158 <__aeabi_dsub>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4640      	mov	r0, r8
 8002eac:	4649      	mov	r1, r9
 8002eae:	f7fd fb0b 	bl	80004c8 <__aeabi_dmul>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4650      	mov	r0, sl
 8002eb8:	4659      	mov	r1, fp
 8002eba:	f7fd f94f 	bl	800015c <__adddf3>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	        s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8002ec6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	f7fd f945 	bl	800015c <__adddf3>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	4619      	mov	r1, r3
 8002eda:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8002ede:	f7fd f93b 	bl	8000158 <__aeabi_dsub>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4614      	mov	r4, r2
 8002ee8:	461d      	mov	r5, r3
 8002eea:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002eee:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	f7fd fa90 	bl	8000418 <__aeabi_f2d>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4620      	mov	r0, r4
 8002efe:	4629      	mov	r1, r5
 8002f00:	f7fd f92a 	bl	8000158 <__aeabi_dsub>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4610      	mov	r0, r2
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8002f10:	f7fd fada 	bl	80004c8 <__aeabi_dmul>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4690      	mov	r8, r2
 8002f1a:	4699      	mov	r9, r3
 8002f1c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	f7fd f91a 	bl	800015c <__adddf3>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	4619      	mov	r1, r3
 8002f30:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8002f34:	f7fd f912 	bl	800015c <__adddf3>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4614      	mov	r4, r2
 8002f3e:	461d      	mov	r5, r3
 8002f40:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002f44:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	f7fd fa65 	bl	8000418 <__aeabi_f2d>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4620      	mov	r0, r4
 8002f54:	4629      	mov	r1, r5
 8002f56:	f7fd f8ff 	bl	8000158 <__aeabi_dsub>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4610      	mov	r0, r2
 8002f60:	4619      	mov	r1, r3
 8002f62:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8002f66:	f7fd faaf 	bl	80004c8 <__aeabi_dmul>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	4640      	mov	r0, r8
 8002f70:	4649      	mov	r1, r9
 8002f72:	f7fd f8f3 	bl	800015c <__adddf3>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4692      	mov	sl, r2
 8002f7c:	469b      	mov	fp, r3
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	4b24      	ldr	r3, [pc, #144]	; (8003014 <madgwick+0xeb8>)
 8002f84:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8002f88:	f7fd fa9e 	bl	80004c8 <__aeabi_dmul>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4690      	mov	r8, r2
 8002f92:	4699      	mov	r9, r3
 8002f94:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	f7fd f8de 	bl	800015c <__adddf3>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	f04f 0000 	mov.w	r0, #0
 8002fa8:	491b      	ldr	r1, [pc, #108]	; (8003018 <madgwick+0xebc>)
 8002faa:	f7fd f8d5 	bl	8000158 <__aeabi_dsub>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	4614      	mov	r4, r2
 8002fb4:	461d      	mov	r5, r3
 8002fb6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	f7fd f8cd 	bl	800015c <__adddf3>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	4629      	mov	r1, r5
 8002fca:	f7fd f8c5 	bl	8000158 <__aeabi_dsub>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4614      	mov	r4, r2
 8002fd4:	461d      	mov	r5, r3
 8002fd6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002fda:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002fde:	6818      	ldr	r0, [r3, #0]
 8002fe0:	f7fd fa1a 	bl	8000418 <__aeabi_f2d>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4620      	mov	r0, r4
 8002fea:	4629      	mov	r1, r5
 8002fec:	f7fd f8b4 	bl	8000158 <__aeabi_dsub>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4640      	mov	r0, r8
 8002ff6:	4649      	mov	r1, r9
 8002ff8:	f7fd fa66 	bl	80004c8 <__aeabi_dmul>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4650      	mov	r0, sl
 8003002:	4659      	mov	r1, fp
 8003004:	f7fd f8a8 	bl	8000158 <__aeabi_dsub>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	e006      	b.n	800301c <madgwick+0xec0>
 800300e:	bf00      	nop
 8003010:	3fe00000 	.word	0x3fe00000
 8003014:	40100000 	.word	0x40100000
 8003018:	3ff00000 	.word	0x3ff00000
 800301c:	4692      	mov	sl, r2
 800301e:	469b      	mov	fp, r3
 8003020:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8003024:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003028:	f7fd fa4e 	bl	80004c8 <__aeabi_dmul>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4690      	mov	r8, r2
 8003032:	4699      	mov	r9, r3
 8003034:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8003038:	f04f 0000 	mov.w	r0, #0
 800303c:	49d6      	ldr	r1, [pc, #856]	; (8003398 <madgwick+0x123c>)
 800303e:	f7fd f88b 	bl	8000158 <__aeabi_dsub>
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	4610      	mov	r0, r2
 8003048:	4619      	mov	r1, r3
 800304a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800304e:	f7fd f883 	bl	8000158 <__aeabi_dsub>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4610      	mov	r0, r2
 8003058:	4619      	mov	r1, r3
 800305a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800305e:	f7fd fa33 	bl	80004c8 <__aeabi_dmul>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4614      	mov	r4, r2
 8003068:	461d      	mov	r5, r3
 800306a:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800306e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003072:	f7fd f871 	bl	8000158 <__aeabi_dsub>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4610      	mov	r0, r2
 800307c:	4619      	mov	r1, r3
 800307e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003082:	f7fd fa21 	bl	80004c8 <__aeabi_dmul>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4620      	mov	r0, r4
 800308c:	4629      	mov	r1, r5
 800308e:	f7fd f865 	bl	800015c <__adddf3>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4614      	mov	r4, r2
 8003098:	461d      	mov	r5, r3
 800309a:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 800309e:	f7fd f9bb 	bl	8000418 <__aeabi_f2d>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4620      	mov	r0, r4
 80030a8:	4629      	mov	r1, r5
 80030aa:	f7fd f855 	bl	8000158 <__aeabi_dsub>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4640      	mov	r0, r8
 80030b4:	4649      	mov	r1, r9
 80030b6:	f7fd fa07 	bl	80004c8 <__aeabi_dmul>
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4650      	mov	r0, sl
 80030c0:	4659      	mov	r1, fp
 80030c2:	f7fd f84b 	bl	800015c <__adddf3>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4692      	mov	sl, r2
 80030cc:	469b      	mov	fp, r3
 80030ce:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80030d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80030d6:	f7fd f9f7 	bl	80004c8 <__aeabi_dmul>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	4614      	mov	r4, r2
 80030e0:	461d      	mov	r5, r3
 80030e2:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80030e6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80030ea:	f7fd f9ed 	bl	80004c8 <__aeabi_dmul>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4620      	mov	r0, r4
 80030f4:	4629      	mov	r1, r5
 80030f6:	f7fd f831 	bl	800015c <__adddf3>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	4690      	mov	r8, r2
 8003100:	4699      	mov	r9, r3
 8003102:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8003106:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800310a:	f7fd f825 	bl	8000158 <__aeabi_dsub>
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4610      	mov	r0, r2
 8003114:	4619      	mov	r1, r3
 8003116:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800311a:	f7fd f9d5 	bl	80004c8 <__aeabi_dmul>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4614      	mov	r4, r2
 8003124:	461d      	mov	r5, r3
 8003126:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800312a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800312e:	f7fd f815 	bl	800015c <__adddf3>
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	4610      	mov	r0, r2
 8003138:	4619      	mov	r1, r3
 800313a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800313e:	f7fd f9c3 	bl	80004c8 <__aeabi_dmul>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	4620      	mov	r0, r4
 8003148:	4629      	mov	r1, r5
 800314a:	f7fd f807 	bl	800015c <__adddf3>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4614      	mov	r4, r2
 8003154:	461d      	mov	r5, r3
 8003156:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 800315a:	f7fd f95d 	bl	8000418 <__aeabi_f2d>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	4620      	mov	r0, r4
 8003164:	4629      	mov	r1, r5
 8003166:	f7fc fff7 	bl	8000158 <__aeabi_dsub>
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4640      	mov	r0, r8
 8003170:	4649      	mov	r1, r9
 8003172:	f7fd f9a9 	bl	80004c8 <__aeabi_dmul>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4650      	mov	r0, sl
 800317c:	4659      	mov	r1, fp
 800317e:	f7fc ffed 	bl	800015c <__adddf3>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4692      	mov	sl, r2
 8003188:	469b      	mov	fp, r3
 800318a:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800318e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003192:	f7fd f999 	bl	80004c8 <__aeabi_dmul>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4614      	mov	r4, r2
 800319c:	461d      	mov	r5, r3
 800319e:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 80031a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80031a6:	f7fd f98f 	bl	80004c8 <__aeabi_dmul>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4620      	mov	r0, r4
 80031b0:	4629      	mov	r1, r5
 80031b2:	f7fc ffd1 	bl	8000158 <__aeabi_dsub>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	4690      	mov	r8, r2
 80031bc:	4699      	mov	r9, r3
 80031be:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80031c2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80031c6:	f7fc ffc9 	bl	800015c <__adddf3>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4610      	mov	r0, r2
 80031d0:	4619      	mov	r1, r3
 80031d2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80031d6:	f7fd f977 	bl	80004c8 <__aeabi_dmul>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4614      	mov	r4, r2
 80031e0:	461d      	mov	r5, r3
 80031e2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80031e6:	f04f 0000 	mov.w	r0, #0
 80031ea:	496b      	ldr	r1, [pc, #428]	; (8003398 <madgwick+0x123c>)
 80031ec:	f7fc ffb4 	bl	8000158 <__aeabi_dsub>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4610      	mov	r0, r2
 80031f6:	4619      	mov	r1, r3
 80031f8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80031fc:	f7fc ffac 	bl	8000158 <__aeabi_dsub>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	4610      	mov	r0, r2
 8003206:	4619      	mov	r1, r3
 8003208:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800320c:	f7fd f95c 	bl	80004c8 <__aeabi_dmul>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4620      	mov	r0, r4
 8003216:	4629      	mov	r1, r5
 8003218:	f7fc ffa0 	bl	800015c <__adddf3>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4614      	mov	r4, r2
 8003222:	461d      	mov	r5, r3
 8003224:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8003228:	f7fd f8f6 	bl	8000418 <__aeabi_f2d>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4620      	mov	r0, r4
 8003232:	4629      	mov	r1, r5
 8003234:	f7fc ff90 	bl	8000158 <__aeabi_dsub>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	4640      	mov	r0, r8
 800323e:	4649      	mov	r1, r9
 8003240:	f7fd f942 	bl	80004c8 <__aeabi_dmul>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4650      	mov	r0, sl
 800324a:	4659      	mov	r1, fp
 800324c:	f7fc ff86 	bl	800015c <__adddf3>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	        s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8003258:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800325c:	61bb      	str	r3, [r7, #24]
 800325e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003262:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003266:	61fb      	str	r3, [r7, #28]
 8003268:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	f7fc ff74 	bl	800015c <__adddf3>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4610      	mov	r0, r2
 800327a:	4619      	mov	r1, r3
 800327c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8003280:	f7fc ff6a 	bl	8000158 <__aeabi_dsub>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4614      	mov	r4, r2
 800328a:	461d      	mov	r5, r3
 800328c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8003290:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	f7fd f8bf 	bl	8000418 <__aeabi_f2d>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	4620      	mov	r0, r4
 80032a0:	4629      	mov	r1, r5
 80032a2:	f7fc ff59 	bl	8000158 <__aeabi_dsub>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032ae:	f7fd f90b 	bl	80004c8 <__aeabi_dmul>
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	4690      	mov	r8, r2
 80032b8:	4699      	mov	r9, r3
 80032ba:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	f7fc ff4b 	bl	800015c <__adddf3>
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	4610      	mov	r0, r2
 80032cc:	4619      	mov	r1, r3
 80032ce:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80032d2:	f7fc ff43 	bl	800015c <__adddf3>
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	4614      	mov	r4, r2
 80032dc:	461d      	mov	r5, r3
 80032de:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80032e2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	f7fd f896 	bl	8000418 <__aeabi_f2d>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4620      	mov	r0, r4
 80032f2:	4629      	mov	r1, r5
 80032f4:	f7fc ff30 	bl	8000158 <__aeabi_dsub>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4610      	mov	r0, r2
 80032fe:	4619      	mov	r1, r3
 8003300:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8003304:	f7fd f8e0 	bl	80004c8 <__aeabi_dmul>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4640      	mov	r0, r8
 800330e:	4649      	mov	r1, r9
 8003310:	f7fc ff24 	bl	800015c <__adddf3>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4692      	mov	sl, r2
 800331a:	469b      	mov	fp, r3
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	4b1e      	ldr	r3, [pc, #120]	; (800339c <madgwick+0x1240>)
 8003322:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8003326:	f7fd f8cf 	bl	80004c8 <__aeabi_dmul>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	4690      	mov	r8, r2
 8003330:	4699      	mov	r9, r3
 8003332:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	f7fc ff0f 	bl	800015c <__adddf3>
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	f04f 0000 	mov.w	r0, #0
 8003346:	4916      	ldr	r1, [pc, #88]	; (80033a0 <madgwick+0x1244>)
 8003348:	f7fc ff06 	bl	8000158 <__aeabi_dsub>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4614      	mov	r4, r2
 8003352:	461d      	mov	r5, r3
 8003354:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	f7fc fefe 	bl	800015c <__adddf3>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4620      	mov	r0, r4
 8003366:	4629      	mov	r1, r5
 8003368:	f7fc fef6 	bl	8000158 <__aeabi_dsub>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4614      	mov	r4, r2
 8003372:	461d      	mov	r5, r3
 8003374:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8003378:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	f7fd f84b 	bl	8000418 <__aeabi_f2d>
 8003382:	4602      	mov	r2, r0
 8003384:	460b      	mov	r3, r1
 8003386:	4620      	mov	r0, r4
 8003388:	4629      	mov	r1, r5
 800338a:	f7fc fee5 	bl	8000158 <__aeabi_dsub>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4640      	mov	r0, r8
 8003394:	4649      	mov	r1, r9
 8003396:	e005      	b.n	80033a4 <madgwick+0x1248>
 8003398:	3fe00000 	.word	0x3fe00000
 800339c:	40100000 	.word	0x40100000
 80033a0:	3ff00000 	.word	0x3ff00000
 80033a4:	f7fd f890 	bl	80004c8 <__aeabi_dmul>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4650      	mov	r0, sl
 80033ae:	4659      	mov	r1, fp
 80033b0:	f7fc fed2 	bl	8000158 <__aeabi_dsub>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4692      	mov	sl, r2
 80033ba:	469b      	mov	fp, r3
 80033bc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80033c0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80033cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80033dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033e0:	f7fd f872 	bl	80004c8 <__aeabi_dmul>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4614      	mov	r4, r2
 80033ea:	461d      	mov	r5, r3
 80033ec:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80033f0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80033f4:	f7fd f868 	bl	80004c8 <__aeabi_dmul>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4620      	mov	r0, r4
 80033fe:	4629      	mov	r1, r5
 8003400:	f7fc feaa 	bl	8000158 <__aeabi_dsub>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4690      	mov	r8, r2
 800340a:	4699      	mov	r9, r3
 800340c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8003410:	f04f 0000 	mov.w	r0, #0
 8003414:	49d2      	ldr	r1, [pc, #840]	; (8003760 <madgwick+0x1604>)
 8003416:	f7fc fe9f 	bl	8000158 <__aeabi_dsub>
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	4610      	mov	r0, r2
 8003420:	4619      	mov	r1, r3
 8003422:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8003426:	f7fc fe97 	bl	8000158 <__aeabi_dsub>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4610      	mov	r0, r2
 8003430:	4619      	mov	r1, r3
 8003432:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003436:	f7fd f847 	bl	80004c8 <__aeabi_dmul>
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	4614      	mov	r4, r2
 8003440:	461d      	mov	r5, r3
 8003442:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8003446:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800344a:	f7fc fe85 	bl	8000158 <__aeabi_dsub>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	4610      	mov	r0, r2
 8003454:	4619      	mov	r1, r3
 8003456:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800345a:	f7fd f835 	bl	80004c8 <__aeabi_dmul>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	4620      	mov	r0, r4
 8003464:	4629      	mov	r1, r5
 8003466:	f7fc fe79 	bl	800015c <__adddf3>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4614      	mov	r4, r2
 8003470:	461d      	mov	r5, r3
 8003472:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8003476:	f7fc ffcf 	bl	8000418 <__aeabi_f2d>
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	4620      	mov	r0, r4
 8003480:	4629      	mov	r1, r5
 8003482:	f7fc fe69 	bl	8000158 <__aeabi_dsub>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4640      	mov	r0, r8
 800348c:	4649      	mov	r1, r9
 800348e:	f7fd f81b 	bl	80004c8 <__aeabi_dmul>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4650      	mov	r0, sl
 8003498:	4659      	mov	r1, fp
 800349a:	f7fc fe5f 	bl	800015c <__adddf3>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4692      	mov	sl, r2
 80034a4:	469b      	mov	fp, r3
 80034a6:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 80034aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034ae:	f7fd f80b 	bl	80004c8 <__aeabi_dmul>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4614      	mov	r4, r2
 80034b8:	461d      	mov	r5, r3
 80034ba:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80034be:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80034c2:	f7fd f801 	bl	80004c8 <__aeabi_dmul>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4620      	mov	r0, r4
 80034cc:	4629      	mov	r1, r5
 80034ce:	f7fc fe45 	bl	800015c <__adddf3>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4690      	mov	r8, r2
 80034d8:	4699      	mov	r9, r3
 80034da:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80034de:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80034e2:	f7fc fe39 	bl	8000158 <__aeabi_dsub>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4610      	mov	r0, r2
 80034ec:	4619      	mov	r1, r3
 80034ee:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80034f2:	f7fc ffe9 	bl	80004c8 <__aeabi_dmul>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	4614      	mov	r4, r2
 80034fc:	461d      	mov	r5, r3
 80034fe:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8003502:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003506:	f7fc fe29 	bl	800015c <__adddf3>
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	4610      	mov	r0, r2
 8003510:	4619      	mov	r1, r3
 8003512:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003516:	f7fc ffd7 	bl	80004c8 <__aeabi_dmul>
 800351a:	4602      	mov	r2, r0
 800351c:	460b      	mov	r3, r1
 800351e:	4620      	mov	r0, r4
 8003520:	4629      	mov	r1, r5
 8003522:	f7fc fe1b 	bl	800015c <__adddf3>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	4614      	mov	r4, r2
 800352c:	461d      	mov	r5, r3
 800352e:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 8003532:	f7fc ff71 	bl	8000418 <__aeabi_f2d>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4620      	mov	r0, r4
 800353c:	4629      	mov	r1, r5
 800353e:	f7fc fe0b 	bl	8000158 <__aeabi_dsub>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	4640      	mov	r0, r8
 8003548:	4649      	mov	r1, r9
 800354a:	f7fc ffbd 	bl	80004c8 <__aeabi_dmul>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4650      	mov	r0, sl
 8003554:	4659      	mov	r1, fp
 8003556:	f7fc fe01 	bl	800015c <__adddf3>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4692      	mov	sl, r2
 8003560:	469b      	mov	fp, r3
 8003562:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003566:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800356a:	f7fc ffad 	bl	80004c8 <__aeabi_dmul>
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	4614      	mov	r4, r2
 8003574:	461d      	mov	r5, r3
 8003576:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800357a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800357e:	f7fc ffa3 	bl	80004c8 <__aeabi_dmul>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4620      	mov	r0, r4
 8003588:	4629      	mov	r1, r5
 800358a:	f7fc fde5 	bl	8000158 <__aeabi_dsub>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4690      	mov	r8, r2
 8003594:	4699      	mov	r9, r3
 8003596:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800359a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800359e:	f7fc fddd 	bl	800015c <__adddf3>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	4610      	mov	r0, r2
 80035a8:	4619      	mov	r1, r3
 80035aa:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80035ae:	f7fc ff8b 	bl	80004c8 <__aeabi_dmul>
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	4614      	mov	r4, r2
 80035b8:	461d      	mov	r5, r3
 80035ba:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80035be:	f04f 0000 	mov.w	r0, #0
 80035c2:	4967      	ldr	r1, [pc, #412]	; (8003760 <madgwick+0x1604>)
 80035c4:	f7fc fdc8 	bl	8000158 <__aeabi_dsub>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4610      	mov	r0, r2
 80035ce:	4619      	mov	r1, r3
 80035d0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80035d4:	f7fc fdc0 	bl	8000158 <__aeabi_dsub>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	4610      	mov	r0, r2
 80035de:	4619      	mov	r1, r3
 80035e0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80035e4:	f7fc ff70 	bl	80004c8 <__aeabi_dmul>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4620      	mov	r0, r4
 80035ee:	4629      	mov	r1, r5
 80035f0:	f7fc fdb4 	bl	800015c <__adddf3>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4614      	mov	r4, r2
 80035fa:	461d      	mov	r5, r3
 80035fc:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8003600:	f7fc ff0a 	bl	8000418 <__aeabi_f2d>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4620      	mov	r0, r4
 800360a:	4629      	mov	r1, r5
 800360c:	f7fc fda4 	bl	8000158 <__aeabi_dsub>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	4640      	mov	r0, r8
 8003616:	4649      	mov	r1, r9
 8003618:	f7fc ff56 	bl	80004c8 <__aeabi_dmul>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4650      	mov	r0, sl
 8003622:	4659      	mov	r1, fp
 8003624:	f7fc fd9a 	bl	800015c <__adddf3>
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	        s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8003630:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	f7fc fd90 	bl	800015c <__adddf3>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4610      	mov	r0, r2
 8003642:	4619      	mov	r1, r3
 8003644:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8003648:	f7fc fd86 	bl	8000158 <__aeabi_dsub>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4614      	mov	r4, r2
 8003652:	461d      	mov	r5, r3
 8003654:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8003658:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	f7fc fedb 	bl	8000418 <__aeabi_f2d>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4620      	mov	r0, r4
 8003668:	4629      	mov	r1, r5
 800366a:	f7fc fd75 	bl	8000158 <__aeabi_dsub>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4610      	mov	r0, r2
 8003674:	4619      	mov	r1, r3
 8003676:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800367a:	f7fc ff25 	bl	80004c8 <__aeabi_dmul>
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	4614      	mov	r4, r2
 8003684:	461d      	mov	r5, r3
 8003686:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	f7fc fd65 	bl	800015c <__adddf3>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	4610      	mov	r0, r2
 8003698:	4619      	mov	r1, r3
 800369a:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800369e:	f7fc fd5d 	bl	800015c <__adddf3>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4690      	mov	r8, r2
 80036a8:	4699      	mov	r9, r3
 80036aa:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80036ae:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80036b2:	6818      	ldr	r0, [r3, #0]
 80036b4:	f7fc feb0 	bl	8000418 <__aeabi_f2d>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4640      	mov	r0, r8
 80036be:	4649      	mov	r1, r9
 80036c0:	f7fc fd4a 	bl	8000158 <__aeabi_dsub>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4610      	mov	r0, r2
 80036ca:	4619      	mov	r1, r3
 80036cc:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80036d0:	f7fc fefa 	bl	80004c8 <__aeabi_dmul>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4620      	mov	r0, r4
 80036da:	4629      	mov	r1, r5
 80036dc:	f7fc fd3e 	bl	800015c <__adddf3>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4690      	mov	r8, r2
 80036e6:	4699      	mov	r9, r3
 80036e8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80036ec:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80036f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8003708:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800370c:	f7fc fedc 	bl	80004c8 <__aeabi_dmul>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4614      	mov	r4, r2
 8003716:	461d      	mov	r5, r3
 8003718:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800371c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003720:	f7fc fed2 	bl	80004c8 <__aeabi_dmul>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	4620      	mov	r0, r4
 800372a:	4629      	mov	r1, r5
 800372c:	f7fc fd16 	bl	800015c <__adddf3>
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	4692      	mov	sl, r2
 8003736:	469b      	mov	fp, r3
 8003738:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800373c:	f04f 0000 	mov.w	r0, #0
 8003740:	4907      	ldr	r1, [pc, #28]	; (8003760 <madgwick+0x1604>)
 8003742:	f7fc fd09 	bl	8000158 <__aeabi_dsub>
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	4610      	mov	r0, r2
 800374c:	4619      	mov	r1, r3
 800374e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8003752:	f7fc fd01 	bl	8000158 <__aeabi_dsub>
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	4610      	mov	r0, r2
 800375c:	4619      	mov	r1, r3
 800375e:	e001      	b.n	8003764 <madgwick+0x1608>
 8003760:	3fe00000 	.word	0x3fe00000
 8003764:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003768:	f7fc feae 	bl	80004c8 <__aeabi_dmul>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4614      	mov	r4, r2
 8003772:	461d      	mov	r5, r3
 8003774:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8003778:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800377c:	f7fc fcec 	bl	8000158 <__aeabi_dsub>
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	4610      	mov	r0, r2
 8003786:	4619      	mov	r1, r3
 8003788:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800378c:	f7fc fe9c 	bl	80004c8 <__aeabi_dmul>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4620      	mov	r0, r4
 8003796:	4629      	mov	r1, r5
 8003798:	f7fc fce0 	bl	800015c <__adddf3>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4614      	mov	r4, r2
 80037a2:	461d      	mov	r5, r3
 80037a4:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 80037a8:	f7fc fe36 	bl	8000418 <__aeabi_f2d>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4620      	mov	r0, r4
 80037b2:	4629      	mov	r1, r5
 80037b4:	f7fc fcd0 	bl	8000158 <__aeabi_dsub>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4650      	mov	r0, sl
 80037be:	4659      	mov	r1, fp
 80037c0:	f7fc fe82 	bl	80004c8 <__aeabi_dmul>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4640      	mov	r0, r8
 80037ca:	4649      	mov	r1, r9
 80037cc:	f7fc fcc6 	bl	800015c <__adddf3>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4614      	mov	r4, r2
 80037d6:	461d      	mov	r5, r3
 80037d8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80037dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80037e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80037f2:	607b      	str	r3, [r7, #4]
 80037f4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80037f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037fc:	f7fc fe64 	bl	80004c8 <__aeabi_dmul>
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	4690      	mov	r8, r2
 8003806:	4699      	mov	r9, r3
 8003808:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800380c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003810:	f7fc fe5a 	bl	80004c8 <__aeabi_dmul>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4640      	mov	r0, r8
 800381a:	4649      	mov	r1, r9
 800381c:	f7fc fc9e 	bl	800015c <__adddf3>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4690      	mov	r8, r2
 8003826:	4699      	mov	r9, r3
 8003828:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800382c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003830:	f7fc fc92 	bl	8000158 <__aeabi_dsub>
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	4610      	mov	r0, r2
 800383a:	4619      	mov	r1, r3
 800383c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003840:	f7fc fe42 	bl	80004c8 <__aeabi_dmul>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4692      	mov	sl, r2
 800384a:	469b      	mov	fp, r3
 800384c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8003850:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003854:	f7fc fc82 	bl	800015c <__adddf3>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4610      	mov	r0, r2
 800385e:	4619      	mov	r1, r3
 8003860:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003864:	f7fc fe30 	bl	80004c8 <__aeabi_dmul>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4650      	mov	r0, sl
 800386e:	4659      	mov	r1, fp
 8003870:	f7fc fc74 	bl	800015c <__adddf3>
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4692      	mov	sl, r2
 800387a:	469b      	mov	fp, r3
 800387c:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 8003880:	f7fc fdca 	bl	8000418 <__aeabi_f2d>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4650      	mov	r0, sl
 800388a:	4659      	mov	r1, fp
 800388c:	f7fc fc64 	bl	8000158 <__aeabi_dsub>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	4640      	mov	r0, r8
 8003896:	4649      	mov	r1, r9
 8003898:	f7fc fe16 	bl	80004c8 <__aeabi_dmul>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4620      	mov	r0, r4
 80038a2:	4629      	mov	r1, r5
 80038a4:	f7fc fc5a 	bl	800015c <__adddf3>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4614      	mov	r4, r2
 80038ae:	461d      	mov	r5, r3
 80038b0:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 80038b4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80038b8:	f7fc fe06 	bl	80004c8 <__aeabi_dmul>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4690      	mov	r8, r2
 80038c2:	4699      	mov	r9, r3
 80038c4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80038c8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80038cc:	f7fc fc46 	bl	800015c <__adddf3>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4610      	mov	r0, r2
 80038d6:	4619      	mov	r1, r3
 80038d8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80038dc:	f7fc fdf4 	bl	80004c8 <__aeabi_dmul>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4692      	mov	sl, r2
 80038e6:	469b      	mov	fp, r3
 80038e8:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80038ec:	f04f 0000 	mov.w	r0, #0
 80038f0:	49b9      	ldr	r1, [pc, #740]	; (8003bd8 <madgwick+0x1a7c>)
 80038f2:	f7fc fc31 	bl	8000158 <__aeabi_dsub>
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	4610      	mov	r0, r2
 80038fc:	4619      	mov	r1, r3
 80038fe:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8003902:	f7fc fc29 	bl	8000158 <__aeabi_dsub>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4610      	mov	r0, r2
 800390c:	4619      	mov	r1, r3
 800390e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003912:	f7fc fdd9 	bl	80004c8 <__aeabi_dmul>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	4650      	mov	r0, sl
 800391c:	4659      	mov	r1, fp
 800391e:	f7fc fc1d 	bl	800015c <__adddf3>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	4692      	mov	sl, r2
 8003928:	469b      	mov	fp, r3
 800392a:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 800392e:	f7fc fd73 	bl	8000418 <__aeabi_f2d>
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	4650      	mov	r0, sl
 8003938:	4659      	mov	r1, fp
 800393a:	f7fc fc0d 	bl	8000158 <__aeabi_dsub>
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	4640      	mov	r0, r8
 8003944:	4649      	mov	r1, r9
 8003946:	f7fc fdbf 	bl	80004c8 <__aeabi_dmul>
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	4620      	mov	r0, r4
 8003950:	4629      	mov	r1, r5
 8003952:	f7fc fc03 	bl	800015c <__adddf3>
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	        recipNorm = 1.0 / sqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);  // normalise step magnitude
 800395e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003962:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003966:	f7fc fdaf 	bl	80004c8 <__aeabi_dmul>
 800396a:	4602      	mov	r2, r0
 800396c:	460b      	mov	r3, r1
 800396e:	4614      	mov	r4, r2
 8003970:	461d      	mov	r5, r3
 8003972:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003976:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800397a:	f7fc fda5 	bl	80004c8 <__aeabi_dmul>
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	4620      	mov	r0, r4
 8003984:	4629      	mov	r1, r5
 8003986:	f7fc fbe9 	bl	800015c <__adddf3>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	4614      	mov	r4, r2
 8003990:	461d      	mov	r5, r3
 8003992:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003996:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800399a:	f7fc fd95 	bl	80004c8 <__aeabi_dmul>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4620      	mov	r0, r4
 80039a4:	4629      	mov	r1, r5
 80039a6:	f7fc fbd9 	bl	800015c <__adddf3>
 80039aa:	4602      	mov	r2, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	4614      	mov	r4, r2
 80039b0:	461d      	mov	r5, r3
 80039b2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80039b6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80039ba:	f7fc fd85 	bl	80004c8 <__aeabi_dmul>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4620      	mov	r0, r4
 80039c4:	4629      	mov	r1, r5
 80039c6:	f7fc fbc9 	bl	800015c <__adddf3>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	4610      	mov	r0, r2
 80039d0:	4619      	mov	r1, r3
 80039d2:	f006 f945 	bl	8009c60 <sqrt>
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	f04f 0000 	mov.w	r0, #0
 80039de:	497f      	ldr	r1, [pc, #508]	; (8003bdc <madgwick+0x1a80>)
 80039e0:	f7fc fe9c 	bl	800071c <__aeabi_ddiv>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	        s0 *= recipNorm;
 80039ec:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80039f0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80039f4:	f7fc fd68 	bl	80004c8 <__aeabi_dmul>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	        s1 *= recipNorm;
 8003a00:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8003a04:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003a08:	f7fc fd5e 	bl	80004c8 <__aeabi_dmul>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	        s2 *= recipNorm;
 8003a14:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8003a18:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003a1c:	f7fc fd54 	bl	80004c8 <__aeabi_dmul>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	        s3 *= recipNorm;
 8003a28:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8003a2c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003a30:	f7fc fd4a 	bl	80004c8 <__aeabi_dmul>
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	        // Apply feedback step
	        qDot1 -= beta * s0;
 8003a3c:	4b68      	ldr	r3, [pc, #416]	; (8003be0 <madgwick+0x1a84>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fc fce9 	bl	8000418 <__aeabi_f2d>
 8003a46:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003a4a:	f7fc fd3d 	bl	80004c8 <__aeabi_dmul>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8003a56:	f7fc fb7f 	bl	8000158 <__aeabi_dsub>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
	        qDot2 -= beta * s1;
 8003a62:	4b5f      	ldr	r3, [pc, #380]	; (8003be0 <madgwick+0x1a84>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fc fcd6 	bl	8000418 <__aeabi_f2d>
 8003a6c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a70:	f7fc fd2a 	bl	80004c8 <__aeabi_dmul>
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8003a7c:	f7fc fb6c 	bl	8000158 <__aeabi_dsub>
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
	        qDot3 -= beta * s2;
 8003a88:	4b55      	ldr	r3, [pc, #340]	; (8003be0 <madgwick+0x1a84>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fc fcc3 	bl	8000418 <__aeabi_f2d>
 8003a92:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a96:	f7fc fd17 	bl	80004c8 <__aeabi_dmul>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8003aa2:	f7fc fb59 	bl	8000158 <__aeabi_dsub>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
	        qDot4 -= beta * s3;
 8003aae:	4b4c      	ldr	r3, [pc, #304]	; (8003be0 <madgwick+0x1a84>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fc fcb0 	bl	8000418 <__aeabi_f2d>
 8003ab8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003abc:	f7fc fd04 	bl	80004c8 <__aeabi_dmul>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8003ac8:	f7fc fb46 	bl	8000158 <__aeabi_dsub>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150

	        // Integrate rate of change of quaternion to yield quaternion
	        q0 += qDot1 * deltaT;
 8003ad4:	4b43      	ldr	r3, [pc, #268]	; (8003be4 <madgwick+0x1a88>)
 8003ad6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ada:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8003ade:	f7fc fcf3 	bl	80004c8 <__aeabi_dmul>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003aea:	f7fc fb37 	bl	800015c <__adddf3>
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
	        q1 += qDot2 * deltaT;
 8003af6:	4b3b      	ldr	r3, [pc, #236]	; (8003be4 <madgwick+0x1a88>)
 8003af8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003afc:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8003b00:	f7fc fce2 	bl	80004c8 <__aeabi_dmul>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8003b0c:	f7fc fb26 	bl	800015c <__adddf3>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
	        q2 += qDot3 * deltaT;
 8003b18:	4b32      	ldr	r3, [pc, #200]	; (8003be4 <madgwick+0x1a88>)
 8003b1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b1e:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8003b22:	f7fc fcd1 	bl	80004c8 <__aeabi_dmul>
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8003b2e:	f7fc fb15 	bl	800015c <__adddf3>
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
	        q3 += qDot4 * deltaT;
 8003b3a:	4b2a      	ldr	r3, [pc, #168]	; (8003be4 <madgwick+0x1a88>)
 8003b3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b40:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8003b44:	f7fc fcc0 	bl	80004c8 <__aeabi_dmul>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8003b50:	f7fc fb04 	bl	800015c <__adddf3>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170

	        // Normalise quaternion
	        recipNorm = 1.0 / sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8003b5c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003b60:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b64:	f7fc fcb0 	bl	80004c8 <__aeabi_dmul>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4614      	mov	r4, r2
 8003b6e:	461d      	mov	r5, r3
 8003b70:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8003b74:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8003b78:	f7fc fca6 	bl	80004c8 <__aeabi_dmul>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4620      	mov	r0, r4
 8003b82:	4629      	mov	r1, r5
 8003b84:	f7fc faea 	bl	800015c <__adddf3>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4614      	mov	r4, r2
 8003b8e:	461d      	mov	r5, r3
 8003b90:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8003b94:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8003b98:	f7fc fc96 	bl	80004c8 <__aeabi_dmul>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	4629      	mov	r1, r5
 8003ba4:	f7fc fada 	bl	800015c <__adddf3>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4614      	mov	r4, r2
 8003bae:	461d      	mov	r5, r3
 8003bb0:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8003bb4:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8003bb8:	f7fc fc86 	bl	80004c8 <__aeabi_dmul>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	f7fc faca 	bl	800015c <__adddf3>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4610      	mov	r0, r2
 8003bce:	4619      	mov	r1, r3
 8003bd0:	f006 f846 	bl	8009c60 <sqrt>
 8003bd4:	e008      	b.n	8003be8 <madgwick+0x1a8c>
 8003bd6:	bf00      	nop
 8003bd8:	3fe00000 	.word	0x3fe00000
 8003bdc:	3ff00000 	.word	0x3ff00000
 8003be0:	20000004 	.word	0x20000004
 8003be4:	20000108 	.word	0x20000108
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	f04f 0000 	mov.w	r0, #0
 8003bf0:	492e      	ldr	r1, [pc, #184]	; (8003cac <madgwick+0x1b50>)
 8003bf2:	f7fc fd93 	bl	800071c <__aeabi_ddiv>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	        q0 *= recipNorm;
 8003bfe:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8003c02:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003c06:	f7fc fc5f 	bl	80004c8 <__aeabi_dmul>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
	        q1 *= recipNorm;
 8003c12:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8003c16:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8003c1a:	f7fc fc55 	bl	80004c8 <__aeabi_dmul>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
	        q2 *= recipNorm;
 8003c26:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8003c2a:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8003c2e:	f7fc fc4b 	bl	80004c8 <__aeabi_dmul>
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
	        q3 *= recipNorm;
 8003c3a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8003c3e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8003c42:	f7fc fc41 	bl	80004c8 <__aeabi_dmul>
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170

	        q[0] = q0;
 8003c4e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003c52:	f7fc ff31 	bl	8000ab8 <__aeabi_d2f>
 8003c56:	4602      	mov	r2, r0
 8003c58:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003c5c:	601a      	str	r2, [r3, #0]
	        q[1] = q1;
 8003c5e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003c62:	1d1c      	adds	r4, r3, #4
 8003c64:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8003c68:	f7fc ff26 	bl	8000ab8 <__aeabi_d2f>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	6023      	str	r3, [r4, #0]
	        q[2] = q2;
 8003c70:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003c74:	f103 0408 	add.w	r4, r3, #8
 8003c78:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8003c7c:	f7fc ff1c 	bl	8000ab8 <__aeabi_d2f>
 8003c80:	4603      	mov	r3, r0
 8003c82:	6023      	str	r3, [r4, #0]
	        q[3] = q3;
 8003c84:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003c88:	f103 040c 	add.w	r4, r3, #12
 8003c8c:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8003c90:	f7fc ff12 	bl	8000ab8 <__aeabi_d2f>
 8003c94:	4603      	mov	r3, r0
 8003c96:	6023      	str	r3, [r4, #0]
 8003c98:	e002      	b.n	8003ca0 <madgwick+0x1b44>
	        if (a_norm == 0.) return;  // handle NaN
 8003c9a:	bf00      	nop
 8003c9c:	e000      	b.n	8003ca0 <madgwick+0x1b44>
	        if (m_norm == 0.) return;  // handle NaN
 8003c9e:	bf00      	nop

}
 8003ca0:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003caa:	bf00      	nop
 8003cac:	3ff00000 	.word	0x3ff00000

08003cb0 <MPU9250SelfTest>:





void MPU9250SelfTest(I2C_HandleTypeDef *I2Cx, float * destination) {
 8003cb0:	b5b0      	push	{r4, r5, r7, lr}
 8003cb2:	b0a8      	sub	sp, #160	; 0xa0
 8003cb4:	af04      	add	r7, sp, #16
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
	uint8_t writeData;

	uint8_t rawTestData[6] = {0, 0, 0, 0, 0, 0};
 8003cba:	4aa2      	ldr	r2, [pc, #648]	; (8003f44 <MPU9250SelfTest+0x294>)
 8003cbc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003cc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cc4:	6018      	str	r0, [r3, #0]
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	8019      	strh	r1, [r3, #0]
	uint8_t selfTest[6];
	int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8003cca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	605a      	str	r2, [r3, #4]
 8003cd4:	609a      	str	r2, [r3, #8]
 8003cd6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	605a      	str	r2, [r3, #4]
 8003ce0:	609a      	str	r2, [r3, #8]
 8003ce2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	605a      	str	r2, [r3, #4]
 8003cec:	609a      	str	r2, [r3, #8]
 8003cee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	605a      	str	r2, [r3, #4]
 8003cf8:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	writeData = 0x00;
 8003d00:	2300      	movs	r3, #0
 8003d02:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, 100);// Set gyro sample rate to 1 kHz
 8003d06:	2364      	movs	r3, #100	; 0x64
 8003d08:	9302      	str	r3, [sp, #8]
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	9301      	str	r3, [sp, #4]
 8003d0e:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	2301      	movs	r3, #1
 8003d16:	2219      	movs	r2, #25
 8003d18:	21d0      	movs	r1, #208	; 0xd0
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f003 fc8c 	bl	8007638 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 8003d20:	2302      	movs	r3, #2
 8003d22:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, 100);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8003d26:	2364      	movs	r3, #100	; 0x64
 8003d28:	9302      	str	r3, [sp, #8]
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	9301      	str	r3, [sp, #4]
 8003d2e:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	2301      	movs	r3, #1
 8003d36:	221a      	movs	r2, #26
 8003d38:	21d0      	movs	r1, #208	; 0xd0
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f003 fc7c 	bl	8007638 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 8003d40:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, 100);// Set full scale range for the gyro to 250 dps
 8003d4c:	2364      	movs	r3, #100	; 0x64
 8003d4e:	9302      	str	r3, [sp, #8]
 8003d50:	2301      	movs	r3, #1
 8003d52:	9301      	str	r3, [sp, #4]
 8003d54:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	221b      	movs	r2, #27
 8003d5e:	21d0      	movs	r1, #208	; 0xd0
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f003 fc69 	bl	8007638 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 8003d66:	2302      	movs	r3, #2
 8003d68:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, 100);// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 8003d6c:	2364      	movs	r3, #100	; 0x64
 8003d6e:	9302      	str	r3, [sp, #8]
 8003d70:	2301      	movs	r3, #1
 8003d72:	9301      	str	r3, [sp, #4]
 8003d74:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	221d      	movs	r2, #29
 8003d7e:	21d0      	movs	r1, #208	; 0xd0
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f003 fc59 	bl	8007638 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 8003d86:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, 100);// Set full scale range for the accelerometer to 2 g
 8003d92:	2364      	movs	r3, #100	; 0x64
 8003d94:	9302      	str	r3, [sp, #8]
 8003d96:	2301      	movs	r3, #1
 8003d98:	9301      	str	r3, [sp, #4]
 8003d9a:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	2301      	movs	r3, #1
 8003da2:	221c      	movs	r2, #28
 8003da4:	21d0      	movs	r1, #208	; 0xd0
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f003 fc46 	bl	8007638 <HAL_I2C_Mem_Write>

	//get average current values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 8003dac:	2300      	movs	r3, #0
 8003dae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003db2:	e066      	b.n	8003e82 <MPU9250SelfTest+0x1d2>

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, 100);// Read the six raw data registers into data array
 8003db4:	2364      	movs	r3, #100	; 0x64
 8003db6:	9302      	str	r3, [sp, #8]
 8003db8:	2306      	movs	r3, #6
 8003dba:	9301      	str	r3, [sp, #4]
 8003dbc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	223b      	movs	r2, #59	; 0x3b
 8003dc6:	21d0      	movs	r1, #208	; 0xd0
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f003 fd2f 	bl	800782c <HAL_I2C_Mem_Read>
		aAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8003dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dd0:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8003dd4:	0212      	lsls	r2, r2, #8
 8003dd6:	b211      	sxth	r1, r2
 8003dd8:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8003ddc:	b212      	sxth	r2, r2
 8003dde:	430a      	orrs	r2, r1
 8003de0:	b212      	sxth	r2, r2
 8003de2:	4413      	add	r3, r2
 8003de4:	653b      	str	r3, [r7, #80]	; 0x50
		aAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8003de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003de8:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8003dec:	0212      	lsls	r2, r2, #8
 8003dee:	b211      	sxth	r1, r2
 8003df0:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8003df4:	b212      	sxth	r2, r2
 8003df6:	430a      	orrs	r2, r1
 8003df8:	b212      	sxth	r2, r2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	657b      	str	r3, [r7, #84]	; 0x54
		aAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8003dfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e00:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8003e04:	0212      	lsls	r2, r2, #8
 8003e06:	b211      	sxth	r1, r2
 8003e08:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8003e0c:	b212      	sxth	r2, r2
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	b212      	sxth	r2, r2
 8003e12:	4413      	add	r3, r2
 8003e14:	65bb      	str	r3, [r7, #88]	; 0x58

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, 100);// Read the six raw data registers sequentially into data array
 8003e16:	2364      	movs	r3, #100	; 0x64
 8003e18:	9302      	str	r3, [sp, #8]
 8003e1a:	2306      	movs	r3, #6
 8003e1c:	9301      	str	r3, [sp, #4]
 8003e1e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	2301      	movs	r3, #1
 8003e26:	2243      	movs	r2, #67	; 0x43
 8003e28:	21d0      	movs	r1, #208	; 0xd0
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f003 fcfe 	bl	800782c <HAL_I2C_Mem_Read>
		gAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8003e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e32:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8003e36:	0212      	lsls	r2, r2, #8
 8003e38:	b211      	sxth	r1, r2
 8003e3a:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8003e3e:	b212      	sxth	r2, r2
 8003e40:	430a      	orrs	r2, r1
 8003e42:	b212      	sxth	r2, r2
 8003e44:	4413      	add	r3, r2
 8003e46:	65fb      	str	r3, [r7, #92]	; 0x5c
		gAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8003e48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e4a:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8003e4e:	0212      	lsls	r2, r2, #8
 8003e50:	b211      	sxth	r1, r2
 8003e52:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8003e56:	b212      	sxth	r2, r2
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	b212      	sxth	r2, r2
 8003e5c:	4413      	add	r3, r2
 8003e5e:	663b      	str	r3, [r7, #96]	; 0x60
		gAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8003e60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e62:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8003e66:	0212      	lsls	r2, r2, #8
 8003e68:	b211      	sxth	r1, r2
 8003e6a:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8003e6e:	b212      	sxth	r2, r2
 8003e70:	430a      	orrs	r2, r1
 8003e72:	b212      	sxth	r2, r2
 8003e74:	4413      	add	r3, r2
 8003e76:	667b      	str	r3, [r7, #100]	; 0x64
	for( int ii = 0; ii < 200; ii++) {
 8003e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e86:	2bc7      	cmp	r3, #199	; 0xc7
 8003e88:	dd94      	ble.n	8003db4 <MPU9250SelfTest+0x104>
	}

	//Get average of 200 values and store as average current readings
	for (int ii =0; ii < 3; ii++) {
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e90:	e02c      	b.n	8003eec <MPU9250SelfTest+0x23c>
		aAvg[ii] /= 200;
 8003e92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	3390      	adds	r3, #144	; 0x90
 8003e9a:	443b      	add	r3, r7
 8003e9c:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8003ea0:	4a29      	ldr	r2, [pc, #164]	; (8003f48 <MPU9250SelfTest+0x298>)
 8003ea2:	fb82 1203 	smull	r1, r2, r2, r3
 8003ea6:	1192      	asrs	r2, r2, #6
 8003ea8:	17db      	asrs	r3, r3, #31
 8003eaa:	1ad2      	subs	r2, r2, r3
 8003eac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	3390      	adds	r3, #144	; 0x90
 8003eb4:	443b      	add	r3, r7
 8003eb6:	f843 2c40 	str.w	r2, [r3, #-64]
		gAvg[ii] /= 200;
 8003eba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	3390      	adds	r3, #144	; 0x90
 8003ec2:	443b      	add	r3, r7
 8003ec4:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8003ec8:	4a1f      	ldr	r2, [pc, #124]	; (8003f48 <MPU9250SelfTest+0x298>)
 8003eca:	fb82 1203 	smull	r1, r2, r2, r3
 8003ece:	1192      	asrs	r2, r2, #6
 8003ed0:	17db      	asrs	r3, r3, #31
 8003ed2:	1ad2      	subs	r2, r2, r3
 8003ed4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	3390      	adds	r3, #144	; 0x90
 8003edc:	443b      	add	r3, r7
 8003ede:	f843 2c34 	str.w	r2, [r3, #-52]
	for (int ii =0; ii < 3; ii++) {
 8003ee2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003eec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	ddce      	ble.n	8003e92 <MPU9250SelfTest+0x1e2>
	}

	//Configure the accelerometer for self-test
	writeData = 0xE0;
 8003ef4:	23e0      	movs	r3, #224	; 0xe0
 8003ef6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, 100);// Enable self test on all three axes and set accelerometer range to +/- 2 g
 8003efa:	2364      	movs	r3, #100	; 0x64
 8003efc:	9302      	str	r3, [sp, #8]
 8003efe:	2301      	movs	r3, #1
 8003f00:	9301      	str	r3, [sp, #4]
 8003f02:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	2301      	movs	r3, #1
 8003f0a:	221c      	movs	r2, #28
 8003f0c:	21d0      	movs	r1, #208	; 0xd0
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f003 fb92 	bl	8007638 <HAL_I2C_Mem_Write>
	writeData = 0xE0;
 8003f14:	23e0      	movs	r3, #224	; 0xe0
 8003f16:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, 100);// Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8003f1a:	2364      	movs	r3, #100	; 0x64
 8003f1c:	9302      	str	r3, [sp, #8]
 8003f1e:	2301      	movs	r3, #1
 8003f20:	9301      	str	r3, [sp, #4]
 8003f22:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	2301      	movs	r3, #1
 8003f2a:	221b      	movs	r2, #27
 8003f2c:	21d0      	movs	r1, #208	; 0xd0
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f003 fb82 	bl	8007638 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 8003f34:	2019      	movs	r0, #25
 8003f36:	f002 fc03 	bl	8006740 <HAL_Delay>

	//get average self-test values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f40:	e06b      	b.n	800401a <MPU9250SelfTest+0x36a>
 8003f42:	bf00      	nop
 8003f44:	0800b078 	.word	0x0800b078
 8003f48:	51eb851f 	.word	0x51eb851f

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, 100);// Read the six raw data registers into data array
 8003f4c:	2364      	movs	r3, #100	; 0x64
 8003f4e:	9302      	str	r3, [sp, #8]
 8003f50:	2306      	movs	r3, #6
 8003f52:	9301      	str	r3, [sp, #4]
 8003f54:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	223b      	movs	r2, #59	; 0x3b
 8003f5e:	21d0      	movs	r1, #208	; 0xd0
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f003 fc63 	bl	800782c <HAL_I2C_Mem_Read>
		aSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8003f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f68:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8003f6c:	0212      	lsls	r2, r2, #8
 8003f6e:	b211      	sxth	r1, r2
 8003f70:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8003f74:	b212      	sxth	r2, r2
 8003f76:	430a      	orrs	r2, r1
 8003f78:	b212      	sxth	r2, r2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	647b      	str	r3, [r7, #68]	; 0x44
		aSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8003f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f80:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8003f84:	0212      	lsls	r2, r2, #8
 8003f86:	b211      	sxth	r1, r2
 8003f88:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8003f8c:	b212      	sxth	r2, r2
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	b212      	sxth	r2, r2
 8003f92:	4413      	add	r3, r2
 8003f94:	64bb      	str	r3, [r7, #72]	; 0x48
		aSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8003f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f98:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8003f9c:	0212      	lsls	r2, r2, #8
 8003f9e:	b211      	sxth	r1, r2
 8003fa0:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8003fa4:	b212      	sxth	r2, r2
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	b212      	sxth	r2, r2
 8003faa:	4413      	add	r3, r2
 8003fac:	64fb      	str	r3, [r7, #76]	; 0x4c

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, 100);// Read the six raw data registers sequentially into data array
 8003fae:	2364      	movs	r3, #100	; 0x64
 8003fb0:	9302      	str	r3, [sp, #8]
 8003fb2:	2306      	movs	r3, #6
 8003fb4:	9301      	str	r3, [sp, #4]
 8003fb6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	2243      	movs	r2, #67	; 0x43
 8003fc0:	21d0      	movs	r1, #208	; 0xd0
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f003 fc32 	bl	800782c <HAL_I2C_Mem_Read>
		gSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8003fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fca:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8003fce:	0212      	lsls	r2, r2, #8
 8003fd0:	b211      	sxth	r1, r2
 8003fd2:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8003fd6:	b212      	sxth	r2, r2
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	b212      	sxth	r2, r2
 8003fdc:	4413      	add	r3, r2
 8003fde:	63bb      	str	r3, [r7, #56]	; 0x38
		gSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8003fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe2:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8003fe6:	0212      	lsls	r2, r2, #8
 8003fe8:	b211      	sxth	r1, r2
 8003fea:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8003fee:	b212      	sxth	r2, r2
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	b212      	sxth	r2, r2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
		gSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8003ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ffa:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8003ffe:	0212      	lsls	r2, r2, #8
 8004000:	b211      	sxth	r1, r2
 8004002:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8004006:	b212      	sxth	r2, r2
 8004008:	430a      	orrs	r2, r1
 800400a:	b212      	sxth	r2, r2
 800400c:	4413      	add	r3, r2
 800400e:	643b      	str	r3, [r7, #64]	; 0x40
	for( int ii = 0; ii < 200; ii++) {
 8004010:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004014:	3301      	adds	r3, #1
 8004016:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800401a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800401e:	2bc7      	cmp	r3, #199	; 0xc7
 8004020:	dd94      	ble.n	8003f4c <MPU9250SelfTest+0x29c>
	}

	//Get average of 200 values and store as average self-test readings
	for (int ii =0; ii < 3; ii++) {
 8004022:	2300      	movs	r3, #0
 8004024:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004028:	e02c      	b.n	8004084 <MPU9250SelfTest+0x3d4>
		aSTAvg[ii] /= 200;
 800402a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	3390      	adds	r3, #144	; 0x90
 8004032:	443b      	add	r3, r7
 8004034:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8004038:	4ad7      	ldr	r2, [pc, #860]	; (8004398 <MPU9250SelfTest+0x6e8>)
 800403a:	fb82 1203 	smull	r1, r2, r2, r3
 800403e:	1192      	asrs	r2, r2, #6
 8004040:	17db      	asrs	r3, r3, #31
 8004042:	1ad2      	subs	r2, r2, r3
 8004044:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	3390      	adds	r3, #144	; 0x90
 800404c:	443b      	add	r3, r7
 800404e:	f843 2c4c 	str.w	r2, [r3, #-76]
		gSTAvg[ii] /= 200;
 8004052:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	3390      	adds	r3, #144	; 0x90
 800405a:	443b      	add	r3, r7
 800405c:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8004060:	4acd      	ldr	r2, [pc, #820]	; (8004398 <MPU9250SelfTest+0x6e8>)
 8004062:	fb82 1203 	smull	r1, r2, r2, r3
 8004066:	1192      	asrs	r2, r2, #6
 8004068:	17db      	asrs	r3, r3, #31
 800406a:	1ad2      	subs	r2, r2, r3
 800406c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	3390      	adds	r3, #144	; 0x90
 8004074:	443b      	add	r3, r7
 8004076:	f843 2c58 	str.w	r2, [r3, #-88]
	for (int ii =0; ii < 3; ii++) {
 800407a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800407e:	3301      	adds	r3, #1
 8004080:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004084:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004088:	2b02      	cmp	r3, #2
 800408a:	ddce      	ble.n	800402a <MPU9250SelfTest+0x37a>
	}

	//Configure the gyro and accelerometer for normal operation
	writeData = 0x00;
 800408c:	2300      	movs	r3, #0
 800408e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, 100);
 8004092:	2364      	movs	r3, #100	; 0x64
 8004094:	9302      	str	r3, [sp, #8]
 8004096:	2301      	movs	r3, #1
 8004098:	9301      	str	r3, [sp, #4]
 800409a:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	2301      	movs	r3, #1
 80040a2:	221c      	movs	r2, #28
 80040a4:	21d0      	movs	r1, #208	; 0xd0
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f003 fac6 	bl	8007638 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80040ac:	2300      	movs	r3, #0
 80040ae:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, 100);
 80040b2:	2364      	movs	r3, #100	; 0x64
 80040b4:	9302      	str	r3, [sp, #8]
 80040b6:	2301      	movs	r3, #1
 80040b8:	9301      	str	r3, [sp, #4]
 80040ba:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	2301      	movs	r3, #1
 80040c2:	221b      	movs	r2, #27
 80040c4:	21d0      	movs	r1, #208	; 0xd0
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f003 fab6 	bl	8007638 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 80040cc:	2019      	movs	r0, #25
 80040ce:	f002 fb37 	bl	8006740 <HAL_Delay>

	//Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_ACCEL, 1, &selfTest[0], 1, 100);// X-axis accel self-test results
 80040d2:	2364      	movs	r3, #100	; 0x64
 80040d4:	9302      	str	r3, [sp, #8]
 80040d6:	2301      	movs	r3, #1
 80040d8:	9301      	str	r3, [sp, #4]
 80040da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	2301      	movs	r3, #1
 80040e2:	220d      	movs	r2, #13
 80040e4:	21d0      	movs	r1, #208	; 0xd0
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f003 fba0 	bl	800782c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_ACCEL, 1, &selfTest[1], 1, 100);// Y-axis accel self-test results
 80040ec:	2364      	movs	r3, #100	; 0x64
 80040ee:	9302      	str	r3, [sp, #8]
 80040f0:	2301      	movs	r3, #1
 80040f2:	9301      	str	r3, [sp, #4]
 80040f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80040f8:	3301      	adds	r3, #1
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	2301      	movs	r3, #1
 80040fe:	220e      	movs	r2, #14
 8004100:	21d0      	movs	r1, #208	; 0xd0
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f003 fb92 	bl	800782c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_ACCEL, 1, &selfTest[2], 1, 100);// Z-axis accel self-test results
 8004108:	2364      	movs	r3, #100	; 0x64
 800410a:	9302      	str	r3, [sp, #8]
 800410c:	2301      	movs	r3, #1
 800410e:	9301      	str	r3, [sp, #4]
 8004110:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004114:	3302      	adds	r3, #2
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	2301      	movs	r3, #1
 800411a:	220f      	movs	r2, #15
 800411c:	21d0      	movs	r1, #208	; 0xd0
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f003 fb84 	bl	800782c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_GYRO, 1, &selfTest[3], 1, 100);// X-axis gyro self-test results
 8004124:	2364      	movs	r3, #100	; 0x64
 8004126:	9302      	str	r3, [sp, #8]
 8004128:	2301      	movs	r3, #1
 800412a:	9301      	str	r3, [sp, #4]
 800412c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004130:	3303      	adds	r3, #3
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	2301      	movs	r3, #1
 8004136:	2200      	movs	r2, #0
 8004138:	21d0      	movs	r1, #208	; 0xd0
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f003 fb76 	bl	800782c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_GYRO, 1, &selfTest[4], 1, 100);// Y-axis gyro self-test results
 8004140:	2364      	movs	r3, #100	; 0x64
 8004142:	9302      	str	r3, [sp, #8]
 8004144:	2301      	movs	r3, #1
 8004146:	9301      	str	r3, [sp, #4]
 8004148:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800414c:	3304      	adds	r3, #4
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	2301      	movs	r3, #1
 8004152:	2201      	movs	r2, #1
 8004154:	21d0      	movs	r1, #208	; 0xd0
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f003 fb68 	bl	800782c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_GYRO, 1, &selfTest[5], 1, 100);// Z-axis gyro self-test results
 800415c:	2364      	movs	r3, #100	; 0x64
 800415e:	9302      	str	r3, [sp, #8]
 8004160:	2301      	movs	r3, #1
 8004162:	9301      	str	r3, [sp, #4]
 8004164:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004168:	3305      	adds	r3, #5
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	2301      	movs	r3, #1
 800416e:	2202      	movs	r2, #2
 8004170:	21d0      	movs	r1, #208	; 0xd0
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f003 fb5a 	bl	800782c <HAL_I2C_Mem_Read>

	//Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 8004178:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800417c:	f640 223c 	movw	r2, #2620	; 0xa3c
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	4618      	mov	r0, r3
 8004186:	f7fc fda1 	bl	8000ccc <__aeabi_i2f>
 800418a:	4603      	mov	r3, r0
 800418c:	4618      	mov	r0, r3
 800418e:	f7fc f943 	bl	8000418 <__aeabi_f2d>
 8004192:	4604      	mov	r4, r0
 8004194:	460d      	mov	r5, r1
 8004196:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800419a:	4618      	mov	r0, r3
 800419c:	f7fc fd92 	bl	8000cc4 <__aeabi_ui2f>
 80041a0:	4603      	mov	r3, r0
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fc f938 	bl	8000418 <__aeabi_f2d>
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	4b7b      	ldr	r3, [pc, #492]	; (800439c <MPU9250SelfTest+0x6ec>)
 80041ae:	f7fb ffd3 	bl	8000158 <__aeabi_dsub>
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	a176      	add	r1, pc, #472	; (adr r1, 8004390 <MPU9250SelfTest+0x6e0>)
 80041b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041bc:	f005 fce8 	bl	8009b90 <pow>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4620      	mov	r0, r4
 80041c6:	4629      	mov	r1, r5
 80041c8:	f7fc f97e 	bl	80004c8 <__aeabi_dmul>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4610      	mov	r0, r2
 80041d2:	4619      	mov	r1, r3
 80041d4:	f7fc fc70 	bl	8000ab8 <__aeabi_d2f>
 80041d8:	4603      	mov	r3, r0
 80041da:	623b      	str	r3, [r7, #32]
	factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 80041dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80041e0:	f640 223c 	movw	r2, #2620	; 0xa3c
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fc fd6f 	bl	8000ccc <__aeabi_i2f>
 80041ee:	4603      	mov	r3, r0
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fc f911 	bl	8000418 <__aeabi_f2d>
 80041f6:	4604      	mov	r4, r0
 80041f8:	460d      	mov	r5, r1
 80041fa:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fc fd60 	bl	8000cc4 <__aeabi_ui2f>
 8004204:	4603      	mov	r3, r0
 8004206:	4618      	mov	r0, r3
 8004208:	f7fc f906 	bl	8000418 <__aeabi_f2d>
 800420c:	f04f 0200 	mov.w	r2, #0
 8004210:	4b62      	ldr	r3, [pc, #392]	; (800439c <MPU9250SelfTest+0x6ec>)
 8004212:	f7fb ffa1 	bl	8000158 <__aeabi_dsub>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	a15d      	add	r1, pc, #372	; (adr r1, 8004390 <MPU9250SelfTest+0x6e0>)
 800421c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004220:	f005 fcb6 	bl	8009b90 <pow>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4620      	mov	r0, r4
 800422a:	4629      	mov	r1, r5
 800422c:	f7fc f94c 	bl	80004c8 <__aeabi_dmul>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4610      	mov	r0, r2
 8004236:	4619      	mov	r1, r3
 8004238:	f7fc fc3e 	bl	8000ab8 <__aeabi_d2f>
 800423c:	4603      	mov	r3, r0
 800423e:	627b      	str	r3, [r7, #36]	; 0x24
	factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 8004240:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004244:	f640 223c 	movw	r2, #2620	; 0xa3c
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	4618      	mov	r0, r3
 800424e:	f7fc fd3d 	bl	8000ccc <__aeabi_i2f>
 8004252:	4603      	mov	r3, r0
 8004254:	4618      	mov	r0, r3
 8004256:	f7fc f8df 	bl	8000418 <__aeabi_f2d>
 800425a:	4604      	mov	r4, r0
 800425c:	460d      	mov	r5, r1
 800425e:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004262:	4618      	mov	r0, r3
 8004264:	f7fc fd2e 	bl	8000cc4 <__aeabi_ui2f>
 8004268:	4603      	mov	r3, r0
 800426a:	4618      	mov	r0, r3
 800426c:	f7fc f8d4 	bl	8000418 <__aeabi_f2d>
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	4b49      	ldr	r3, [pc, #292]	; (800439c <MPU9250SelfTest+0x6ec>)
 8004276:	f7fb ff6f 	bl	8000158 <__aeabi_dsub>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	a144      	add	r1, pc, #272	; (adr r1, 8004390 <MPU9250SelfTest+0x6e0>)
 8004280:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004284:	f005 fc84 	bl	8009b90 <pow>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4620      	mov	r0, r4
 800428e:	4629      	mov	r1, r5
 8004290:	f7fc f91a 	bl	80004c8 <__aeabi_dmul>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4610      	mov	r0, r2
 800429a:	4619      	mov	r1, r3
 800429c:	f7fc fc0c 	bl	8000ab8 <__aeabi_d2f>
 80042a0:	4603      	mov	r3, r0
 80042a2:	62bb      	str	r3, [r7, #40]	; 0x28
	factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 80042a4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80042a8:	f640 223c 	movw	r2, #2620	; 0xa3c
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fc fd0b 	bl	8000ccc <__aeabi_i2f>
 80042b6:	4603      	mov	r3, r0
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fc f8ad 	bl	8000418 <__aeabi_f2d>
 80042be:	4604      	mov	r4, r0
 80042c0:	460d      	mov	r5, r1
 80042c2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fc fcfc 	bl	8000cc4 <__aeabi_ui2f>
 80042cc:	4603      	mov	r3, r0
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fc f8a2 	bl	8000418 <__aeabi_f2d>
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	4b30      	ldr	r3, [pc, #192]	; (800439c <MPU9250SelfTest+0x6ec>)
 80042da:	f7fb ff3d 	bl	8000158 <__aeabi_dsub>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	a12b      	add	r1, pc, #172	; (adr r1, 8004390 <MPU9250SelfTest+0x6e0>)
 80042e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042e8:	f005 fc52 	bl	8009b90 <pow>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4620      	mov	r0, r4
 80042f2:	4629      	mov	r1, r5
 80042f4:	f7fc f8e8 	bl	80004c8 <__aeabi_dmul>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4610      	mov	r0, r2
 80042fe:	4619      	mov	r1, r3
 8004300:	f7fc fbda 	bl	8000ab8 <__aeabi_d2f>
 8004304:	4603      	mov	r3, r0
 8004306:	62fb      	str	r3, [r7, #44]	; 0x2c
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 8004308:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800430c:	f640 223c 	movw	r2, #2620	; 0xa3c
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	4618      	mov	r0, r3
 8004316:	f7fc fcd9 	bl	8000ccc <__aeabi_i2f>
 800431a:	4603      	mov	r3, r0
 800431c:	4618      	mov	r0, r3
 800431e:	f7fc f87b 	bl	8000418 <__aeabi_f2d>
 8004322:	4604      	mov	r4, r0
 8004324:	460d      	mov	r5, r1
 8004326:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800432a:	4618      	mov	r0, r3
 800432c:	f7fc fcca 	bl	8000cc4 <__aeabi_ui2f>
 8004330:	4603      	mov	r3, r0
 8004332:	4618      	mov	r0, r3
 8004334:	f7fc f870 	bl	8000418 <__aeabi_f2d>
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	4b17      	ldr	r3, [pc, #92]	; (800439c <MPU9250SelfTest+0x6ec>)
 800433e:	f7fb ff0b 	bl	8000158 <__aeabi_dsub>
 8004342:	4602      	mov	r2, r0
 8004344:	460b      	mov	r3, r1
 8004346:	a112      	add	r1, pc, #72	; (adr r1, 8004390 <MPU9250SelfTest+0x6e0>)
 8004348:	e9d1 0100 	ldrd	r0, r1, [r1]
 800434c:	f005 fc20 	bl	8009b90 <pow>
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	4620      	mov	r0, r4
 8004356:	4629      	mov	r1, r5
 8004358:	f7fc f8b6 	bl	80004c8 <__aeabi_dmul>
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	4610      	mov	r0, r2
 8004362:	4619      	mov	r1, r3
 8004364:	f7fc fba8 	bl	8000ab8 <__aeabi_d2f>
 8004368:	4603      	mov	r3, r0
 800436a:	633b      	str	r3, [r7, #48]	; 0x30
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 800436c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004370:	f640 223c 	movw	r2, #2620	; 0xa3c
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	4618      	mov	r0, r3
 800437a:	f7fc fca7 	bl	8000ccc <__aeabi_i2f>
 800437e:	4603      	mov	r3, r0
 8004380:	4618      	mov	r0, r3
 8004382:	f7fc f849 	bl	8000418 <__aeabi_f2d>
 8004386:	4604      	mov	r4, r0
 8004388:	e00a      	b.n	80043a0 <MPU9250SelfTest+0x6f0>
 800438a:	bf00      	nop
 800438c:	f3af 8000 	nop.w
 8004390:	c28f5c29 	.word	0xc28f5c29
 8004394:	3ff028f5 	.word	0x3ff028f5
 8004398:	51eb851f 	.word	0x51eb851f
 800439c:	3ff00000 	.word	0x3ff00000
 80043a0:	460d      	mov	r5, r1
 80043a2:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fc fc8c 	bl	8000cc4 <__aeabi_ui2f>
 80043ac:	4603      	mov	r3, r0
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fc f832 	bl	8000418 <__aeabi_f2d>
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	4b9f      	ldr	r3, [pc, #636]	; (8004638 <MPU9250SelfTest+0x988>)
 80043ba:	f7fb fecd 	bl	8000158 <__aeabi_dsub>
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	a19b      	add	r1, pc, #620	; (adr r1, 8004630 <MPU9250SelfTest+0x980>)
 80043c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043c8:	f005 fbe2 	bl	8009b90 <pow>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4620      	mov	r0, r4
 80043d2:	4629      	mov	r1, r5
 80043d4:	f7fc f878 	bl	80004c8 <__aeabi_dmul>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4610      	mov	r0, r2
 80043de:	4619      	mov	r1, r3
 80043e0:	f7fc fb6a 	bl	8000ab8 <__aeabi_d2f>
 80043e4:	4603      	mov	r3, r0
 80043e6:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t testResults[6];

	//Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	//To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 80043e8:	2300      	movs	r3, #0
 80043ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80043ec:	e088      	b.n	8004500 <MPU9250SelfTest+0x850>
		testResults[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 80043ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	3390      	adds	r3, #144	; 0x90
 80043f4:	443b      	add	r3, r7
 80043f6:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 80043fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	3390      	adds	r3, #144	; 0x90
 8004400:	443b      	add	r3, r7
 8004402:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	4618      	mov	r0, r3
 800440a:	f7fc fc5f 	bl	8000ccc <__aeabi_i2f>
 800440e:	4603      	mov	r3, r0
 8004410:	4618      	mov	r0, r3
 8004412:	f7fc f801 	bl	8000418 <__aeabi_f2d>
 8004416:	f04f 0200 	mov.w	r2, #0
 800441a:	4b88      	ldr	r3, [pc, #544]	; (800463c <MPU9250SelfTest+0x98c>)
 800441c:	f7fc f854 	bl	80004c8 <__aeabi_dmul>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	4614      	mov	r4, r2
 8004426:	461d      	mov	r5, r3
 8004428:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	3390      	adds	r3, #144	; 0x90
 800442e:	443b      	add	r3, r7
 8004430:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8004434:	4618      	mov	r0, r3
 8004436:	f7fb ffef 	bl	8000418 <__aeabi_f2d>
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	4620      	mov	r0, r4
 8004440:	4629      	mov	r1, r5
 8004442:	f7fc f96b 	bl	800071c <__aeabi_ddiv>
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	4610      	mov	r0, r2
 800444c:	4619      	mov	r1, r3
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	4b7a      	ldr	r3, [pc, #488]	; (800463c <MPU9250SelfTest+0x98c>)
 8004454:	f7fb fe80 	bl	8000158 <__aeabi_dsub>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	4610      	mov	r0, r2
 800445e:	4619      	mov	r1, r3
 8004460:	f7fc fb0a 	bl	8000a78 <__aeabi_d2uiz>
 8004464:	4602      	mov	r2, r0
 8004466:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	3390      	adds	r3, #144	; 0x90
 800446c:	443b      	add	r3, r7
 800446e:	f843 2c88 	str.w	r2, [r3, #-136]
		testResults[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8004472:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	3390      	adds	r3, #144	; 0x90
 8004478:	443b      	add	r3, r7
 800447a:	f853 2c58 	ldr.w	r2, [r3, #-88]
 800447e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	3390      	adds	r3, #144	; 0x90
 8004484:	443b      	add	r3, r7
 8004486:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	4618      	mov	r0, r3
 800448e:	f7fc fc1d 	bl	8000ccc <__aeabi_i2f>
 8004492:	4603      	mov	r3, r0
 8004494:	4618      	mov	r0, r3
 8004496:	f7fb ffbf 	bl	8000418 <__aeabi_f2d>
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	4b67      	ldr	r3, [pc, #412]	; (800463c <MPU9250SelfTest+0x98c>)
 80044a0:	f7fc f812 	bl	80004c8 <__aeabi_dmul>
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4614      	mov	r4, r2
 80044aa:	461d      	mov	r5, r3
 80044ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044ae:	3303      	adds	r3, #3
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	3390      	adds	r3, #144	; 0x90
 80044b4:	443b      	add	r3, r7
 80044b6:	f853 3c70 	ldr.w	r3, [r3, #-112]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fb ffac 	bl	8000418 <__aeabi_f2d>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4620      	mov	r0, r4
 80044c6:	4629      	mov	r1, r5
 80044c8:	f7fc f928 	bl	800071c <__aeabi_ddiv>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4610      	mov	r0, r2
 80044d2:	4619      	mov	r1, r3
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	4b58      	ldr	r3, [pc, #352]	; (800463c <MPU9250SelfTest+0x98c>)
 80044da:	f7fb fe3d 	bl	8000158 <__aeabi_dsub>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4610      	mov	r0, r2
 80044e4:	4619      	mov	r1, r3
 80044e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044e8:	1cdc      	adds	r4, r3, #3
 80044ea:	f7fc fac5 	bl	8000a78 <__aeabi_d2uiz>
 80044ee:	4602      	mov	r2, r0
 80044f0:	00a3      	lsls	r3, r4, #2
 80044f2:	3390      	adds	r3, #144	; 0x90
 80044f4:	443b      	add	r3, r7
 80044f6:	f843 2c88 	str.w	r2, [r3, #-136]
	for (int i = 0; i < 3; i++) {
 80044fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044fc:	3301      	adds	r3, #1
 80044fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004500:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004502:	2b02      	cmp	r3, #2
 8004504:	f77f af73 	ble.w	80043ee <MPU9250SelfTest+0x73e>
	}



   for (int i = 0; i < 3; i++) {
 8004508:	2300      	movs	r3, #0
 800450a:	67bb      	str	r3, [r7, #120]	; 0x78
 800450c:	e086      	b.n	800461c <MPU9250SelfTest+0x96c>
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 800450e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	3390      	adds	r3, #144	; 0x90
 8004514:	443b      	add	r3, r7
 8004516:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 800451a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	3390      	adds	r3, #144	; 0x90
 8004520:	443b      	add	r3, r7
 8004522:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	4618      	mov	r0, r3
 800452a:	f7fc fbcf 	bl	8000ccc <__aeabi_i2f>
 800452e:	4603      	mov	r3, r0
 8004530:	4618      	mov	r0, r3
 8004532:	f7fb ff71 	bl	8000418 <__aeabi_f2d>
 8004536:	f04f 0200 	mov.w	r2, #0
 800453a:	4b40      	ldr	r3, [pc, #256]	; (800463c <MPU9250SelfTest+0x98c>)
 800453c:	f7fb ffc4 	bl	80004c8 <__aeabi_dmul>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4614      	mov	r4, r2
 8004546:	461d      	mov	r5, r3
 8004548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	3390      	adds	r3, #144	; 0x90
 800454e:	443b      	add	r3, r7
 8004550:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8004554:	4618      	mov	r0, r3
 8004556:	f7fb ff5f 	bl	8000418 <__aeabi_f2d>
 800455a:	4602      	mov	r2, r0
 800455c:	460b      	mov	r3, r1
 800455e:	4620      	mov	r0, r4
 8004560:	4629      	mov	r1, r5
 8004562:	f7fc f8db 	bl	800071c <__aeabi_ddiv>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4610      	mov	r0, r2
 800456c:	4619      	mov	r1, r3
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	4b32      	ldr	r3, [pc, #200]	; (800463c <MPU9250SelfTest+0x98c>)
 8004574:	f7fb fdf0 	bl	8000158 <__aeabi_dsub>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	4610      	mov	r0, r2
 800457e:	4619      	mov	r1, r3
 8004580:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	18d4      	adds	r4, r2, r3
 8004588:	f7fc fa96 	bl	8000ab8 <__aeabi_d2f>
 800458c:	4603      	mov	r3, r0
 800458e:	6023      	str	r3, [r4, #0]
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8004590:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	3390      	adds	r3, #144	; 0x90
 8004596:	443b      	add	r3, r7
 8004598:	f853 2c58 	ldr.w	r2, [r3, #-88]
 800459c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	3390      	adds	r3, #144	; 0x90
 80045a2:	443b      	add	r3, r7
 80045a4:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fc fb8e 	bl	8000ccc <__aeabi_i2f>
 80045b0:	4603      	mov	r3, r0
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fb ff30 	bl	8000418 <__aeabi_f2d>
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	4b1f      	ldr	r3, [pc, #124]	; (800463c <MPU9250SelfTest+0x98c>)
 80045be:	f7fb ff83 	bl	80004c8 <__aeabi_dmul>
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	4614      	mov	r4, r2
 80045c8:	461d      	mov	r5, r3
 80045ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045cc:	3303      	adds	r3, #3
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	3390      	adds	r3, #144	; 0x90
 80045d2:	443b      	add	r3, r7
 80045d4:	f853 3c70 	ldr.w	r3, [r3, #-112]
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fb ff1d 	bl	8000418 <__aeabi_f2d>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	4620      	mov	r0, r4
 80045e4:	4629      	mov	r1, r5
 80045e6:	f7fc f899 	bl	800071c <__aeabi_ddiv>
 80045ea:	4602      	mov	r2, r0
 80045ec:	460b      	mov	r3, r1
 80045ee:	4610      	mov	r0, r2
 80045f0:	4619      	mov	r1, r3
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	4b11      	ldr	r3, [pc, #68]	; (800463c <MPU9250SelfTest+0x98c>)
 80045f8:	f7fb fdae 	bl	8000158 <__aeabi_dsub>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4610      	mov	r0, r2
 8004602:	4619      	mov	r1, r3
 8004604:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004606:	3303      	adds	r3, #3
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	18d4      	adds	r4, r2, r3
 800460e:	f7fc fa53 	bl	8000ab8 <__aeabi_d2f>
 8004612:	4603      	mov	r3, r0
 8004614:	6023      	str	r3, [r4, #0]
   for (int i = 0; i < 3; i++) {
 8004616:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004618:	3301      	adds	r3, #1
 800461a:	67bb      	str	r3, [r7, #120]	; 0x78
 800461c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800461e:	2b02      	cmp	r3, #2
 8004620:	f77f af75 	ble.w	800450e <MPU9250SelfTest+0x85e>
   }
}
 8004624:	bf00      	nop
 8004626:	bf00      	nop
 8004628:	3790      	adds	r7, #144	; 0x90
 800462a:	46bd      	mov	sp, r7
 800462c:	bdb0      	pop	{r4, r5, r7, pc}
 800462e:	bf00      	nop
 8004630:	c28f5c29 	.word	0xc28f5c29
 8004634:	3ff028f5 	.word	0x3ff028f5
 8004638:	3ff00000 	.word	0x3ff00000
 800463c:	40590000 	.word	0x40590000

08004640 <calibrateMPU9250>:




void calibrateMPU9250(I2C_HandleTypeDef *I2Cx, float * dest1, float * dest2){
 8004640:	b5b0      	push	{r4, r5, r7, lr}
 8004642:	b09e      	sub	sp, #120	; 0x78
 8004644:	af04      	add	r7, sp, #16
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
  //pre def. vars
  uint8_t writeData;

	uint8_t calibData[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 800464c:	2300      	movs	r3, #0
 800464e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004650:	2300      	movs	r3, #0
 8004652:	643b      	str	r3, [r7, #64]	; 0x40
 8004654:	2300      	movs	r3, #0
 8004656:	647b      	str	r3, [r7, #68]	; 0x44
 8004658:	2300      	movs	r3, #0
 800465a:	633b      	str	r3, [r7, #48]	; 0x30
 800465c:	2300      	movs	r3, #0
 800465e:	637b      	str	r3, [r7, #52]	; 0x34
 8004660:	2300      	movs	r3, #0
 8004662:	63bb      	str	r3, [r7, #56]	; 0x38

	// reset device
	writeData = 0x80;
 8004664:	2380      	movs	r3, #128	; 0x80
 8004666:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, 100);// Write a one to bit 7 reset bit; toggle reset device
 800466a:	2364      	movs	r3, #100	; 0x64
 800466c:	9302      	str	r3, [sp, #8]
 800466e:	2301      	movs	r3, #1
 8004670:	9301      	str	r3, [sp, #4]
 8004672:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	2301      	movs	r3, #1
 800467a:	226b      	movs	r2, #107	; 0x6b
 800467c:	21d0      	movs	r1, #208	; 0xd0
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f002 ffda 	bl	8007638 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004684:	2064      	movs	r0, #100	; 0x64
 8004686:	f002 f85b 	bl	8006740 <HAL_Delay>

	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeData = 0x01;
 800468a:	2301      	movs	r3, #1
 800468c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, 100);
 8004690:	2364      	movs	r3, #100	; 0x64
 8004692:	9302      	str	r3, [sp, #8]
 8004694:	2301      	movs	r3, #1
 8004696:	9301      	str	r3, [sp, #4]
 8004698:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	2301      	movs	r3, #1
 80046a0:	226b      	movs	r2, #107	; 0x6b
 80046a2:	21d0      	movs	r1, #208	; 0xd0
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f002 ffc7 	bl	8007638 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80046aa:	2300      	movs	r3, #0
 80046ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_2, 1, &writeData, 1, 100);
 80046b0:	2364      	movs	r3, #100	; 0x64
 80046b2:	9302      	str	r3, [sp, #8]
 80046b4:	2301      	movs	r3, #1
 80046b6:	9301      	str	r3, [sp, #4]
 80046b8:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	2301      	movs	r3, #1
 80046c0:	226c      	movs	r2, #108	; 0x6c
 80046c2:	21d0      	movs	r1, #208	; 0xd0
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f002 ffb7 	bl	8007638 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 80046ca:	20c8      	movs	r0, #200	; 0xc8
 80046cc:	f002 f838 	bl	8006740 <HAL_Delay>

	// Configure device for bias calculation
	writeData = 0x00;
 80046d0:	2300      	movs	r3, #0
 80046d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_ENABLE, 1, &writeData, 1, 100);// Disable all interrupts
 80046d6:	2364      	movs	r3, #100	; 0x64
 80046d8:	9302      	str	r3, [sp, #8]
 80046da:	2301      	movs	r3, #1
 80046dc:	9301      	str	r3, [sp, #4]
 80046de:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	2301      	movs	r3, #1
 80046e6:	2238      	movs	r2, #56	; 0x38
 80046e8:	21d0      	movs	r1, #208	; 0xd0
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f002 ffa4 	bl	8007638 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80046f0:	2300      	movs	r3, #0
 80046f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, 100);// Disable FIFO
 80046f6:	2364      	movs	r3, #100	; 0x64
 80046f8:	9302      	str	r3, [sp, #8]
 80046fa:	2301      	movs	r3, #1
 80046fc:	9301      	str	r3, [sp, #4]
 80046fe:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	2301      	movs	r3, #1
 8004706:	2223      	movs	r2, #35	; 0x23
 8004708:	21d0      	movs	r1, #208	; 0xd0
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f002 ff94 	bl	8007638 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004710:	2300      	movs	r3, #0
 8004712:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, 100);// Turn on internal clock source
 8004716:	2364      	movs	r3, #100	; 0x64
 8004718:	9302      	str	r3, [sp, #8]
 800471a:	2301      	movs	r3, #1
 800471c:	9301      	str	r3, [sp, #4]
 800471e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	2301      	movs	r3, #1
 8004726:	226b      	movs	r2, #107	; 0x6b
 8004728:	21d0      	movs	r1, #208	; 0xd0
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f002 ff84 	bl	8007638 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004730:	2300      	movs	r3, #0
 8004732:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, I2C_MST_CTRL, 1, &writeData, 1, 100);// Disable I2C master
 8004736:	2364      	movs	r3, #100	; 0x64
 8004738:	9302      	str	r3, [sp, #8]
 800473a:	2301      	movs	r3, #1
 800473c:	9301      	str	r3, [sp, #4]
 800473e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	2301      	movs	r3, #1
 8004746:	2224      	movs	r2, #36	; 0x24
 8004748:	21d0      	movs	r1, #208	; 0xd0
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f002 ff74 	bl	8007638 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004750:	2300      	movs	r3, #0
 8004752:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, 100);// Disable FIFO and I2C master modes
 8004756:	2364      	movs	r3, #100	; 0x64
 8004758:	9302      	str	r3, [sp, #8]
 800475a:	2301      	movs	r3, #1
 800475c:	9301      	str	r3, [sp, #4]
 800475e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	2301      	movs	r3, #1
 8004766:	226a      	movs	r2, #106	; 0x6a
 8004768:	21d0      	movs	r1, #208	; 0xd0
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f002 ff64 	bl	8007638 <HAL_I2C_Mem_Write>
	writeData = 0x0C;
 8004770:	230c      	movs	r3, #12
 8004772:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, 100);// Reset FIFO and DMP
 8004776:	2364      	movs	r3, #100	; 0x64
 8004778:	9302      	str	r3, [sp, #8]
 800477a:	2301      	movs	r3, #1
 800477c:	9301      	str	r3, [sp, #4]
 800477e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	2301      	movs	r3, #1
 8004786:	226a      	movs	r2, #106	; 0x6a
 8004788:	21d0      	movs	r1, #208	; 0xd0
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f002 ff54 	bl	8007638 <HAL_I2C_Mem_Write>
	HAL_Delay(15);
 8004790:	200f      	movs	r0, #15
 8004792:	f001 ffd5 	bl	8006740 <HAL_Delay>

	// Configure MPU6050 gyro and accelerometer for bias calculation
	writeData = 0x01;
 8004796:	2301      	movs	r3, #1
 8004798:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, 100);// Set low-pass filter to 188 Hz
 800479c:	2364      	movs	r3, #100	; 0x64
 800479e:	9302      	str	r3, [sp, #8]
 80047a0:	2301      	movs	r3, #1
 80047a2:	9301      	str	r3, [sp, #4]
 80047a4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	2301      	movs	r3, #1
 80047ac:	221a      	movs	r2, #26
 80047ae:	21d0      	movs	r1, #208	; 0xd0
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f002 ff41 	bl	8007638 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80047b6:	2300      	movs	r3, #0
 80047b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, 100);// Set sample rate to 1 kHz
 80047bc:	2364      	movs	r3, #100	; 0x64
 80047be:	9302      	str	r3, [sp, #8]
 80047c0:	2301      	movs	r3, #1
 80047c2:	9301      	str	r3, [sp, #4]
 80047c4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	2301      	movs	r3, #1
 80047cc:	2219      	movs	r2, #25
 80047ce:	21d0      	movs	r1, #208	; 0xd0
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f002 ff31 	bl	8007638 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80047d6:	2300      	movs	r3, #0
 80047d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, 100);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 80047dc:	2364      	movs	r3, #100	; 0x64
 80047de:	9302      	str	r3, [sp, #8]
 80047e0:	2301      	movs	r3, #1
 80047e2:	9301      	str	r3, [sp, #4]
 80047e4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	2301      	movs	r3, #1
 80047ec:	221b      	movs	r2, #27
 80047ee:	21d0      	movs	r1, #208	; 0xd0
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f002 ff21 	bl	8007638 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80047f6:	2300      	movs	r3, #0
 80047f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, 100);// Set accelerometer full-scale to 2 g, maximum sensitivity
 80047fc:	2364      	movs	r3, #100	; 0x64
 80047fe:	9302      	str	r3, [sp, #8]
 8004800:	2301      	movs	r3, #1
 8004802:	9301      	str	r3, [sp, #4]
 8004804:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	2301      	movs	r3, #1
 800480c:	221c      	movs	r2, #28
 800480e:	21d0      	movs	r1, #208	; 0xd0
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f002 ff11 	bl	8007638 <HAL_I2C_Mem_Write>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8004816:	2383      	movs	r3, #131	; 0x83
 8004818:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 800481c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004820:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeData = 0x40;
 8004824:	2340      	movs	r3, #64	; 0x40
 8004826:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, 100);// Enable FIFO
 800482a:	2364      	movs	r3, #100	; 0x64
 800482c:	9302      	str	r3, [sp, #8]
 800482e:	2301      	movs	r3, #1
 8004830:	9301      	str	r3, [sp, #4]
 8004832:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	2301      	movs	r3, #1
 800483a:	226a      	movs	r2, #106	; 0x6a
 800483c:	21d0      	movs	r1, #208	; 0xd0
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f002 fefa 	bl	8007638 <HAL_I2C_Mem_Write>
	writeData = 0x78;
 8004844:	2378      	movs	r3, #120	; 0x78
 8004846:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, 100);// Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 800484a:	2364      	movs	r3, #100	; 0x64
 800484c:	9302      	str	r3, [sp, #8]
 800484e:	2301      	movs	r3, #1
 8004850:	9301      	str	r3, [sp, #4]
 8004852:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	2301      	movs	r3, #1
 800485a:	2223      	movs	r2, #35	; 0x23
 800485c:	21d0      	movs	r1, #208	; 0xd0
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f002 feea 	bl	8007638 <HAL_I2C_Mem_Write>
	HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8004864:	2028      	movs	r0, #40	; 0x28
 8004866:	f001 ff6b 	bl	8006740 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeData = 0x00;
 800486a:	2300      	movs	r3, #0
 800486c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, 100);// Disable gyro and accelerometer sensors for FIFO
 8004870:	2364      	movs	r3, #100	; 0x64
 8004872:	9302      	str	r3, [sp, #8]
 8004874:	2301      	movs	r3, #1
 8004876:	9301      	str	r3, [sp, #4]
 8004878:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	2301      	movs	r3, #1
 8004880:	2223      	movs	r2, #35	; 0x23
 8004882:	21d0      	movs	r1, #208	; 0xd0
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f002 fed7 	bl	8007638 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_COUNTH, 1, &calibData[0], 2, 100);// read FIFO sample count
 800488a:	2364      	movs	r3, #100	; 0x64
 800488c:	9302      	str	r3, [sp, #8]
 800488e:	2302      	movs	r3, #2
 8004890:	9301      	str	r3, [sp, #4]
 8004892:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	2301      	movs	r3, #1
 800489a:	2272      	movs	r2, #114	; 0x72
 800489c:	21d0      	movs	r1, #208	; 0xd0
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f002 ffc4 	bl	800782c <HAL_I2C_Mem_Read>
	fifo_count = ((uint16_t)calibData[0] << 8) | calibData[1];
 80048a4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80048a8:	021b      	lsls	r3, r3, #8
 80048aa:	b21a      	sxth	r2, r3
 80048ac:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80048b0:	b21b      	sxth	r3, r3
 80048b2:	4313      	orrs	r3, r2
 80048b4:	b21b      	sxth	r3, r3
 80048b6:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 80048ba:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80048be:	4a5a      	ldr	r2, [pc, #360]	; (8004a28 <calibrateMPU9250+0x3e8>)
 80048c0:	fba2 2303 	umull	r2, r3, r2, r3
 80048c4:	08db      	lsrs	r3, r3, #3
 80048c6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	for (ii = 0; ii < packet_count; ii++) {
 80048ca:	2300      	movs	r3, #0
 80048cc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80048d0:	e077      	b.n	80049c2 <calibrateMPU9250+0x382>
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 80048d2:	2300      	movs	r3, #0
 80048d4:	833b      	strh	r3, [r7, #24]
 80048d6:	2300      	movs	r3, #0
 80048d8:	837b      	strh	r3, [r7, #26]
 80048da:	2300      	movs	r3, #0
 80048dc:	83bb      	strh	r3, [r7, #28]
 80048de:	2300      	movs	r3, #0
 80048e0:	823b      	strh	r3, [r7, #16]
 80048e2:	2300      	movs	r3, #0
 80048e4:	827b      	strh	r3, [r7, #18]
 80048e6:	2300      	movs	r3, #0
 80048e8:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_R_W, 1, &calibData[0], 12, 100);
 80048ea:	2364      	movs	r3, #100	; 0x64
 80048ec:	9302      	str	r3, [sp, #8]
 80048ee:	230c      	movs	r3, #12
 80048f0:	9301      	str	r3, [sp, #4]
 80048f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	2301      	movs	r3, #1
 80048fa:	2274      	movs	r2, #116	; 0x74
 80048fc:	21d0      	movs	r1, #208	; 0xd0
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f002 ff94 	bl	800782c <HAL_I2C_Mem_Read>

		//Form signed 16-bit integer for each sample in FIFO
		accel_temp[0] = (int16_t) (((int16_t)calibData[0] << 8) | calibData[1]  ) ;
 8004904:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004908:	021b      	lsls	r3, r3, #8
 800490a:	b21a      	sxth	r2, r3
 800490c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004910:	b21b      	sxth	r3, r3
 8004912:	4313      	orrs	r3, r2
 8004914:	b21b      	sxth	r3, r3
 8004916:	833b      	strh	r3, [r7, #24]
		accel_temp[1] = (int16_t) (((int16_t)calibData[2] << 8) | calibData[3]  ) ;
 8004918:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800491c:	021b      	lsls	r3, r3, #8
 800491e:	b21a      	sxth	r2, r3
 8004920:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004924:	b21b      	sxth	r3, r3
 8004926:	4313      	orrs	r3, r2
 8004928:	b21b      	sxth	r3, r3
 800492a:	837b      	strh	r3, [r7, #26]
		accel_temp[2] = (int16_t) (((int16_t)calibData[4] << 8) | calibData[5]  ) ;
 800492c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004930:	021b      	lsls	r3, r3, #8
 8004932:	b21a      	sxth	r2, r3
 8004934:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004938:	b21b      	sxth	r3, r3
 800493a:	4313      	orrs	r3, r2
 800493c:	b21b      	sxth	r3, r3
 800493e:	83bb      	strh	r3, [r7, #28]
		gyro_temp[0]  = (int16_t) (((int16_t)calibData[6] << 8) | calibData[7]  ) ;
 8004940:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8004944:	021b      	lsls	r3, r3, #8
 8004946:	b21a      	sxth	r2, r3
 8004948:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800494c:	b21b      	sxth	r3, r3
 800494e:	4313      	orrs	r3, r2
 8004950:	b21b      	sxth	r3, r3
 8004952:	823b      	strh	r3, [r7, #16]
		gyro_temp[1]  = (int16_t) (((int16_t)calibData[8] << 8) | calibData[9]  ) ;
 8004954:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004958:	021b      	lsls	r3, r3, #8
 800495a:	b21a      	sxth	r2, r3
 800495c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8004960:	b21b      	sxth	r3, r3
 8004962:	4313      	orrs	r3, r2
 8004964:	b21b      	sxth	r3, r3
 8004966:	827b      	strh	r3, [r7, #18]
		gyro_temp[2]  = (int16_t) (((int16_t)calibData[10] << 8) | calibData[11]) ;
 8004968:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800496c:	021b      	lsls	r3, r3, #8
 800496e:	b21a      	sxth	r2, r3
 8004970:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004974:	b21b      	sxth	r3, r3
 8004976:	4313      	orrs	r3, r2
 8004978:	b21b      	sxth	r3, r3
 800497a:	82bb      	strh	r3, [r7, #20]

		//Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
		accel_bias[0] += (int32_t) accel_temp[0];
 800497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004982:	4413      	add	r3, r2
 8004984:	633b      	str	r3, [r7, #48]	; 0x30
		accel_bias[1] += (int32_t) accel_temp[1];
 8004986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004988:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800498c:	4413      	add	r3, r2
 800498e:	637b      	str	r3, [r7, #52]	; 0x34
		accel_bias[2] += (int32_t) accel_temp[2];
 8004990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004992:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004996:	4413      	add	r3, r2
 8004998:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 800499a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800499c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80049a0:	4413      	add	r3, r2
 80049a2:	63fb      	str	r3, [r7, #60]	; 0x3c
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 80049a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049a6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80049aa:	4413      	add	r3, r2
 80049ac:	643b      	str	r3, [r7, #64]	; 0x40
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 80049ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049b0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80049b4:	4413      	add	r3, r2
 80049b6:	647b      	str	r3, [r7, #68]	; 0x44
	for (ii = 0; ii < packet_count; ii++) {
 80049b8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80049bc:	3301      	adds	r3, #1
 80049be:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80049c2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80049c6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d381      	bcc.n	80048d2 <calibrateMPU9250+0x292>
	}

	//Normalize sums to get average count biases
	accel_bias[0] /= (int32_t) packet_count;
 80049ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049d0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80049d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80049d8:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias[1] /= (int32_t) packet_count;
 80049da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80049e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80049e4:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias[2] /= (int32_t) packet_count;
 80049e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049e8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80049ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80049f0:	63bb      	str	r3, [r7, #56]	; 0x38
	gyro_bias[0]  /= (int32_t) packet_count;
 80049f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049f4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80049f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80049fc:	63fb      	str	r3, [r7, #60]	; 0x3c
	gyro_bias[1]  /= (int32_t) packet_count;
 80049fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a00:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004a04:	fb92 f3f3 	sdiv	r3, r2, r3
 8004a08:	643b      	str	r3, [r7, #64]	; 0x40
	gyro_bias[2]  /= (int32_t) packet_count;
 8004a0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a0c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004a10:	fb92 f3f3 	sdiv	r3, r2, r3
 8004a14:	647b      	str	r3, [r7, #68]	; 0x44

	//Remove gravity from the z-axis accelerometer bias calculation
	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}
 8004a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	dd07      	ble.n	8004a2c <calibrateMPU9250+0x3ec>
 8004a1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a1e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a26:	e006      	b.n	8004a36 <calibrateMPU9250+0x3f6>
 8004a28:	aaaaaaab 	.word	0xaaaaaaab
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 8004a2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a2e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004a32:	4413      	add	r3, r2
 8004a34:	63bb      	str	r3, [r7, #56]	; 0x38

	//Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	calibData[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8004a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a38:	425b      	negs	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	da00      	bge.n	8004a40 <calibrateMPU9250+0x400>
 8004a3e:	3303      	adds	r3, #3
 8004a40:	109b      	asrs	r3, r3, #2
 8004a42:	121b      	asrs	r3, r3, #8
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8004a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a4c:	425b      	negs	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	da00      	bge.n	8004a54 <calibrateMPU9250+0x414>
 8004a52:	3303      	adds	r3, #3
 8004a54:	109b      	asrs	r3, r3, #2
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8004a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a5e:	425b      	negs	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	da00      	bge.n	8004a66 <calibrateMPU9250+0x426>
 8004a64:	3303      	adds	r3, #3
 8004a66:	109b      	asrs	r3, r3, #2
 8004a68:	121b      	asrs	r3, r3, #8
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (-gyro_bias[1]/4)       & 0xFF;
 8004a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a72:	425b      	negs	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	da00      	bge.n	8004a7a <calibrateMPU9250+0x43a>
 8004a78:	3303      	adds	r3, #3
 8004a7a:	109b      	asrs	r3, r3, #2
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8004a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a84:	425b      	negs	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	da00      	bge.n	8004a8c <calibrateMPU9250+0x44c>
 8004a8a:	3303      	adds	r3, #3
 8004a8c:	109b      	asrs	r3, r3, #2
 8004a8e:	121b      	asrs	r3, r3, #8
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (-gyro_bias[2]/4)       & 0xFF;
 8004a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a98:	425b      	negs	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	da00      	bge.n	8004aa0 <calibrateMPU9250+0x460>
 8004a9e:	3303      	adds	r3, #3
 8004aa0:	109b      	asrs	r3, r3, #2
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push gyro biases to hardware registers
	writeData = calibData[0];
 8004aa8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004aac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_H, 1, &writeData, 1, 100);
 8004ab0:	2364      	movs	r3, #100	; 0x64
 8004ab2:	9302      	str	r3, [sp, #8]
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	9301      	str	r3, [sp, #4]
 8004ab8:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	2301      	movs	r3, #1
 8004ac0:	2213      	movs	r2, #19
 8004ac2:	21d0      	movs	r1, #208	; 0xd0
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f002 fdb7 	bl	8007638 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 8004aca:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004ace:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_L, 1, &writeData, 1, 100);
 8004ad2:	2364      	movs	r3, #100	; 0x64
 8004ad4:	9302      	str	r3, [sp, #8]
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	9301      	str	r3, [sp, #4]
 8004ada:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	2214      	movs	r2, #20
 8004ae4:	21d0      	movs	r1, #208	; 0xd0
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f002 fda6 	bl	8007638 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 8004aec:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004af0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_H, 1, &writeData, 1, 100);
 8004af4:	2364      	movs	r3, #100	; 0x64
 8004af6:	9302      	str	r3, [sp, #8]
 8004af8:	2301      	movs	r3, #1
 8004afa:	9301      	str	r3, [sp, #4]
 8004afc:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	2301      	movs	r3, #1
 8004b04:	2215      	movs	r2, #21
 8004b06:	21d0      	movs	r1, #208	; 0xd0
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f002 fd95 	bl	8007638 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 8004b0e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004b12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_L, 1, &writeData, 1, 100);
 8004b16:	2364      	movs	r3, #100	; 0x64
 8004b18:	9302      	str	r3, [sp, #8]
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	9301      	str	r3, [sp, #4]
 8004b1e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	2301      	movs	r3, #1
 8004b26:	2216      	movs	r2, #22
 8004b28:	21d0      	movs	r1, #208	; 0xd0
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f002 fd84 	bl	8007638 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 8004b30:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004b34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_H, 1, &writeData, 1, 100);
 8004b38:	2364      	movs	r3, #100	; 0x64
 8004b3a:	9302      	str	r3, [sp, #8]
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	9301      	str	r3, [sp, #4]
 8004b40:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	2301      	movs	r3, #1
 8004b48:	2217      	movs	r2, #23
 8004b4a:	21d0      	movs	r1, #208	; 0xd0
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f002 fd73 	bl	8007638 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 8004b52:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004b56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_L, 1, &writeData, 1, 100);
 8004b5a:	2364      	movs	r3, #100	; 0x64
 8004b5c:	9302      	str	r3, [sp, #8]
 8004b5e:	2301      	movs	r3, #1
 8004b60:	9301      	str	r3, [sp, #4]
 8004b62:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	2301      	movs	r3, #1
 8004b6a:	2218      	movs	r2, #24
 8004b6c:	21d0      	movs	r1, #208	; 0xd0
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f002 fd62 	bl	8007638 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 8004b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fc f8a8 	bl	8000ccc <__aeabi_i2f>
 8004b7c:	4604      	mov	r4, r0
 8004b7e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fc f89e 	bl	8000cc4 <__aeabi_ui2f>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	f7fc f9a5 	bl	8000edc <__aeabi_fdiv>
 8004b92:	4603      	mov	r3, r0
 8004b94:	461a      	mov	r2, r3
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	601a      	str	r2, [r3, #0]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 8004b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fc f895 	bl	8000ccc <__aeabi_i2f>
 8004ba2:	4605      	mov	r5, r0
 8004ba4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7fc f88b 	bl	8000cc4 <__aeabi_ui2f>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	1d1c      	adds	r4, r3, #4
 8004bb4:	4611      	mov	r1, r2
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	f7fc f990 	bl	8000edc <__aeabi_fdiv>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	6023      	str	r3, [r4, #0]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8004bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fc f882 	bl	8000ccc <__aeabi_i2f>
 8004bc8:	4605      	mov	r5, r0
 8004bca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fc f878 	bl	8000cc4 <__aeabi_ui2f>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f103 0408 	add.w	r4, r3, #8
 8004bdc:	4611      	mov	r1, r2
 8004bde:	4628      	mov	r0, r5
 8004be0:	f7fc f97c 	bl	8000edc <__aeabi_fdiv>
 8004be4:	4603      	mov	r3, r0
 8004be6:	6023      	str	r3, [r4, #0]



	//Construct the accelerometer biases for push to the hardware accelerometer bias registers.
	int32_t accel_bias_reg[3] = {0, 0, 0}; //A place to hold the factory accelerometer trim biases
 8004be8:	2300      	movs	r3, #0
 8004bea:	627b      	str	r3, [r7, #36]	; 0x24
 8004bec:	2300      	movs	r3, #0
 8004bee:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &calibData[0], 2, 100); //Read factory accelerometer trim values
 8004bf4:	2364      	movs	r3, #100	; 0x64
 8004bf6:	9302      	str	r3, [sp, #8]
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	9301      	str	r3, [sp, #4]
 8004bfc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	2301      	movs	r3, #1
 8004c04:	2277      	movs	r2, #119	; 0x77
 8004c06:	21d0      	movs	r1, #208	; 0xd0
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f002 fe0f 	bl	800782c <HAL_I2C_Mem_Read>
	accel_bias_reg[0] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8004c0e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004c12:	021b      	lsls	r3, r3, #8
 8004c14:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &calibData[0], 2, 100);
 8004c1c:	2364      	movs	r3, #100	; 0x64
 8004c1e:	9302      	str	r3, [sp, #8]
 8004c20:	2302      	movs	r3, #2
 8004c22:	9301      	str	r3, [sp, #4]
 8004c24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	227a      	movs	r2, #122	; 0x7a
 8004c2e:	21d0      	movs	r1, #208	; 0xd0
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f002 fdfb 	bl	800782c <HAL_I2C_Mem_Read>
	accel_bias_reg[1] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8004c36:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004c3a:	021b      	lsls	r3, r3, #8
 8004c3c:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8004c40:	4313      	orrs	r3, r2
 8004c42:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &calibData[0], 2, 100);
 8004c44:	2364      	movs	r3, #100	; 0x64
 8004c46:	9302      	str	r3, [sp, #8]
 8004c48:	2302      	movs	r3, #2
 8004c4a:	9301      	str	r3, [sp, #4]
 8004c4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	2301      	movs	r3, #1
 8004c54:	227d      	movs	r2, #125	; 0x7d
 8004c56:	21d0      	movs	r1, #208	; 0xd0
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f002 fde7 	bl	800782c <HAL_I2C_Mem_Read>
	accel_bias_reg[2] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8004c5e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004c62:	021b      	lsls	r3, r3, #8
 8004c64:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint32_t mask = 1uL;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	65bb      	str	r3, [r7, #88]	; 0x58
	//Define array to hold mask bit for each accelerometer bias axis
	uint8_t mask_bit[3] = {0, 0, 0};
 8004c70:	4a8d      	ldr	r2, [pc, #564]	; (8004ea8 <calibrateMPU9250+0x868>)
 8004c72:	f107 0320 	add.w	r3, r7, #32
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	4611      	mov	r1, r2
 8004c7a:	8019      	strh	r1, [r3, #0]
 8004c7c:	3302      	adds	r3, #2
 8004c7e:	0c12      	lsrs	r2, r2, #16
 8004c80:	701a      	strb	r2, [r3, #0]

	for(ii = 0; ii < 3; ii++) {
 8004c82:	2300      	movs	r3, #0
 8004c84:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004c88:	e017      	b.n	8004cba <calibrateMPU9250+0x67a>
		//If temperature compensation bit is set, record that fact in mask_bit
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01;
 8004c8a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	3368      	adds	r3, #104	; 0x68
 8004c92:	443b      	add	r3, r7
 8004c94:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d006      	beq.n	8004cb0 <calibrateMPU9250+0x670>
 8004ca2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004ca6:	3368      	adds	r3, #104	; 0x68
 8004ca8:	443b      	add	r3, r7
 8004caa:	2201      	movs	r2, #1
 8004cac:	f803 2c48 	strb.w	r2, [r3, #-72]
	for(ii = 0; ii < 3; ii++) {
 8004cb0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004cba:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d9e3      	bls.n	8004c8a <calibrateMPU9250+0x64a>
	}

	//Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); //Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8004cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	da00      	bge.n	8004ccc <calibrateMPU9250+0x68c>
 8004cca:	3307      	adds	r3, #7
 8004ccc:	10db      	asrs	r3, r3, #3
 8004cce:	425b      	negs	r3, r3
 8004cd0:	4413      	add	r3, r2
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias_reg[1] -= (accel_bias[1]/8);
 8004cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	da00      	bge.n	8004cde <calibrateMPU9250+0x69e>
 8004cdc:	3307      	adds	r3, #7
 8004cde:	10db      	asrs	r3, r3, #3
 8004ce0:	425b      	negs	r3, r3
 8004ce2:	4413      	add	r3, r2
 8004ce4:	62bb      	str	r3, [r7, #40]	; 0x28
	accel_bias_reg[2] -= (accel_bias[2]/8);
 8004ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	da00      	bge.n	8004cf0 <calibrateMPU9250+0x6b0>
 8004cee:	3307      	adds	r3, #7
 8004cf0:	10db      	asrs	r3, r3, #3
 8004cf2:	425b      	negs	r3, r3
 8004cf4:	4413      	add	r3, r2
 8004cf6:	62fb      	str	r3, [r7, #44]	; 0x2c

	calibData[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	121b      	asrs	r3, r3, #8
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (accel_bias_reg[0])      & 0xFF;
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[1] = calibData[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8004d0a:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8004d0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8004d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1c:	121b      	asrs	r3, r3, #8
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (accel_bias_reg[1])      & 0xFF;
 8004d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[3] = calibData[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8004d2c:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8004d30:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004d34:	4313      	orrs	r3, r2
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8004d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3e:	121b      	asrs	r3, r3, #8
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (accel_bias_reg[2])      & 0xFF;
 8004d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	calibData[5] = calibData[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8004d4e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004d52:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004d56:	4313      	orrs	r3, r2
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push accelerometer biases to hardware registers
	writeData = calibData[0];
 8004d5e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004d62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &writeData, 1, 100);
 8004d66:	2364      	movs	r3, #100	; 0x64
 8004d68:	9302      	str	r3, [sp, #8]
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	9301      	str	r3, [sp, #4]
 8004d6e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	2301      	movs	r3, #1
 8004d76:	2277      	movs	r2, #119	; 0x77
 8004d78:	21d0      	movs	r1, #208	; 0xd0
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f002 fc5c 	bl	8007638 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 8004d80:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004d84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_L, 1, &writeData, 1, 100);
 8004d88:	2364      	movs	r3, #100	; 0x64
 8004d8a:	9302      	str	r3, [sp, #8]
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	9301      	str	r3, [sp, #4]
 8004d90:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	2301      	movs	r3, #1
 8004d98:	2278      	movs	r2, #120	; 0x78
 8004d9a:	21d0      	movs	r1, #208	; 0xd0
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f002 fc4b 	bl	8007638 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 8004da2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004da6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &writeData, 1, 100);
 8004daa:	2364      	movs	r3, #100	; 0x64
 8004dac:	9302      	str	r3, [sp, #8]
 8004dae:	2301      	movs	r3, #1
 8004db0:	9301      	str	r3, [sp, #4]
 8004db2:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	2301      	movs	r3, #1
 8004dba:	227a      	movs	r2, #122	; 0x7a
 8004dbc:	21d0      	movs	r1, #208	; 0xd0
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f002 fc3a 	bl	8007638 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 8004dc4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004dc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_L, 1, &writeData, 1, 100);
 8004dcc:	2364      	movs	r3, #100	; 0x64
 8004dce:	9302      	str	r3, [sp, #8]
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	9301      	str	r3, [sp, #4]
 8004dd4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	2301      	movs	r3, #1
 8004ddc:	227b      	movs	r2, #123	; 0x7b
 8004dde:	21d0      	movs	r1, #208	; 0xd0
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f002 fc29 	bl	8007638 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 8004de6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004dea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &writeData, 1, 100);
 8004dee:	2364      	movs	r3, #100	; 0x64
 8004df0:	9302      	str	r3, [sp, #8]
 8004df2:	2301      	movs	r3, #1
 8004df4:	9301      	str	r3, [sp, #4]
 8004df6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	227d      	movs	r2, #125	; 0x7d
 8004e00:	21d0      	movs	r1, #208	; 0xd0
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f002 fc18 	bl	8007638 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 8004e08:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004e0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_L, 1, &writeData, 1, 100);
 8004e10:	2364      	movs	r3, #100	; 0x64
 8004e12:	9302      	str	r3, [sp, #8]
 8004e14:	2301      	movs	r3, #1
 8004e16:	9301      	str	r3, [sp, #4]
 8004e18:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	2301      	movs	r3, #1
 8004e20:	227e      	movs	r2, #126	; 0x7e
 8004e22:	21d0      	movs	r1, #208	; 0xd0
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f002 fc07 	bl	8007638 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest2[0] = (float) accel_bias[0]/(float) accelsensitivity;
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7fb ff4d 	bl	8000ccc <__aeabi_i2f>
 8004e32:	4604      	mov	r4, r0
 8004e34:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7fb ff43 	bl	8000cc4 <__aeabi_ui2f>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	4619      	mov	r1, r3
 8004e42:	4620      	mov	r0, r4
 8004e44:	f7fc f84a 	bl	8000edc <__aeabi_fdiv>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	601a      	str	r2, [r3, #0]
	dest2[1] = (float) accel_bias[1]/(float) accelsensitivity;
 8004e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fb ff3a 	bl	8000ccc <__aeabi_i2f>
 8004e58:	4605      	mov	r5, r0
 8004e5a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fb ff30 	bl	8000cc4 <__aeabi_ui2f>
 8004e64:	4602      	mov	r2, r0
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	1d1c      	adds	r4, r3, #4
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	f7fc f835 	bl	8000edc <__aeabi_fdiv>
 8004e72:	4603      	mov	r3, r0
 8004e74:	6023      	str	r3, [r4, #0]
	dest2[2] = (float) accel_bias[2]/(float) accelsensitivity;
 8004e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fb ff27 	bl	8000ccc <__aeabi_i2f>
 8004e7e:	4605      	mov	r5, r0
 8004e80:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fb ff1d 	bl	8000cc4 <__aeabi_ui2f>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f103 0408 	add.w	r4, r3, #8
 8004e92:	4611      	mov	r1, r2
 8004e94:	4628      	mov	r0, r5
 8004e96:	f7fc f821 	bl	8000edc <__aeabi_fdiv>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	6023      	str	r3, [r4, #0]


}
 8004e9e:	bf00      	nop
 8004ea0:	3768      	adds	r7, #104	; 0x68
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	0800b080 	.word	0x0800b080

08004eac <HAL_GPIO_EXTI_Callback>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* USER CODE BEGIN PV */
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 8004eac:	b590      	push	{r4, r7, lr}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af02      	add	r7, sp, #8
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_11){
 8004eb6:	88fb      	ldrh	r3, [r7, #6]
 8004eb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ebc:	d16a      	bne.n	8004f94 <HAL_GPIO_EXTI_Callback+0xe8>
		tick = __HAL_TIM_GET_COUNTER(&htim4);
 8004ebe:	4b37      	ldr	r3, [pc, #220]	; (8004f9c <HAL_GPIO_EXTI_Callback+0xf0>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	4b36      	ldr	r3, [pc, #216]	; (8004fa0 <HAL_GPIO_EXTI_Callback+0xf4>)
 8004ec8:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim4,0);
 8004eca:	4b34      	ldr	r3, [pc, #208]	; (8004f9c <HAL_GPIO_EXTI_Callback+0xf0>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	625a      	str	r2, [r3, #36]	; 0x24
		if(tick < 2005){
 8004ed2:	4b33      	ldr	r3, [pc, #204]	; (8004fa0 <HAL_GPIO_EXTI_Callback+0xf4>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f240 72d4 	movw	r2, #2004	; 0x7d4
 8004eda:	4293      	cmp	r3, r2
 8004edc:	dc53      	bgt.n	8004f86 <HAL_GPIO_EXTI_Callback+0xda>
			if(pulse==2){
 8004ede:	4b31      	ldr	r3, [pc, #196]	; (8004fa4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d11d      	bne.n	8004f24 <HAL_GPIO_EXTI_Callback+0x78>
				if(tick<1000) ch[pulse]=ch[pulse];
 8004ee8:	4b2d      	ldr	r3, [pc, #180]	; (8004fa0 <HAL_GPIO_EXTI_Callback+0xf4>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ef0:	da0e      	bge.n	8004f10 <HAL_GPIO_EXTI_Callback+0x64>
 8004ef2:	4b2c      	ldr	r3, [pc, #176]	; (8004fa4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4b2a      	ldr	r3, [pc, #168]	; (8004fa4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	4619      	mov	r1, r3
 8004f02:	4b29      	ldr	r3, [pc, #164]	; (8004fa8 <HAL_GPIO_EXTI_Callback+0xfc>)
 8004f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f08:	4a27      	ldr	r2, [pc, #156]	; (8004fa8 <HAL_GPIO_EXTI_Callback+0xfc>)
 8004f0a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004f0e:	e032      	b.n	8004f76 <HAL_GPIO_EXTI_Callback+0xca>
				else
					ch[pulse]= tick;
 8004f10:	4b24      	ldr	r3, [pc, #144]	; (8004fa4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	4619      	mov	r1, r3
 8004f18:	4b21      	ldr	r3, [pc, #132]	; (8004fa0 <HAL_GPIO_EXTI_Callback+0xf4>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a22      	ldr	r2, [pc, #136]	; (8004fa8 <HAL_GPIO_EXTI_Callback+0xfc>)
 8004f1e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004f22:	e028      	b.n	8004f76 <HAL_GPIO_EXTI_Callback+0xca>
			}
			else{
				if(tick<1200) ch[pulse]=ch[pulse];
 8004f24:	4b1e      	ldr	r3, [pc, #120]	; (8004fa0 <HAL_GPIO_EXTI_Callback+0xf4>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8004f2c:	da0e      	bge.n	8004f4c <HAL_GPIO_EXTI_Callback+0xa0>
 8004f2e:	4b1d      	ldr	r3, [pc, #116]	; (8004fa4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	461a      	mov	r2, r3
 8004f36:	4b1b      	ldr	r3, [pc, #108]	; (8004fa4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4b1a      	ldr	r3, [pc, #104]	; (8004fa8 <HAL_GPIO_EXTI_Callback+0xfc>)
 8004f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f44:	4a18      	ldr	r2, [pc, #96]	; (8004fa8 <HAL_GPIO_EXTI_Callback+0xfc>)
 8004f46:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004f4a:	e014      	b.n	8004f76 <HAL_GPIO_EXTI_Callback+0xca>
				else
					ch[pulse]= mapValue(tick, 1200, 1700, 1000, 2000);
 8004f4c:	4b14      	ldr	r3, [pc, #80]	; (8004fa0 <HAL_GPIO_EXTI_Callback+0xf4>)
 8004f4e:	6818      	ldr	r0, [r3, #0]
 8004f50:	4b14      	ldr	r3, [pc, #80]	; (8004fa4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	461c      	mov	r4, r3
 8004f58:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f62:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8004f66:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8004f6a:	f000 f81f 	bl	8004fac <mapValue>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	4a0d      	ldr	r2, [pc, #52]	; (8004fa8 <HAL_GPIO_EXTI_Callback+0xfc>)
 8004f72:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				//ch[pulse]= tick;
			}
			pulse++;
 8004f76:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	4b08      	ldr	r3, [pc, #32]	; (8004fa4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8004f82:	701a      	strb	r2, [r3, #0]
			pulse = 0;
		}

	}

}
 8004f84:	e006      	b.n	8004f94 <HAL_GPIO_EXTI_Callback+0xe8>
			__HAL_TIM_SET_COUNTER(&htim4,0);
 8004f86:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <HAL_GPIO_EXTI_Callback+0xf0>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	625a      	str	r2, [r3, #36]	; 0x24
			pulse = 0;
 8004f8e:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	701a      	strb	r2, [r3, #0]
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd90      	pop	{r4, r7, pc}
 8004f9c:	20000394 	.word	0x20000394
 8004fa0:	2000013c 	.word	0x2000013c
 8004fa4:	20000140 	.word	0x20000140
 8004fa8:	2000011c 	.word	0x2000011c

08004fac <mapValue>:

int mapValue(int value, int inMin, int inMax, int outMin, int outMax) {
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
 8004fb8:	603b      	str	r3, [r7, #0]
if (value < inMin) return outMin;
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	da01      	bge.n	8004fc6 <mapValue+0x1a>
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	e014      	b.n	8004ff0 <mapValue+0x44>
else if (value > inMax) return outMax;
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	dd01      	ble.n	8004fd2 <mapValue+0x26>
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	e00e      	b.n	8004ff0 <mapValue+0x44>

return (value - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	69b9      	ldr	r1, [r7, #24]
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	1a8a      	subs	r2, r1, r2
 8004fde:	fb03 f202 	mul.w	r2, r3, r2
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	1acb      	subs	r3, r1, r3
 8004fe8:	fb92 f2f3 	sdiv	r2, r2, r3
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	4413      	add	r3, r2
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bc80      	pop	{r7}
 8004ff8:	4770      	bx	lr
 8004ffa:	0000      	movs	r0, r0
 8004ffc:	0000      	movs	r0, r0
	...

08005000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005000:	b5b0      	push	{r4, r5, r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005004:	f001 fb3a 	bl	800667c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005008:	f000 fff4 	bl	8005ff4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800500c:	f001 f976 	bl	80062fc <MX_GPIO_Init>
  MX_TIM4_Init();
 8005010:	f001 f926 	bl	8006260 <MX_TIM4_Init>
  MX_TIM3_Init();
 8005014:	f001 f8aa 	bl	800616c <MX_TIM3_Init>
  MX_I2C1_Init();
 8005018:	f001 f82e 	bl	8006078 <MX_I2C1_Init>
  MX_TIM2_Init();
 800501c:	f001 f85a 	bl	80060d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 8005020:	48bb      	ldr	r0, [pc, #748]	; (8005310 <main+0x310>)
 8005022:	f003 ffbb 	bl	8008f9c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 8005026:	48bb      	ldr	r0, [pc, #748]	; (8005314 <main+0x314>)
 8005028:	f003 ffb8 	bl	8008f9c <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800502c:	2100      	movs	r1, #0
 800502e:	48ba      	ldr	r0, [pc, #744]	; (8005318 <main+0x318>)
 8005030:	f004 f84e 	bl	80090d0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8005034:	2104      	movs	r1, #4
 8005036:	48b8      	ldr	r0, [pc, #736]	; (8005318 <main+0x318>)
 8005038:	f004 f84a 	bl	80090d0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800503c:	2108      	movs	r1, #8
 800503e:	48b6      	ldr	r0, [pc, #728]	; (8005318 <main+0x318>)
 8005040:	f004 f846 	bl	80090d0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8005044:	210c      	movs	r1, #12
 8005046:	48b4      	ldr	r0, [pc, #720]	; (8005318 <main+0x318>)
 8005048:	f004 f842 	bl	80090d0 <HAL_TIM_PWM_Start>
    HAL_Delay(10);
 800504c:	200a      	movs	r0, #10
 800504e:	f001 fb77 	bl	8006740 <HAL_Delay>
     __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 8005052:	4bb1      	ldr	r3, [pc, #708]	; (8005318 <main+0x318>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2200      	movs	r2, #0
 8005058:	635a      	str	r2, [r3, #52]	; 0x34
     __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
 800505a:	4baf      	ldr	r3, [pc, #700]	; (8005318 <main+0x318>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2200      	movs	r2, #0
 8005060:	639a      	str	r2, [r3, #56]	; 0x38
     __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8005062:	4bad      	ldr	r3, [pc, #692]	; (8005318 <main+0x318>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2200      	movs	r2, #0
 8005068:	63da      	str	r2, [r3, #60]	; 0x3c
     __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 800506a:	4bab      	ldr	r3, [pc, #684]	; (8005318 <main+0x318>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2200      	movs	r2, #0
 8005070:	641a      	str	r2, [r3, #64]	; 0x40
     HAL_Delay(10);
 8005072:	200a      	movs	r0, #10
 8005074:	f001 fb64 	bl	8006740 <HAL_Delay>

     MPU9250SetDefault(&mpu);
 8005078:	48a8      	ldr	r0, [pc, #672]	; (800531c <main+0x31c>)
 800507a:	f7fc ff49 	bl	8001f10 <MPU9250SetDefault>
          while(!(setupMPU(&mpu, MPU9250_ADDRESS)==1)) {
 800507e:	bf00      	nop
 8005080:	21d0      	movs	r1, #208	; 0xd0
 8005082:	48a6      	ldr	r0, [pc, #664]	; (800531c <main+0x31c>)
 8005084:	f7fc f878 	bl	8001178 <setupMPU>
 8005088:	4603      	mov	r3, r0
 800508a:	2b01      	cmp	r3, #1
 800508c:	d1f8      	bne.n	8005080 <main+0x80>
         //	 int i;
         //	 for (i=0;i<50;i++){HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);}
          }
          HAL_Delay(100);
 800508e:	2064      	movs	r0, #100	; 0x64
 8005090:	f001 fb56 	bl	8006740 <HAL_Delay>

          if(updateMPU(&mpu)==1){
 8005094:	48a1      	ldr	r0, [pc, #644]	; (800531c <main+0x31c>)
 8005096:	f7fc f917 	bl	80012c8 <updateMPU>
         	 //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
          }
          HAL_Delay(2000);
 800509a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800509e:	f001 fb4f 	bl	8006740 <HAL_Delay>
          loop_timer = __HAL_TIM_GET_COUNTER(&htim2);
 80050a2:	4b9c      	ldr	r3, [pc, #624]	; (8005314 <main+0x314>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	461a      	mov	r2, r3
 80050aa:	4b9d      	ldr	r3, [pc, #628]	; (8005320 <main+0x320>)
 80050ac:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
 	  receiver_input_channel_1 = ch[2]; //thr
 80050ae:	4b9d      	ldr	r3, [pc, #628]	; (8005324 <main+0x324>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	4a9d      	ldr	r2, [pc, #628]	; (8005328 <main+0x328>)
 80050b4:	6013      	str	r3, [r2, #0]
	 	  receiver_input_channel_2 = ch[0]; //roll
 80050b6:	4b9b      	ldr	r3, [pc, #620]	; (8005324 <main+0x324>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a9c      	ldr	r2, [pc, #624]	; (800532c <main+0x32c>)
 80050bc:	6013      	str	r3, [r2, #0]
	 	  receiver_input_channel_3 = ch[1];	//pitch
 80050be:	4b99      	ldr	r3, [pc, #612]	; (8005324 <main+0x324>)
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	4a9b      	ldr	r2, [pc, #620]	; (8005330 <main+0x330>)
 80050c4:	6013      	str	r3, [r2, #0]
	 	  receiver_input_channel_4 = ch[3]; //yaw
 80050c6:	4b97      	ldr	r3, [pc, #604]	; (8005324 <main+0x324>)
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	4a9a      	ldr	r2, [pc, #616]	; (8005334 <main+0x334>)
 80050cc:	6013      	str	r3, [r2, #0]
	 	  receiver_input_channel_5 = ch[4];	 //sw left
 80050ce:	4b95      	ldr	r3, [pc, #596]	; (8005324 <main+0x324>)
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	4a99      	ldr	r2, [pc, #612]	; (8005338 <main+0x338>)
 80050d4:	6013      	str	r3, [r2, #0]
	 	  receiver_input_channel_6 = ch[5]; //sw right
 80050d6:	4b93      	ldr	r3, [pc, #588]	; (8005324 <main+0x324>)
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	4a98      	ldr	r2, [pc, #608]	; (800533c <main+0x33c>)
 80050dc:	6013      	str	r3, [r2, #0]
	 	 if(updateMPU(&mpu)==1){
 80050de:	488f      	ldr	r0, [pc, #572]	; (800531c <main+0x31c>)
 80050e0:	f7fc f8f2 	bl	80012c8 <updateMPU>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d139      	bne.n	800515e <main+0x15e>
	 			  gyro_x = mpu.g[0]-2.53;
 80050ea:	4b8c      	ldr	r3, [pc, #560]	; (800531c <main+0x31c>)
 80050ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fb f992 	bl	8000418 <__aeabi_f2d>
 80050f4:	a37a      	add	r3, pc, #488	; (adr r3, 80052e0 <main+0x2e0>)
 80050f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fa:	f7fb f82d 	bl	8000158 <__aeabi_dsub>
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	4610      	mov	r0, r2
 8005104:	4619      	mov	r1, r3
 8005106:	f7fb fc8f 	bl	8000a28 <__aeabi_d2iz>
 800510a:	4603      	mov	r3, r0
 800510c:	4a8c      	ldr	r2, [pc, #560]	; (8005340 <main+0x340>)
 800510e:	6013      	str	r3, [r2, #0]
	 			  gyro_y = mpu.g[1]-(-1.95);
 8005110:	4b82      	ldr	r3, [pc, #520]	; (800531c <main+0x31c>)
 8005112:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005114:	4618      	mov	r0, r3
 8005116:	f7fb f97f 	bl	8000418 <__aeabi_f2d>
 800511a:	a373      	add	r3, pc, #460	; (adr r3, 80052e8 <main+0x2e8>)
 800511c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005120:	f7fb f81c 	bl	800015c <__adddf3>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4610      	mov	r0, r2
 800512a:	4619      	mov	r1, r3
 800512c:	f7fb fc7c 	bl	8000a28 <__aeabi_d2iz>
 8005130:	4603      	mov	r3, r0
 8005132:	4a84      	ldr	r2, [pc, #528]	; (8005344 <main+0x344>)
 8005134:	6013      	str	r3, [r2, #0]
	 			  gyro_z = mpu.g[2]-(-0.06);
 8005136:	4b79      	ldr	r3, [pc, #484]	; (800531c <main+0x31c>)
 8005138:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800513c:	4618      	mov	r0, r3
 800513e:	f7fb f96b 	bl	8000418 <__aeabi_f2d>
 8005142:	a36b      	add	r3, pc, #428	; (adr r3, 80052f0 <main+0x2f0>)
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	f7fb f808 	bl	800015c <__adddf3>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	4610      	mov	r0, r2
 8005152:	4619      	mov	r1, r3
 8005154:	f7fb fc68 	bl	8000a28 <__aeabi_d2iz>
 8005158:	4603      	mov	r3, r0
 800515a:	4a7b      	ldr	r2, [pc, #492]	; (8005348 <main+0x348>)
 800515c:	6013      	str	r3, [r2, #0]
	 			 // HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
	 	 }
	 	gyro_pitch_input 	= ( gyro_pitch_input * 0.7 ) + (float)( gyro_y  * 0.3);
 800515e:	4b7b      	ldr	r3, [pc, #492]	; (800534c <main+0x34c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f7fb f958 	bl	8000418 <__aeabi_f2d>
 8005168:	a363      	add	r3, pc, #396	; (adr r3, 80052f8 <main+0x2f8>)
 800516a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516e:	f7fb f9ab 	bl	80004c8 <__aeabi_dmul>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	4614      	mov	r4, r2
 8005178:	461d      	mov	r5, r3
 800517a:	4b72      	ldr	r3, [pc, #456]	; (8005344 <main+0x344>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4618      	mov	r0, r3
 8005180:	f7fb f938 	bl	80003f4 <__aeabi_i2d>
 8005184:	a35e      	add	r3, pc, #376	; (adr r3, 8005300 <main+0x300>)
 8005186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518a:	f7fb f99d 	bl	80004c8 <__aeabi_dmul>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	4610      	mov	r0, r2
 8005194:	4619      	mov	r1, r3
 8005196:	f7fb fc8f 	bl	8000ab8 <__aeabi_d2f>
 800519a:	4603      	mov	r3, r0
 800519c:	4618      	mov	r0, r3
 800519e:	f7fb f93b 	bl	8000418 <__aeabi_f2d>
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4620      	mov	r0, r4
 80051a8:	4629      	mov	r1, r5
 80051aa:	f7fa ffd7 	bl	800015c <__adddf3>
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	4610      	mov	r0, r2
 80051b4:	4619      	mov	r1, r3
 80051b6:	f7fb fc7f 	bl	8000ab8 <__aeabi_d2f>
 80051ba:	4603      	mov	r3, r0
 80051bc:	4a63      	ldr	r2, [pc, #396]	; (800534c <main+0x34c>)
 80051be:	6013      	str	r3, [r2, #0]
	 	gyro_roll_input 	= ( gyro_roll_input * 0.7 ) + (float)( gyro_x  * 0.3);
 80051c0:	4b63      	ldr	r3, [pc, #396]	; (8005350 <main+0x350>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7fb f927 	bl	8000418 <__aeabi_f2d>
 80051ca:	a34b      	add	r3, pc, #300	; (adr r3, 80052f8 <main+0x2f8>)
 80051cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d0:	f7fb f97a 	bl	80004c8 <__aeabi_dmul>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	4614      	mov	r4, r2
 80051da:	461d      	mov	r5, r3
 80051dc:	4b58      	ldr	r3, [pc, #352]	; (8005340 <main+0x340>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7fb f907 	bl	80003f4 <__aeabi_i2d>
 80051e6:	a346      	add	r3, pc, #280	; (adr r3, 8005300 <main+0x300>)
 80051e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ec:	f7fb f96c 	bl	80004c8 <__aeabi_dmul>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	4610      	mov	r0, r2
 80051f6:	4619      	mov	r1, r3
 80051f8:	f7fb fc5e 	bl	8000ab8 <__aeabi_d2f>
 80051fc:	4603      	mov	r3, r0
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fb f90a 	bl	8000418 <__aeabi_f2d>
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	4620      	mov	r0, r4
 800520a:	4629      	mov	r1, r5
 800520c:	f7fa ffa6 	bl	800015c <__adddf3>
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	4610      	mov	r0, r2
 8005216:	4619      	mov	r1, r3
 8005218:	f7fb fc4e 	bl	8000ab8 <__aeabi_d2f>
 800521c:	4603      	mov	r3, r0
 800521e:	4a4c      	ldr	r2, [pc, #304]	; (8005350 <main+0x350>)
 8005220:	6013      	str	r3, [r2, #0]
	 	gyro_yaw_input 	= ( gyro_yaw_input * 0.7 ) + (float)( gyro_z  * 0.3);
 8005222:	4b4c      	ldr	r3, [pc, #304]	; (8005354 <main+0x354>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f7fb f8f6 	bl	8000418 <__aeabi_f2d>
 800522c:	a332      	add	r3, pc, #200	; (adr r3, 80052f8 <main+0x2f8>)
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	f7fb f949 	bl	80004c8 <__aeabi_dmul>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4614      	mov	r4, r2
 800523c:	461d      	mov	r5, r3
 800523e:	4b42      	ldr	r3, [pc, #264]	; (8005348 <main+0x348>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4618      	mov	r0, r3
 8005244:	f7fb f8d6 	bl	80003f4 <__aeabi_i2d>
 8005248:	a32d      	add	r3, pc, #180	; (adr r3, 8005300 <main+0x300>)
 800524a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524e:	f7fb f93b 	bl	80004c8 <__aeabi_dmul>
 8005252:	4602      	mov	r2, r0
 8005254:	460b      	mov	r3, r1
 8005256:	4610      	mov	r0, r2
 8005258:	4619      	mov	r1, r3
 800525a:	f7fb fc2d 	bl	8000ab8 <__aeabi_d2f>
 800525e:	4603      	mov	r3, r0
 8005260:	4618      	mov	r0, r3
 8005262:	f7fb f8d9 	bl	8000418 <__aeabi_f2d>
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	4620      	mov	r0, r4
 800526c:	4629      	mov	r1, r5
 800526e:	f7fa ff75 	bl	800015c <__adddf3>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4610      	mov	r0, r2
 8005278:	4619      	mov	r1, r3
 800527a:	f7fb fc1d 	bl	8000ab8 <__aeabi_d2f>
 800527e:	4603      	mov	r3, r0
 8005280:	4a34      	ldr	r2, [pc, #208]	; (8005354 <main+0x354>)
 8005282:	6013      	str	r3, [r2, #0]

	 	angle_pitch_acc = mpu.rpy[1]-3.0;		// -1
 8005284:	4b25      	ldr	r3, [pc, #148]	; (800531c <main+0x31c>)
 8005286:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800528a:	4933      	ldr	r1, [pc, #204]	; (8005358 <main+0x358>)
 800528c:	4618      	mov	r0, r3
 800528e:	f7fb fc67 	bl	8000b60 <__aeabi_fsub>
 8005292:	4603      	mov	r3, r0
 8005294:	461a      	mov	r2, r3
 8005296:	4b31      	ldr	r3, [pc, #196]	; (800535c <main+0x35c>)
 8005298:	601a      	str	r2, [r3, #0]
	 	angle_roll_acc =mpu.rpy[0]+0.5 ;		// -2.5
 800529a:	4b20      	ldr	r3, [pc, #128]	; (800531c <main+0x31c>)
 800529c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80052a0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7fb fc5d 	bl	8000b64 <__addsf3>
 80052aa:	4603      	mov	r3, r0
 80052ac:	461a      	mov	r2, r3
 80052ae:	4b2c      	ldr	r3, [pc, #176]	; (8005360 <main+0x360>)
 80052b0:	601a      	str	r2, [r3, #0]
	 	angle_yaw_acc = mpu.rpy[2];
 80052b2:	4b1a      	ldr	r3, [pc, #104]	; (800531c <main+0x31c>)
 80052b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80052b8:	4a2a      	ldr	r2, [pc, #168]	; (8005364 <main+0x364>)
 80052ba:	6013      	str	r3, [r2, #0]
	 	//angle_yaw = angle_yaw_acc;

	 	if ( set_gyro_angle ) {
 80052bc:	4b2a      	ldr	r3, [pc, #168]	; (8005368 <main+0x368>)
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 80db 	beq.w	800547c <main+0x47c>
	 		angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004;
 80052c6:	4b29      	ldr	r3, [pc, #164]	; (800536c <main+0x36c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fb f8a4 	bl	8000418 <__aeabi_f2d>
 80052d0:	a30d      	add	r3, pc, #52	; (adr r3, 8005308 <main+0x308>)
 80052d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d6:	f7fb f8f7 	bl	80004c8 <__aeabi_dmul>
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	e047      	b.n	8005370 <main+0x370>
 80052e0:	a3d70a3d 	.word	0xa3d70a3d
 80052e4:	40043d70 	.word	0x40043d70
 80052e8:	33333333 	.word	0x33333333
 80052ec:	3fff3333 	.word	0x3fff3333
 80052f0:	eb851eb8 	.word	0xeb851eb8
 80052f4:	3faeb851 	.word	0x3faeb851
 80052f8:	66666666 	.word	0x66666666
 80052fc:	3fe66666 	.word	0x3fe66666
 8005300:	33333333 	.word	0x33333333
 8005304:	3fd33333 	.word	0x3fd33333
 8005308:	23a29c78 	.word	0x23a29c78
 800530c:	3feffcb9 	.word	0x3feffcb9
 8005310:	20000394 	.word	0x20000394
 8005314:	20000304 	.word	0x20000304
 8005318:	2000034c 	.word	0x2000034c
 800531c:	20000144 	.word	0x20000144
 8005320:	20000220 	.word	0x20000220
 8005324:	2000011c 	.word	0x2000011c
 8005328:	20000204 	.word	0x20000204
 800532c:	20000208 	.word	0x20000208
 8005330:	2000020c 	.word	0x2000020c
 8005334:	20000210 	.word	0x20000210
 8005338:	20000214 	.word	0x20000214
 800533c:	20000218 	.word	0x20000218
 8005340:	20000224 	.word	0x20000224
 8005344:	20000228 	.word	0x20000228
 8005348:	2000022c 	.word	0x2000022c
 800534c:	20000260 	.word	0x20000260
 8005350:	2000025c 	.word	0x2000025c
 8005354:	20000264 	.word	0x20000264
 8005358:	40400000 	.word	0x40400000
 800535c:	2000024c 	.word	0x2000024c
 8005360:	20000248 	.word	0x20000248
 8005364:	20000250 	.word	0x20000250
 8005368:	20000118 	.word	0x20000118
 800536c:	20000234 	.word	0x20000234
 8005370:	4614      	mov	r4, r2
 8005372:	461d      	mov	r5, r3
 8005374:	4b3c      	ldr	r3, [pc, #240]	; (8005468 <main+0x468>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4618      	mov	r0, r3
 800537a:	f7fb f84d 	bl	8000418 <__aeabi_f2d>
 800537e:	a332      	add	r3, pc, #200	; (adr r3, 8005448 <main+0x448>)
 8005380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005384:	f7fb f8a0 	bl	80004c8 <__aeabi_dmul>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4620      	mov	r0, r4
 800538e:	4629      	mov	r1, r5
 8005390:	f7fa fee4 	bl	800015c <__adddf3>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4610      	mov	r0, r2
 800539a:	4619      	mov	r1, r3
 800539c:	f7fb fb8c 	bl	8000ab8 <__aeabi_d2f>
 80053a0:	4603      	mov	r3, r0
 80053a2:	4a32      	ldr	r2, [pc, #200]	; (800546c <main+0x46c>)
 80053a4:	6013      	str	r3, [r2, #0]
	 		angle_roll = angle_roll * 0.9996 + angle_roll_acc * 0.0004;
 80053a6:	4b32      	ldr	r3, [pc, #200]	; (8005470 <main+0x470>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fb f834 	bl	8000418 <__aeabi_f2d>
 80053b0:	a327      	add	r3, pc, #156	; (adr r3, 8005450 <main+0x450>)
 80053b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b6:	f7fb f887 	bl	80004c8 <__aeabi_dmul>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	4614      	mov	r4, r2
 80053c0:	461d      	mov	r5, r3
 80053c2:	4b2c      	ldr	r3, [pc, #176]	; (8005474 <main+0x474>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7fb f826 	bl	8000418 <__aeabi_f2d>
 80053cc:	a31e      	add	r3, pc, #120	; (adr r3, 8005448 <main+0x448>)
 80053ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d2:	f7fb f879 	bl	80004c8 <__aeabi_dmul>
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	4620      	mov	r0, r4
 80053dc:	4629      	mov	r1, r5
 80053de:	f7fa febd 	bl	800015c <__adddf3>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	4610      	mov	r0, r2
 80053e8:	4619      	mov	r1, r3
 80053ea:	f7fb fb65 	bl	8000ab8 <__aeabi_d2f>
 80053ee:	4603      	mov	r3, r0
 80053f0:	4a1f      	ldr	r2, [pc, #124]	; (8005470 <main+0x470>)
 80053f2:	6013      	str	r3, [r2, #0]
	 		angle_yaw = angle_yaw*0.996 + angle_roll_acc * 0.004;
 80053f4:	4b20      	ldr	r3, [pc, #128]	; (8005478 <main+0x478>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7fb f80d 	bl	8000418 <__aeabi_f2d>
 80053fe:	a316      	add	r3, pc, #88	; (adr r3, 8005458 <main+0x458>)
 8005400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005404:	f7fb f860 	bl	80004c8 <__aeabi_dmul>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	4614      	mov	r4, r2
 800540e:	461d      	mov	r5, r3
 8005410:	4b18      	ldr	r3, [pc, #96]	; (8005474 <main+0x474>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4618      	mov	r0, r3
 8005416:	f7fa ffff 	bl	8000418 <__aeabi_f2d>
 800541a:	a311      	add	r3, pc, #68	; (adr r3, 8005460 <main+0x460>)
 800541c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005420:	f7fb f852 	bl	80004c8 <__aeabi_dmul>
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	4620      	mov	r0, r4
 800542a:	4629      	mov	r1, r5
 800542c:	f7fa fe96 	bl	800015c <__adddf3>
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	4610      	mov	r0, r2
 8005436:	4619      	mov	r1, r3
 8005438:	f7fb fb3e 	bl	8000ab8 <__aeabi_d2f>
 800543c:	4603      	mov	r3, r0
 800543e:	4a0e      	ldr	r2, [pc, #56]	; (8005478 <main+0x478>)
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	e02a      	b.n	800549a <main+0x49a>
 8005444:	f3af 8000 	nop.w
 8005448:	eb1c432d 	.word	0xeb1c432d
 800544c:	3f3a36e2 	.word	0x3f3a36e2
 8005450:	23a29c78 	.word	0x23a29c78
 8005454:	3feffcb9 	.word	0x3feffcb9
 8005458:	645a1cac 	.word	0x645a1cac
 800545c:	3fefdf3b 	.word	0x3fefdf3b
 8005460:	d2f1a9fc 	.word	0xd2f1a9fc
 8005464:	3f70624d 	.word	0x3f70624d
 8005468:	2000024c 	.word	0x2000024c
 800546c:	20000234 	.word	0x20000234
 8005470:	20000230 	.word	0x20000230
 8005474:	20000248 	.word	0x20000248
 8005478:	20000238 	.word	0x20000238

	 	}
	 	else{
	 		angle_pitch = angle_pitch_acc;
 800547c:	4b8e      	ldr	r3, [pc, #568]	; (80056b8 <main+0x6b8>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a8e      	ldr	r2, [pc, #568]	; (80056bc <main+0x6bc>)
 8005482:	6013      	str	r3, [r2, #0]
	 		angle_roll = angle_roll_acc;
 8005484:	4b8e      	ldr	r3, [pc, #568]	; (80056c0 <main+0x6c0>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a8e      	ldr	r2, [pc, #568]	; (80056c4 <main+0x6c4>)
 800548a:	6013      	str	r3, [r2, #0]
	 		angle_yaw = angle_yaw_acc;
 800548c:	4b8e      	ldr	r3, [pc, #568]	; (80056c8 <main+0x6c8>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a8e      	ldr	r2, [pc, #568]	; (80056cc <main+0x6cc>)
 8005492:	6013      	str	r3, [r2, #0]
	 		set_gyro_angle = true;
 8005494:	4b8e      	ldr	r3, [pc, #568]	; (80056d0 <main+0x6d0>)
 8005496:	2201      	movs	r2, #1
 8005498:	701a      	strb	r2, [r3, #0]
	 	}
	 		  angle_pitch_output = angle_pitch_output * 0.9 + angle_pitch * 0.1;
 800549a:	4b8e      	ldr	r3, [pc, #568]	; (80056d4 <main+0x6d4>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4618      	mov	r0, r3
 80054a0:	f7fa ffba 	bl	8000418 <__aeabi_f2d>
 80054a4:	a380      	add	r3, pc, #512	; (adr r3, 80056a8 <main+0x6a8>)
 80054a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054aa:	f7fb f80d 	bl	80004c8 <__aeabi_dmul>
 80054ae:	4602      	mov	r2, r0
 80054b0:	460b      	mov	r3, r1
 80054b2:	4614      	mov	r4, r2
 80054b4:	461d      	mov	r5, r3
 80054b6:	4b81      	ldr	r3, [pc, #516]	; (80056bc <main+0x6bc>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fa ffac 	bl	8000418 <__aeabi_f2d>
 80054c0:	a37b      	add	r3, pc, #492	; (adr r3, 80056b0 <main+0x6b0>)
 80054c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c6:	f7fa ffff 	bl	80004c8 <__aeabi_dmul>
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	4620      	mov	r0, r4
 80054d0:	4629      	mov	r1, r5
 80054d2:	f7fa fe43 	bl	800015c <__adddf3>
 80054d6:	4602      	mov	r2, r0
 80054d8:	460b      	mov	r3, r1
 80054da:	4610      	mov	r0, r2
 80054dc:	4619      	mov	r1, r3
 80054de:	f7fb faeb 	bl	8000ab8 <__aeabi_d2f>
 80054e2:	4603      	mov	r3, r0
 80054e4:	4a7b      	ldr	r2, [pc, #492]	; (80056d4 <main+0x6d4>)
 80054e6:	6013      	str	r3, [r2, #0]
	 		  angle_roll_output = angle_roll_output * 0.9 + angle_roll * 0.1;
 80054e8:	4b7b      	ldr	r3, [pc, #492]	; (80056d8 <main+0x6d8>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7fa ff93 	bl	8000418 <__aeabi_f2d>
 80054f2:	a36d      	add	r3, pc, #436	; (adr r3, 80056a8 <main+0x6a8>)
 80054f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f8:	f7fa ffe6 	bl	80004c8 <__aeabi_dmul>
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	4614      	mov	r4, r2
 8005502:	461d      	mov	r5, r3
 8005504:	4b6f      	ldr	r3, [pc, #444]	; (80056c4 <main+0x6c4>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4618      	mov	r0, r3
 800550a:	f7fa ff85 	bl	8000418 <__aeabi_f2d>
 800550e:	a368      	add	r3, pc, #416	; (adr r3, 80056b0 <main+0x6b0>)
 8005510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005514:	f7fa ffd8 	bl	80004c8 <__aeabi_dmul>
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	4620      	mov	r0, r4
 800551e:	4629      	mov	r1, r5
 8005520:	f7fa fe1c 	bl	800015c <__adddf3>
 8005524:	4602      	mov	r2, r0
 8005526:	460b      	mov	r3, r1
 8005528:	4610      	mov	r0, r2
 800552a:	4619      	mov	r1, r3
 800552c:	f7fb fac4 	bl	8000ab8 <__aeabi_d2f>
 8005530:	4603      	mov	r3, r0
 8005532:	4a69      	ldr	r2, [pc, #420]	; (80056d8 <main+0x6d8>)
 8005534:	6013      	str	r3, [r2, #0]
	 		  angle_yaw_output = angle_yaw_output * 0.9 + angle_yaw * 0.1;
 8005536:	4b69      	ldr	r3, [pc, #420]	; (80056dc <main+0x6dc>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4618      	mov	r0, r3
 800553c:	f7fa ff6c 	bl	8000418 <__aeabi_f2d>
 8005540:	a359      	add	r3, pc, #356	; (adr r3, 80056a8 <main+0x6a8>)
 8005542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005546:	f7fa ffbf 	bl	80004c8 <__aeabi_dmul>
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	4614      	mov	r4, r2
 8005550:	461d      	mov	r5, r3
 8005552:	4b5e      	ldr	r3, [pc, #376]	; (80056cc <main+0x6cc>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4618      	mov	r0, r3
 8005558:	f7fa ff5e 	bl	8000418 <__aeabi_f2d>
 800555c:	a354      	add	r3, pc, #336	; (adr r3, 80056b0 <main+0x6b0>)
 800555e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005562:	f7fa ffb1 	bl	80004c8 <__aeabi_dmul>
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	4620      	mov	r0, r4
 800556c:	4629      	mov	r1, r5
 800556e:	f7fa fdf5 	bl	800015c <__adddf3>
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	4610      	mov	r0, r2
 8005578:	4619      	mov	r1, r3
 800557a:	f7fb fa9d 	bl	8000ab8 <__aeabi_d2f>
 800557e:	4603      	mov	r3, r0
 8005580:	4a56      	ldr	r2, [pc, #344]	; (80056dc <main+0x6dc>)
 8005582:	6013      	str	r3, [r2, #0]

	 		  pitch_level_adjust = angle_pitch_output * 15;
 8005584:	4b53      	ldr	r3, [pc, #332]	; (80056d4 <main+0x6d4>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4955      	ldr	r1, [pc, #340]	; (80056e0 <main+0x6e0>)
 800558a:	4618      	mov	r0, r3
 800558c:	f7fb fbf2 	bl	8000d74 <__aeabi_fmul>
 8005590:	4603      	mov	r3, r0
 8005592:	461a      	mov	r2, r3
 8005594:	4b53      	ldr	r3, [pc, #332]	; (80056e4 <main+0x6e4>)
 8005596:	601a      	str	r2, [r3, #0]
	 		  roll_level_adjust = angle_roll_output * 15;
 8005598:	4b4f      	ldr	r3, [pc, #316]	; (80056d8 <main+0x6d8>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4950      	ldr	r1, [pc, #320]	; (80056e0 <main+0x6e0>)
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fb fbe8 	bl	8000d74 <__aeabi_fmul>
 80055a4:	4603      	mov	r3, r0
 80055a6:	461a      	mov	r2, r3
 80055a8:	4b4f      	ldr	r3, [pc, #316]	; (80056e8 <main+0x6e8>)
 80055aa:	601a      	str	r2, [r3, #0]

	 		  if ( !auto_level ){
 80055ac:	4b4f      	ldr	r3, [pc, #316]	; (80056ec <main+0x6ec>)
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	f083 0301 	eor.w	r3, r3, #1
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d007      	beq.n	80055ca <main+0x5ca>
	 			  pitch_level_adjust =0;
 80055ba:	4b4a      	ldr	r3, [pc, #296]	; (80056e4 <main+0x6e4>)
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	601a      	str	r2, [r3, #0]
	 			  roll_level_adjust =0;
 80055c2:	4b49      	ldr	r3, [pc, #292]	; (80056e8 <main+0x6e8>)
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	601a      	str	r2, [r3, #0]
	 		  }


	 		  if ( receiver_input_channel_1 < 1050 && receiver_input_channel_4 < 1050 ) start =1;
 80055ca:	4b49      	ldr	r3, [pc, #292]	; (80056f0 <main+0x6f0>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f240 4219 	movw	r2, #1049	; 0x419
 80055d2:	4293      	cmp	r3, r2
 80055d4:	dc08      	bgt.n	80055e8 <main+0x5e8>
 80055d6:	4b47      	ldr	r3, [pc, #284]	; (80056f4 <main+0x6f4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f240 4219 	movw	r2, #1049	; 0x419
 80055de:	4293      	cmp	r3, r2
 80055e0:	dc02      	bgt.n	80055e8 <main+0x5e8>
 80055e2:	4b45      	ldr	r3, [pc, #276]	; (80056f8 <main+0x6f8>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	601a      	str	r2, [r3, #0]

	 		  if ( start == 1 && receiver_input_channel_1 < 1050 && receiver_input_channel_4 > 1450 ){
 80055e8:	4b43      	ldr	r3, [pc, #268]	; (80056f8 <main+0x6f8>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d126      	bne.n	800563e <main+0x63e>
 80055f0:	4b3f      	ldr	r3, [pc, #252]	; (80056f0 <main+0x6f0>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f240 4219 	movw	r2, #1049	; 0x419
 80055f8:	4293      	cmp	r3, r2
 80055fa:	dc20      	bgt.n	800563e <main+0x63e>
 80055fc:	4b3d      	ldr	r3, [pc, #244]	; (80056f4 <main+0x6f4>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f240 52aa 	movw	r2, #1450	; 0x5aa
 8005604:	4293      	cmp	r3, r2
 8005606:	dd1a      	ble.n	800563e <main+0x63e>
	 			  start = 2;
 8005608:	4b3b      	ldr	r3, [pc, #236]	; (80056f8 <main+0x6f8>)
 800560a:	2202      	movs	r2, #2
 800560c:	601a      	str	r2, [r3, #0]
	 			  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);

	 			  pid_i_mem_roll = 0;
 800560e:	4b3b      	ldr	r3, [pc, #236]	; (80056fc <main+0x6fc>)
 8005610:	f04f 0200 	mov.w	r2, #0
 8005614:	601a      	str	r2, [r3, #0]
	 			  pid_last_roll_d_error = 0;
 8005616:	4b3a      	ldr	r3, [pc, #232]	; (8005700 <main+0x700>)
 8005618:	f04f 0200 	mov.w	r2, #0
 800561c:	601a      	str	r2, [r3, #0]
	 			  pid_i_mem_pitch = 0;
 800561e:	4b39      	ldr	r3, [pc, #228]	; (8005704 <main+0x704>)
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	601a      	str	r2, [r3, #0]
	 			  pid_last_pitch_d_eroor = 0;
 8005626:	4b38      	ldr	r3, [pc, #224]	; (8005708 <main+0x708>)
 8005628:	f04f 0200 	mov.w	r2, #0
 800562c:	601a      	str	r2, [r3, #0]
	 			  pid_i_mem_yaw = 0;
 800562e:	4b37      	ldr	r3, [pc, #220]	; (800570c <main+0x70c>)
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	601a      	str	r2, [r3, #0]
	 			  pid_last_yaw_d_error = 0;
 8005636:	4b36      	ldr	r3, [pc, #216]	; (8005710 <main+0x710>)
 8005638:	f04f 0200 	mov.w	r2, #0
 800563c:	601a      	str	r2, [r3, #0]
	 		  }

	 		  if ( start == 2 && receiver_input_channel_1 < 1050 && receiver_input_channel_4 > 1950 ){
 800563e:	4b2e      	ldr	r3, [pc, #184]	; (80056f8 <main+0x6f8>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b02      	cmp	r3, #2
 8005644:	d10e      	bne.n	8005664 <main+0x664>
 8005646:	4b2a      	ldr	r3, [pc, #168]	; (80056f0 <main+0x6f0>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f240 4219 	movw	r2, #1049	; 0x419
 800564e:	4293      	cmp	r3, r2
 8005650:	dc08      	bgt.n	8005664 <main+0x664>
 8005652:	4b28      	ldr	r3, [pc, #160]	; (80056f4 <main+0x6f4>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f240 729e 	movw	r2, #1950	; 0x79e
 800565a:	4293      	cmp	r3, r2
 800565c:	dd02      	ble.n	8005664 <main+0x664>
	 			  start =0;
 800565e:	4b26      	ldr	r3, [pc, #152]	; (80056f8 <main+0x6f8>)
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]
	 			  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
	 		  }

	 		  if ( receiver_input_channel_5 > 1500 ) turning_speed = 5;
 8005664:	4b2b      	ldr	r3, [pc, #172]	; (8005714 <main+0x714>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800566c:	4293      	cmp	r3, r2
 800566e:	dd03      	ble.n	8005678 <main+0x678>
 8005670:	4b29      	ldr	r3, [pc, #164]	; (8005718 <main+0x718>)
 8005672:	4a2a      	ldr	r2, [pc, #168]	; (800571c <main+0x71c>)
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	e002      	b.n	800567e <main+0x67e>
	 		  else turning_speed = 3;
 8005678:	4b27      	ldr	r3, [pc, #156]	; (8005718 <main+0x718>)
 800567a:	4a29      	ldr	r2, [pc, #164]	; (8005720 <main+0x720>)
 800567c:	601a      	str	r2, [r3, #0]


	 		  pid_roll_setpoint =0;
 800567e:	4b29      	ldr	r3, [pc, #164]	; (8005724 <main+0x724>)
 8005680:	f04f 0200 	mov.w	r2, #0
 8005684:	601a      	str	r2, [r3, #0]
	 		  if ( receiver_input_channel_2 > 1508 ) pid_roll_setpoint = (receiver_input_channel_2 - 1508);
 8005686:	4b28      	ldr	r3, [pc, #160]	; (8005728 <main+0x728>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f240 52e4 	movw	r2, #1508	; 0x5e4
 800568e:	4293      	cmp	r3, r2
 8005690:	dd4c      	ble.n	800572c <main+0x72c>
 8005692:	4b25      	ldr	r3, [pc, #148]	; (8005728 <main+0x728>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800569a:	4618      	mov	r0, r3
 800569c:	f7fb fb16 	bl	8000ccc <__aeabi_i2f>
 80056a0:	4603      	mov	r3, r0
 80056a2:	4a20      	ldr	r2, [pc, #128]	; (8005724 <main+0x724>)
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	e051      	b.n	800574c <main+0x74c>
 80056a8:	cccccccd 	.word	0xcccccccd
 80056ac:	3feccccc 	.word	0x3feccccc
 80056b0:	9999999a 	.word	0x9999999a
 80056b4:	3fb99999 	.word	0x3fb99999
 80056b8:	2000024c 	.word	0x2000024c
 80056bc:	20000234 	.word	0x20000234
 80056c0:	20000248 	.word	0x20000248
 80056c4:	20000230 	.word	0x20000230
 80056c8:	20000250 	.word	0x20000250
 80056cc:	20000238 	.word	0x20000238
 80056d0:	20000118 	.word	0x20000118
 80056d4:	20000240 	.word	0x20000240
 80056d8:	2000023c 	.word	0x2000023c
 80056dc:	20000244 	.word	0x20000244
 80056e0:	41700000 	.word	0x41700000
 80056e4:	20000258 	.word	0x20000258
 80056e8:	20000254 	.word	0x20000254
 80056ec:	20000044 	.word	0x20000044
 80056f0:	20000204 	.word	0x20000204
 80056f4:	20000210 	.word	0x20000210
 80056f8:	200002ac 	.word	0x200002ac
 80056fc:	20000274 	.word	0x20000274
 8005700:	20000280 	.word	0x20000280
 8005704:	20000278 	.word	0x20000278
 8005708:	20000284 	.word	0x20000284
 800570c:	2000027c 	.word	0x2000027c
 8005710:	20000288 	.word	0x20000288
 8005714:	20000214 	.word	0x20000214
 8005718:	20000040 	.word	0x20000040
 800571c:	40a00000 	.word	0x40a00000
 8005720:	40400000 	.word	0x40400000
 8005724:	20000268 	.word	0x20000268
 8005728:	20000208 	.word	0x20000208
	 		  else if ( receiver_input_channel_2  < 1492 ) pid_roll_setpoint = ( receiver_input_channel_2  - 1492 );
 800572c:	4b6b      	ldr	r3, [pc, #428]	; (80058dc <main+0x8dc>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f240 52d3 	movw	r2, #1491	; 0x5d3
 8005734:	4293      	cmp	r3, r2
 8005736:	dc09      	bgt.n	800574c <main+0x74c>
 8005738:	4b68      	ldr	r3, [pc, #416]	; (80058dc <main+0x8dc>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8005740:	4618      	mov	r0, r3
 8005742:	f7fb fac3 	bl	8000ccc <__aeabi_i2f>
 8005746:	4603      	mov	r3, r0
 8005748:	4a65      	ldr	r2, [pc, #404]	; (80058e0 <main+0x8e0>)
 800574a:	6013      	str	r3, [r2, #0]

	 		  pid_roll_setpoint -= roll_level_adjust;
 800574c:	4b64      	ldr	r3, [pc, #400]	; (80058e0 <main+0x8e0>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a64      	ldr	r2, [pc, #400]	; (80058e4 <main+0x8e4>)
 8005752:	6812      	ldr	r2, [r2, #0]
 8005754:	4611      	mov	r1, r2
 8005756:	4618      	mov	r0, r3
 8005758:	f7fb fa02 	bl	8000b60 <__aeabi_fsub>
 800575c:	4603      	mov	r3, r0
 800575e:	461a      	mov	r2, r3
 8005760:	4b5f      	ldr	r3, [pc, #380]	; (80058e0 <main+0x8e0>)
 8005762:	601a      	str	r2, [r3, #0]
	 		  pid_roll_setpoint /= turning_speed;
 8005764:	4b5e      	ldr	r3, [pc, #376]	; (80058e0 <main+0x8e0>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a5f      	ldr	r2, [pc, #380]	; (80058e8 <main+0x8e8>)
 800576a:	6812      	ldr	r2, [r2, #0]
 800576c:	4611      	mov	r1, r2
 800576e:	4618      	mov	r0, r3
 8005770:	f7fb fbb4 	bl	8000edc <__aeabi_fdiv>
 8005774:	4603      	mov	r3, r0
 8005776:	461a      	mov	r2, r3
 8005778:	4b59      	ldr	r3, [pc, #356]	; (80058e0 <main+0x8e0>)
 800577a:	601a      	str	r2, [r3, #0]

	 		  pid_pitch_setpoint =0;
 800577c:	4b5b      	ldr	r3, [pc, #364]	; (80058ec <main+0x8ec>)
 800577e:	f04f 0200 	mov.w	r2, #0
 8005782:	601a      	str	r2, [r3, #0]
	 		  if ( receiver_input_channel_3 > 1508 ) pid_pitch_setpoint = ( receiver_input_channel_3 - 1508 );
 8005784:	4b5a      	ldr	r3, [pc, #360]	; (80058f0 <main+0x8f0>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f240 52e4 	movw	r2, #1508	; 0x5e4
 800578c:	4293      	cmp	r3, r2
 800578e:	dd0a      	ble.n	80057a6 <main+0x7a6>
 8005790:	4b57      	ldr	r3, [pc, #348]	; (80058f0 <main+0x8f0>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8005798:	4618      	mov	r0, r3
 800579a:	f7fb fa97 	bl	8000ccc <__aeabi_i2f>
 800579e:	4603      	mov	r3, r0
 80057a0:	4a52      	ldr	r2, [pc, #328]	; (80058ec <main+0x8ec>)
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	e00f      	b.n	80057c6 <main+0x7c6>
	 		  else if ( receiver_input_channel_3 < 1492 ) pid_pitch_setpoint = ( receiver_input_channel_3 - 1492 );
 80057a6:	4b52      	ldr	r3, [pc, #328]	; (80058f0 <main+0x8f0>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f240 52d3 	movw	r2, #1491	; 0x5d3
 80057ae:	4293      	cmp	r3, r2
 80057b0:	dc09      	bgt.n	80057c6 <main+0x7c6>
 80057b2:	4b4f      	ldr	r3, [pc, #316]	; (80058f0 <main+0x8f0>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7fb fa86 	bl	8000ccc <__aeabi_i2f>
 80057c0:	4603      	mov	r3, r0
 80057c2:	4a4a      	ldr	r2, [pc, #296]	; (80058ec <main+0x8ec>)
 80057c4:	6013      	str	r3, [r2, #0]

	 		  pid_pitch_setpoint -= pitch_level_adjust;
 80057c6:	4b49      	ldr	r3, [pc, #292]	; (80058ec <main+0x8ec>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a4a      	ldr	r2, [pc, #296]	; (80058f4 <main+0x8f4>)
 80057cc:	6812      	ldr	r2, [r2, #0]
 80057ce:	4611      	mov	r1, r2
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7fb f9c5 	bl	8000b60 <__aeabi_fsub>
 80057d6:	4603      	mov	r3, r0
 80057d8:	461a      	mov	r2, r3
 80057da:	4b44      	ldr	r3, [pc, #272]	; (80058ec <main+0x8ec>)
 80057dc:	601a      	str	r2, [r3, #0]
	 		  pid_pitch_setpoint /= turning_speed;
 80057de:	4b43      	ldr	r3, [pc, #268]	; (80058ec <main+0x8ec>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a41      	ldr	r2, [pc, #260]	; (80058e8 <main+0x8e8>)
 80057e4:	6812      	ldr	r2, [r2, #0]
 80057e6:	4611      	mov	r1, r2
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fb fb77 	bl	8000edc <__aeabi_fdiv>
 80057ee:	4603      	mov	r3, r0
 80057f0:	461a      	mov	r2, r3
 80057f2:	4b3e      	ldr	r3, [pc, #248]	; (80058ec <main+0x8ec>)
 80057f4:	601a      	str	r2, [r3, #0]


	 		  pid_yaw_setpoint =0;
 80057f6:	4b40      	ldr	r3, [pc, #256]	; (80058f8 <main+0x8f8>)
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	601a      	str	r2, [r3, #0]
	 		  if ( receiver_input_channel_1 > 1050 ){
 80057fe:	4b3f      	ldr	r3, [pc, #252]	; (80058fc <main+0x8fc>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f240 421a 	movw	r2, #1050	; 0x41a
 8005806:	4293      	cmp	r3, r2
 8005808:	dd30      	ble.n	800586c <main+0x86c>
	 			  if ( receiver_input_channel_4 > 1508 ) pid_yaw_setpoint = ( receiver_input_channel_4 - 1508 ) / turning_speed;
 800580a:	4b3d      	ldr	r3, [pc, #244]	; (8005900 <main+0x900>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8005812:	4293      	cmp	r3, r2
 8005814:	dd12      	ble.n	800583c <main+0x83c>
 8005816:	4b3a      	ldr	r3, [pc, #232]	; (8005900 <main+0x900>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800581e:	4618      	mov	r0, r3
 8005820:	f7fb fa54 	bl	8000ccc <__aeabi_i2f>
 8005824:	4602      	mov	r2, r0
 8005826:	4b30      	ldr	r3, [pc, #192]	; (80058e8 <main+0x8e8>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4619      	mov	r1, r3
 800582c:	4610      	mov	r0, r2
 800582e:	f7fb fb55 	bl	8000edc <__aeabi_fdiv>
 8005832:	4603      	mov	r3, r0
 8005834:	461a      	mov	r2, r3
 8005836:	4b30      	ldr	r3, [pc, #192]	; (80058f8 <main+0x8f8>)
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	e017      	b.n	800586c <main+0x86c>
	 			  else if ( receiver_input_channel_4 < 1492 ) pid_yaw_setpoint = ( receiver_input_channel_4 - 1492 ) / turning_speed;
 800583c:	4b30      	ldr	r3, [pc, #192]	; (8005900 <main+0x900>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f240 52d3 	movw	r2, #1491	; 0x5d3
 8005844:	4293      	cmp	r3, r2
 8005846:	dc11      	bgt.n	800586c <main+0x86c>
 8005848:	4b2d      	ldr	r3, [pc, #180]	; (8005900 <main+0x900>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8005850:	4618      	mov	r0, r3
 8005852:	f7fb fa3b 	bl	8000ccc <__aeabi_i2f>
 8005856:	4602      	mov	r2, r0
 8005858:	4b23      	ldr	r3, [pc, #140]	; (80058e8 <main+0x8e8>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4619      	mov	r1, r3
 800585e:	4610      	mov	r0, r2
 8005860:	f7fb fb3c 	bl	8000edc <__aeabi_fdiv>
 8005864:	4603      	mov	r3, r0
 8005866:	461a      	mov	r2, r3
 8005868:	4b23      	ldr	r3, [pc, #140]	; (80058f8 <main+0x8f8>)
 800586a:	601a      	str	r2, [r3, #0]
	 		  }


	 		  //roll calculation
	 		  pid_error_temp = gyro_roll_input - pid_roll_setpoint;
 800586c:	4b25      	ldr	r3, [pc, #148]	; (8005904 <main+0x904>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a1b      	ldr	r2, [pc, #108]	; (80058e0 <main+0x8e0>)
 8005872:	6812      	ldr	r2, [r2, #0]
 8005874:	4611      	mov	r1, r2
 8005876:	4618      	mov	r0, r3
 8005878:	f7fb f972 	bl	8000b60 <__aeabi_fsub>
 800587c:	4603      	mov	r3, r0
 800587e:	461a      	mov	r2, r3
 8005880:	4b21      	ldr	r3, [pc, #132]	; (8005908 <main+0x908>)
 8005882:	601a      	str	r2, [r3, #0]
	 		  pid_i_mem_roll += pid_i_gain_roll * pid_error_temp;
 8005884:	4b21      	ldr	r3, [pc, #132]	; (800590c <main+0x90c>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a1f      	ldr	r2, [pc, #124]	; (8005908 <main+0x908>)
 800588a:	6812      	ldr	r2, [r2, #0]
 800588c:	4611      	mov	r1, r2
 800588e:	4618      	mov	r0, r3
 8005890:	f7fb fa70 	bl	8000d74 <__aeabi_fmul>
 8005894:	4603      	mov	r3, r0
 8005896:	461a      	mov	r2, r3
 8005898:	4b1d      	ldr	r3, [pc, #116]	; (8005910 <main+0x910>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4619      	mov	r1, r3
 800589e:	4610      	mov	r0, r2
 80058a0:	f7fb f960 	bl	8000b64 <__addsf3>
 80058a4:	4603      	mov	r3, r0
 80058a6:	461a      	mov	r2, r3
 80058a8:	4b19      	ldr	r3, [pc, #100]	; (8005910 <main+0x910>)
 80058aa:	601a      	str	r2, [r3, #0]

	 		  if ( pid_i_mem_roll > pid_max_roll ) pid_i_mem_roll = pid_max_roll;
 80058ac:	4b19      	ldr	r3, [pc, #100]	; (8005914 <main+0x914>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7fb fa0b 	bl	8000ccc <__aeabi_i2f>
 80058b6:	4602      	mov	r2, r0
 80058b8:	4b15      	ldr	r3, [pc, #84]	; (8005910 <main+0x910>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4619      	mov	r1, r3
 80058be:	4610      	mov	r0, r2
 80058c0:	f7fb fbf6 	bl	80010b0 <__aeabi_fcmplt>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d026      	beq.n	8005918 <main+0x918>
 80058ca:	4b12      	ldr	r3, [pc, #72]	; (8005914 <main+0x914>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fb f9fc 	bl	8000ccc <__aeabi_i2f>
 80058d4:	4603      	mov	r3, r0
 80058d6:	4a0e      	ldr	r2, [pc, #56]	; (8005910 <main+0x910>)
 80058d8:	6013      	str	r3, [r2, #0]
 80058da:	e036      	b.n	800594a <main+0x94a>
 80058dc:	20000208 	.word	0x20000208
 80058e0:	20000268 	.word	0x20000268
 80058e4:	20000254 	.word	0x20000254
 80058e8:	20000040 	.word	0x20000040
 80058ec:	2000026c 	.word	0x2000026c
 80058f0:	2000020c 	.word	0x2000020c
 80058f4:	20000258 	.word	0x20000258
 80058f8:	20000270 	.word	0x20000270
 80058fc:	20000204 	.word	0x20000204
 8005900:	20000210 	.word	0x20000210
 8005904:	2000025c 	.word	0x2000025c
 8005908:	2000028c 	.word	0x2000028c
 800590c:	2000000c 	.word	0x2000000c
 8005910:	20000274 	.word	0x20000274
 8005914:	20000028 	.word	0x20000028
	 		  else if ( pid_i_mem_roll < pid_max_roll * -1 ) pid_i_mem_roll = pid_max_roll * -1;
 8005918:	4b86      	ldr	r3, [pc, #536]	; (8005b34 <main+0xb34>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	425b      	negs	r3, r3
 800591e:	4618      	mov	r0, r3
 8005920:	f7fb f9d4 	bl	8000ccc <__aeabi_i2f>
 8005924:	4602      	mov	r2, r0
 8005926:	4b84      	ldr	r3, [pc, #528]	; (8005b38 <main+0xb38>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4619      	mov	r1, r3
 800592c:	4610      	mov	r0, r2
 800592e:	f7fb fbdd 	bl	80010ec <__aeabi_fcmpgt>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d008      	beq.n	800594a <main+0x94a>
 8005938:	4b7e      	ldr	r3, [pc, #504]	; (8005b34 <main+0xb34>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	425b      	negs	r3, r3
 800593e:	4618      	mov	r0, r3
 8005940:	f7fb f9c4 	bl	8000ccc <__aeabi_i2f>
 8005944:	4603      	mov	r3, r0
 8005946:	4a7c      	ldr	r2, [pc, #496]	; (8005b38 <main+0xb38>)
 8005948:	6013      	str	r3, [r2, #0]

	 		  pid_roll_output = ( pid_p_gain_roll * pid_error_temp ) + pid_i_mem_roll + ( pid_d_gain_roll * ( pid_error_temp - pid_last_roll_d_error));
 800594a:	4b7c      	ldr	r3, [pc, #496]	; (8005b3c <main+0xb3c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a7c      	ldr	r2, [pc, #496]	; (8005b40 <main+0xb40>)
 8005950:	6812      	ldr	r2, [r2, #0]
 8005952:	4611      	mov	r1, r2
 8005954:	4618      	mov	r0, r3
 8005956:	f7fb fa0d 	bl	8000d74 <__aeabi_fmul>
 800595a:	4603      	mov	r3, r0
 800595c:	461a      	mov	r2, r3
 800595e:	4b76      	ldr	r3, [pc, #472]	; (8005b38 <main+0xb38>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4619      	mov	r1, r3
 8005964:	4610      	mov	r0, r2
 8005966:	f7fb f8fd 	bl	8000b64 <__addsf3>
 800596a:	4603      	mov	r3, r0
 800596c:	461c      	mov	r4, r3
 800596e:	4b74      	ldr	r3, [pc, #464]	; (8005b40 <main+0xb40>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a74      	ldr	r2, [pc, #464]	; (8005b44 <main+0xb44>)
 8005974:	6812      	ldr	r2, [r2, #0]
 8005976:	4611      	mov	r1, r2
 8005978:	4618      	mov	r0, r3
 800597a:	f7fb f8f1 	bl	8000b60 <__aeabi_fsub>
 800597e:	4603      	mov	r3, r0
 8005980:	461a      	mov	r2, r3
 8005982:	4b71      	ldr	r3, [pc, #452]	; (8005b48 <main+0xb48>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4619      	mov	r1, r3
 8005988:	4610      	mov	r0, r2
 800598a:	f7fb f9f3 	bl	8000d74 <__aeabi_fmul>
 800598e:	4603      	mov	r3, r0
 8005990:	4619      	mov	r1, r3
 8005992:	4620      	mov	r0, r4
 8005994:	f7fb f8e6 	bl	8000b64 <__addsf3>
 8005998:	4603      	mov	r3, r0
 800599a:	461a      	mov	r2, r3
 800599c:	4b6b      	ldr	r3, [pc, #428]	; (8005b4c <main+0xb4c>)
 800599e:	601a      	str	r2, [r3, #0]

	 		  if ( pid_roll_output > pid_max_roll ) pid_roll_output = pid_max_roll;
 80059a0:	4b64      	ldr	r3, [pc, #400]	; (8005b34 <main+0xb34>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7fb f991 	bl	8000ccc <__aeabi_i2f>
 80059aa:	4602      	mov	r2, r0
 80059ac:	4b67      	ldr	r3, [pc, #412]	; (8005b4c <main+0xb4c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4619      	mov	r1, r3
 80059b2:	4610      	mov	r0, r2
 80059b4:	f7fb fb7c 	bl	80010b0 <__aeabi_fcmplt>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d008      	beq.n	80059d0 <main+0x9d0>
 80059be:	4b5d      	ldr	r3, [pc, #372]	; (8005b34 <main+0xb34>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7fb f982 	bl	8000ccc <__aeabi_i2f>
 80059c8:	4603      	mov	r3, r0
 80059ca:	4a60      	ldr	r2, [pc, #384]	; (8005b4c <main+0xb4c>)
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	e018      	b.n	8005a02 <main+0xa02>
	 		  else if ( pid_roll_output < pid_max_roll * -1) pid_roll_output = pid_max_roll * -1;
 80059d0:	4b58      	ldr	r3, [pc, #352]	; (8005b34 <main+0xb34>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	425b      	negs	r3, r3
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fb f978 	bl	8000ccc <__aeabi_i2f>
 80059dc:	4602      	mov	r2, r0
 80059de:	4b5b      	ldr	r3, [pc, #364]	; (8005b4c <main+0xb4c>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4619      	mov	r1, r3
 80059e4:	4610      	mov	r0, r2
 80059e6:	f7fb fb81 	bl	80010ec <__aeabi_fcmpgt>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d008      	beq.n	8005a02 <main+0xa02>
 80059f0:	4b50      	ldr	r3, [pc, #320]	; (8005b34 <main+0xb34>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	425b      	negs	r3, r3
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fb f968 	bl	8000ccc <__aeabi_i2f>
 80059fc:	4603      	mov	r3, r0
 80059fe:	4a53      	ldr	r2, [pc, #332]	; (8005b4c <main+0xb4c>)
 8005a00:	6013      	str	r3, [r2, #0]

	 		  pid_last_roll_d_error = pid_error_temp;
 8005a02:	4b4f      	ldr	r3, [pc, #316]	; (8005b40 <main+0xb40>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a4f      	ldr	r2, [pc, #316]	; (8005b44 <main+0xb44>)
 8005a08:	6013      	str	r3, [r2, #0]


	 		  pid_error_temp = gyro_pitch_input - pid_pitch_setpoint;
 8005a0a:	4b51      	ldr	r3, [pc, #324]	; (8005b50 <main+0xb50>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a51      	ldr	r2, [pc, #324]	; (8005b54 <main+0xb54>)
 8005a10:	6812      	ldr	r2, [r2, #0]
 8005a12:	4611      	mov	r1, r2
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7fb f8a3 	bl	8000b60 <__aeabi_fsub>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	4b48      	ldr	r3, [pc, #288]	; (8005b40 <main+0xb40>)
 8005a20:	601a      	str	r2, [r3, #0]
	 		  pid_i_mem_pitch += pid_i_gain_pitch * pid_error_temp;
 8005a22:	4b4d      	ldr	r3, [pc, #308]	; (8005b58 <main+0xb58>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a46      	ldr	r2, [pc, #280]	; (8005b40 <main+0xb40>)
 8005a28:	6812      	ldr	r2, [r2, #0]
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fb f9a1 	bl	8000d74 <__aeabi_fmul>
 8005a32:	4603      	mov	r3, r0
 8005a34:	461a      	mov	r2, r3
 8005a36:	4b49      	ldr	r3, [pc, #292]	; (8005b5c <main+0xb5c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	f7fb f891 	bl	8000b64 <__addsf3>
 8005a42:	4603      	mov	r3, r0
 8005a44:	461a      	mov	r2, r3
 8005a46:	4b45      	ldr	r3, [pc, #276]	; (8005b5c <main+0xb5c>)
 8005a48:	601a      	str	r2, [r3, #0]

	 		  if ( pid_i_mem_pitch > pid_max_pitch ) pid_i_mem_pitch = pid_max_pitch;
 8005a4a:	4b45      	ldr	r3, [pc, #276]	; (8005b60 <main+0xb60>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fb f93c 	bl	8000ccc <__aeabi_i2f>
 8005a54:	4602      	mov	r2, r0
 8005a56:	4b41      	ldr	r3, [pc, #260]	; (8005b5c <main+0xb5c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	f7fb fb27 	bl	80010b0 <__aeabi_fcmplt>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d008      	beq.n	8005a7a <main+0xa7a>
 8005a68:	4b3d      	ldr	r3, [pc, #244]	; (8005b60 <main+0xb60>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7fb f92d 	bl	8000ccc <__aeabi_i2f>
 8005a72:	4603      	mov	r3, r0
 8005a74:	4a39      	ldr	r2, [pc, #228]	; (8005b5c <main+0xb5c>)
 8005a76:	6013      	str	r3, [r2, #0]
 8005a78:	e018      	b.n	8005aac <main+0xaac>
	 		  else if ( pid_i_mem_pitch < pid_max_pitch * -1 ) pid_i_mem_pitch = pid_max_pitch * -1;
 8005a7a:	4b39      	ldr	r3, [pc, #228]	; (8005b60 <main+0xb60>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	425b      	negs	r3, r3
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7fb f923 	bl	8000ccc <__aeabi_i2f>
 8005a86:	4602      	mov	r2, r0
 8005a88:	4b34      	ldr	r3, [pc, #208]	; (8005b5c <main+0xb5c>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4610      	mov	r0, r2
 8005a90:	f7fb fb2c 	bl	80010ec <__aeabi_fcmpgt>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d008      	beq.n	8005aac <main+0xaac>
 8005a9a:	4b31      	ldr	r3, [pc, #196]	; (8005b60 <main+0xb60>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	425b      	negs	r3, r3
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fb f913 	bl	8000ccc <__aeabi_i2f>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	4a2c      	ldr	r2, [pc, #176]	; (8005b5c <main+0xb5c>)
 8005aaa:	6013      	str	r3, [r2, #0]

	 		  pid_pitch_output = ( pid_p_gain_pitch * pid_error_temp ) + pid_i_mem_pitch + ( pid_d_gain_pitch * ( pid_error_temp - pid_last_pitch_d_eroor));
 8005aac:	4b2d      	ldr	r3, [pc, #180]	; (8005b64 <main+0xb64>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a23      	ldr	r2, [pc, #140]	; (8005b40 <main+0xb40>)
 8005ab2:	6812      	ldr	r2, [r2, #0]
 8005ab4:	4611      	mov	r1, r2
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fb f95c 	bl	8000d74 <__aeabi_fmul>
 8005abc:	4603      	mov	r3, r0
 8005abe:	461a      	mov	r2, r3
 8005ac0:	4b26      	ldr	r3, [pc, #152]	; (8005b5c <main+0xb5c>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	f7fb f84c 	bl	8000b64 <__addsf3>
 8005acc:	4603      	mov	r3, r0
 8005ace:	461c      	mov	r4, r3
 8005ad0:	4b1b      	ldr	r3, [pc, #108]	; (8005b40 <main+0xb40>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a24      	ldr	r2, [pc, #144]	; (8005b68 <main+0xb68>)
 8005ad6:	6812      	ldr	r2, [r2, #0]
 8005ad8:	4611      	mov	r1, r2
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fb f840 	bl	8000b60 <__aeabi_fsub>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	4b21      	ldr	r3, [pc, #132]	; (8005b6c <main+0xb6c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4619      	mov	r1, r3
 8005aea:	4610      	mov	r0, r2
 8005aec:	f7fb f942 	bl	8000d74 <__aeabi_fmul>
 8005af0:	4603      	mov	r3, r0
 8005af2:	4619      	mov	r1, r3
 8005af4:	4620      	mov	r0, r4
 8005af6:	f7fb f835 	bl	8000b64 <__addsf3>
 8005afa:	4603      	mov	r3, r0
 8005afc:	461a      	mov	r2, r3
 8005afe:	4b1c      	ldr	r3, [pc, #112]	; (8005b70 <main+0xb70>)
 8005b00:	601a      	str	r2, [r3, #0]

	 		  if ( pid_pitch_output > pid_max_pitch ) pid_pitch_output = pid_max_pitch;
 8005b02:	4b17      	ldr	r3, [pc, #92]	; (8005b60 <main+0xb60>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7fb f8e0 	bl	8000ccc <__aeabi_i2f>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	4b18      	ldr	r3, [pc, #96]	; (8005b70 <main+0xb70>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4619      	mov	r1, r3
 8005b14:	4610      	mov	r0, r2
 8005b16:	f7fb facb 	bl	80010b0 <__aeabi_fcmplt>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d029      	beq.n	8005b74 <main+0xb74>
 8005b20:	4b0f      	ldr	r3, [pc, #60]	; (8005b60 <main+0xb60>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7fb f8d1 	bl	8000ccc <__aeabi_i2f>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	4a10      	ldr	r2, [pc, #64]	; (8005b70 <main+0xb70>)
 8005b2e:	6013      	str	r3, [r2, #0]
 8005b30:	e039      	b.n	8005ba6 <main+0xba6>
 8005b32:	bf00      	nop
 8005b34:	20000028 	.word	0x20000028
 8005b38:	20000274 	.word	0x20000274
 8005b3c:	20000008 	.word	0x20000008
 8005b40:	2000028c 	.word	0x2000028c
 8005b44:	20000280 	.word	0x20000280
 8005b48:	20000010 	.word	0x20000010
 8005b4c:	20000290 	.word	0x20000290
 8005b50:	20000260 	.word	0x20000260
 8005b54:	2000026c 	.word	0x2000026c
 8005b58:	20000018 	.word	0x20000018
 8005b5c:	20000278 	.word	0x20000278
 8005b60:	2000002c 	.word	0x2000002c
 8005b64:	20000014 	.word	0x20000014
 8005b68:	20000284 	.word	0x20000284
 8005b6c:	2000001c 	.word	0x2000001c
 8005b70:	20000294 	.word	0x20000294
	 		  else if ( pid_pitch_output < pid_max_pitch * -1 ) pid_pitch_output = pid_max_pitch * -1;
 8005b74:	4b58      	ldr	r3, [pc, #352]	; (8005cd8 <main+0xcd8>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	425b      	negs	r3, r3
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fb f8a6 	bl	8000ccc <__aeabi_i2f>
 8005b80:	4602      	mov	r2, r0
 8005b82:	4b56      	ldr	r3, [pc, #344]	; (8005cdc <main+0xcdc>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4619      	mov	r1, r3
 8005b88:	4610      	mov	r0, r2
 8005b8a:	f7fb faaf 	bl	80010ec <__aeabi_fcmpgt>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d008      	beq.n	8005ba6 <main+0xba6>
 8005b94:	4b50      	ldr	r3, [pc, #320]	; (8005cd8 <main+0xcd8>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	425b      	negs	r3, r3
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fb f896 	bl	8000ccc <__aeabi_i2f>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	4a4e      	ldr	r2, [pc, #312]	; (8005cdc <main+0xcdc>)
 8005ba4:	6013      	str	r3, [r2, #0]

	 		  pid_last_pitch_d_eroor = pid_error_temp;
 8005ba6:	4b4e      	ldr	r3, [pc, #312]	; (8005ce0 <main+0xce0>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a4e      	ldr	r2, [pc, #312]	; (8005ce4 <main+0xce4>)
 8005bac:	6013      	str	r3, [r2, #0]


	 		  pid_error_temp = gyro_yaw_input - pid_yaw_setpoint;
 8005bae:	4b4e      	ldr	r3, [pc, #312]	; (8005ce8 <main+0xce8>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a4e      	ldr	r2, [pc, #312]	; (8005cec <main+0xcec>)
 8005bb4:	6812      	ldr	r2, [r2, #0]
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fa ffd1 	bl	8000b60 <__aeabi_fsub>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	4b47      	ldr	r3, [pc, #284]	; (8005ce0 <main+0xce0>)
 8005bc4:	601a      	str	r2, [r3, #0]
	 		  pid_i_mem_yaw += pid_p_gain_yaw * pid_error_temp;
 8005bc6:	4b4a      	ldr	r3, [pc, #296]	; (8005cf0 <main+0xcf0>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a45      	ldr	r2, [pc, #276]	; (8005ce0 <main+0xce0>)
 8005bcc:	6812      	ldr	r2, [r2, #0]
 8005bce:	4611      	mov	r1, r2
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fb f8cf 	bl	8000d74 <__aeabi_fmul>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	461a      	mov	r2, r3
 8005bda:	4b46      	ldr	r3, [pc, #280]	; (8005cf4 <main+0xcf4>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4619      	mov	r1, r3
 8005be0:	4610      	mov	r0, r2
 8005be2:	f7fa ffbf 	bl	8000b64 <__addsf3>
 8005be6:	4603      	mov	r3, r0
 8005be8:	461a      	mov	r2, r3
 8005bea:	4b42      	ldr	r3, [pc, #264]	; (8005cf4 <main+0xcf4>)
 8005bec:	601a      	str	r2, [r3, #0]

	 		  if ( pid_i_mem_yaw > pid_max_yaw ) pid_i_mem_yaw = pid_max_yaw;
 8005bee:	4b42      	ldr	r3, [pc, #264]	; (8005cf8 <main+0xcf8>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fb f86a 	bl	8000ccc <__aeabi_i2f>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	4b3e      	ldr	r3, [pc, #248]	; (8005cf4 <main+0xcf4>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4610      	mov	r0, r2
 8005c02:	f7fb fa55 	bl	80010b0 <__aeabi_fcmplt>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d008      	beq.n	8005c1e <main+0xc1e>
 8005c0c:	4b3a      	ldr	r3, [pc, #232]	; (8005cf8 <main+0xcf8>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7fb f85b 	bl	8000ccc <__aeabi_i2f>
 8005c16:	4603      	mov	r3, r0
 8005c18:	4a36      	ldr	r2, [pc, #216]	; (8005cf4 <main+0xcf4>)
 8005c1a:	6013      	str	r3, [r2, #0]
 8005c1c:	e018      	b.n	8005c50 <main+0xc50>
	 		  else if ( pid_i_mem_yaw < pid_max_yaw * -1 ) pid_i_mem_yaw = pid_max_yaw * -1;
 8005c1e:	4b36      	ldr	r3, [pc, #216]	; (8005cf8 <main+0xcf8>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	425b      	negs	r3, r3
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fb f851 	bl	8000ccc <__aeabi_i2f>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	4b31      	ldr	r3, [pc, #196]	; (8005cf4 <main+0xcf4>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4619      	mov	r1, r3
 8005c32:	4610      	mov	r0, r2
 8005c34:	f7fb fa5a 	bl	80010ec <__aeabi_fcmpgt>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d008      	beq.n	8005c50 <main+0xc50>
 8005c3e:	4b2e      	ldr	r3, [pc, #184]	; (8005cf8 <main+0xcf8>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	425b      	negs	r3, r3
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7fb f841 	bl	8000ccc <__aeabi_i2f>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	4a29      	ldr	r2, [pc, #164]	; (8005cf4 <main+0xcf4>)
 8005c4e:	6013      	str	r3, [r2, #0]

	 		  pid_yaw_output = ( pid_p_gain_yaw * pid_error_temp ) + pid_i_mem_yaw + ( pid_d_gain_yaw * ( pid_error_temp - pid_last_yaw_d_error ));
 8005c50:	4b27      	ldr	r3, [pc, #156]	; (8005cf0 <main+0xcf0>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a22      	ldr	r2, [pc, #136]	; (8005ce0 <main+0xce0>)
 8005c56:	6812      	ldr	r2, [r2, #0]
 8005c58:	4611      	mov	r1, r2
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fb f88a 	bl	8000d74 <__aeabi_fmul>
 8005c60:	4603      	mov	r3, r0
 8005c62:	461a      	mov	r2, r3
 8005c64:	4b23      	ldr	r3, [pc, #140]	; (8005cf4 <main+0xcf4>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4610      	mov	r0, r2
 8005c6c:	f7fa ff7a 	bl	8000b64 <__addsf3>
 8005c70:	4603      	mov	r3, r0
 8005c72:	461c      	mov	r4, r3
 8005c74:	4b1a      	ldr	r3, [pc, #104]	; (8005ce0 <main+0xce0>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a20      	ldr	r2, [pc, #128]	; (8005cfc <main+0xcfc>)
 8005c7a:	6812      	ldr	r2, [r2, #0]
 8005c7c:	4611      	mov	r1, r2
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fa ff6e 	bl	8000b60 <__aeabi_fsub>
 8005c84:	4603      	mov	r3, r0
 8005c86:	461a      	mov	r2, r3
 8005c88:	4b1d      	ldr	r3, [pc, #116]	; (8005d00 <main+0xd00>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	4610      	mov	r0, r2
 8005c90:	f7fb f870 	bl	8000d74 <__aeabi_fmul>
 8005c94:	4603      	mov	r3, r0
 8005c96:	4619      	mov	r1, r3
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f7fa ff63 	bl	8000b64 <__addsf3>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	4b18      	ldr	r3, [pc, #96]	; (8005d04 <main+0xd04>)
 8005ca4:	601a      	str	r2, [r3, #0]

	 		  if ( pid_yaw_output > pid_max_yaw ) pid_yaw_output = pid_max_yaw;
 8005ca6:	4b14      	ldr	r3, [pc, #80]	; (8005cf8 <main+0xcf8>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fb f80e 	bl	8000ccc <__aeabi_i2f>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	4b14      	ldr	r3, [pc, #80]	; (8005d04 <main+0xd04>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	4610      	mov	r0, r2
 8005cba:	f7fb f9f9 	bl	80010b0 <__aeabi_fcmplt>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d021      	beq.n	8005d08 <main+0xd08>
 8005cc4:	4b0c      	ldr	r3, [pc, #48]	; (8005cf8 <main+0xcf8>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7fa ffff 	bl	8000ccc <__aeabi_i2f>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	4a0c      	ldr	r2, [pc, #48]	; (8005d04 <main+0xd04>)
 8005cd2:	6013      	str	r3, [r2, #0]
 8005cd4:	e031      	b.n	8005d3a <main+0xd3a>
 8005cd6:	bf00      	nop
 8005cd8:	2000002c 	.word	0x2000002c
 8005cdc:	20000294 	.word	0x20000294
 8005ce0:	2000028c 	.word	0x2000028c
 8005ce4:	20000284 	.word	0x20000284
 8005ce8:	20000264 	.word	0x20000264
 8005cec:	20000270 	.word	0x20000270
 8005cf0:	20000020 	.word	0x20000020
 8005cf4:	2000027c 	.word	0x2000027c
 8005cf8:	20000030 	.word	0x20000030
 8005cfc:	20000288 	.word	0x20000288
 8005d00:	20000024 	.word	0x20000024
 8005d04:	20000298 	.word	0x20000298
	 		  else if ( pid_yaw_output < pid_max_yaw * -1 ) pid_yaw_output = pid_max_yaw * -1;
 8005d08:	4b86      	ldr	r3, [pc, #536]	; (8005f24 <main+0xf24>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	425b      	negs	r3, r3
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fa ffdc 	bl	8000ccc <__aeabi_i2f>
 8005d14:	4602      	mov	r2, r0
 8005d16:	4b84      	ldr	r3, [pc, #528]	; (8005f28 <main+0xf28>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	f7fb f9e5 	bl	80010ec <__aeabi_fcmpgt>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d008      	beq.n	8005d3a <main+0xd3a>
 8005d28:	4b7e      	ldr	r3, [pc, #504]	; (8005f24 <main+0xf24>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	425b      	negs	r3, r3
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fa ffcc 	bl	8000ccc <__aeabi_i2f>
 8005d34:	4603      	mov	r3, r0
 8005d36:	4a7c      	ldr	r2, [pc, #496]	; (8005f28 <main+0xf28>)
 8005d38:	6013      	str	r3, [r2, #0]

	 		  pid_last_yaw_d_error = pid_error_temp;
 8005d3a:	4b7c      	ldr	r3, [pc, #496]	; (8005f2c <main+0xf2c>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a7c      	ldr	r2, [pc, #496]	; (8005f30 <main+0xf30>)
 8005d40:	6013      	str	r3, [r2, #0]

	 		  throttle = receiver_input_channel_1;
 8005d42:	4b7c      	ldr	r3, [pc, #496]	; (8005f34 <main+0xf34>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a7c      	ldr	r2, [pc, #496]	; (8005f38 <main+0xf38>)
 8005d48:	6013      	str	r3, [r2, #0]


	 		  if ( start == 2 ){
 8005d4a:	4b7c      	ldr	r3, [pc, #496]	; (8005f3c <main+0xf3c>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	f040 8106 	bne.w	8005f60 <main+0xf60>
	 			  if ( throttle > 1900 ) throttle = 1900;
 8005d54:	4b78      	ldr	r3, [pc, #480]	; (8005f38 <main+0xf38>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f240 726c 	movw	r2, #1900	; 0x76c
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	dd03      	ble.n	8005d68 <main+0xd68>
 8005d60:	4b75      	ldr	r3, [pc, #468]	; (8005f38 <main+0xf38>)
 8005d62:	f240 726c 	movw	r2, #1900	; 0x76c
 8005d66:	601a      	str	r2, [r3, #0]

	 			  esc_1 = throttle - pid_pitch_output + pid_roll_output - pid_yaw_output;        //Calculate the pulse for esc 1 (front-right - CCW).
 8005d68:	4b73      	ldr	r3, [pc, #460]	; (8005f38 <main+0xf38>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7fa ffad 	bl	8000ccc <__aeabi_i2f>
 8005d72:	4602      	mov	r2, r0
 8005d74:	4b72      	ldr	r3, [pc, #456]	; (8005f40 <main+0xf40>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4610      	mov	r0, r2
 8005d7c:	f7fa fef0 	bl	8000b60 <__aeabi_fsub>
 8005d80:	4603      	mov	r3, r0
 8005d82:	461a      	mov	r2, r3
 8005d84:	4b6f      	ldr	r3, [pc, #444]	; (8005f44 <main+0xf44>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	f7fa feea 	bl	8000b64 <__addsf3>
 8005d90:	4603      	mov	r3, r0
 8005d92:	461a      	mov	r2, r3
 8005d94:	4b64      	ldr	r3, [pc, #400]	; (8005f28 <main+0xf28>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4610      	mov	r0, r2
 8005d9c:	f7fa fee0 	bl	8000b60 <__aeabi_fsub>
 8005da0:	4603      	mov	r3, r0
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fb f9c2 	bl	800112c <__aeabi_f2iz>
 8005da8:	4603      	mov	r3, r0
 8005daa:	4a67      	ldr	r2, [pc, #412]	; (8005f48 <main+0xf48>)
 8005dac:	6013      	str	r3, [r2, #0]
	 			  esc_2 = throttle + pid_pitch_output + pid_roll_output + pid_yaw_output;        //Calculate the pulse for esc 2 (rear-right - CW).
 8005dae:	4b62      	ldr	r3, [pc, #392]	; (8005f38 <main+0xf38>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fa ff8a 	bl	8000ccc <__aeabi_i2f>
 8005db8:	4602      	mov	r2, r0
 8005dba:	4b61      	ldr	r3, [pc, #388]	; (8005f40 <main+0xf40>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	4610      	mov	r0, r2
 8005dc2:	f7fa fecf 	bl	8000b64 <__addsf3>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	461a      	mov	r2, r3
 8005dca:	4b5e      	ldr	r3, [pc, #376]	; (8005f44 <main+0xf44>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4619      	mov	r1, r3
 8005dd0:	4610      	mov	r0, r2
 8005dd2:	f7fa fec7 	bl	8000b64 <__addsf3>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	461a      	mov	r2, r3
 8005dda:	4b53      	ldr	r3, [pc, #332]	; (8005f28 <main+0xf28>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4619      	mov	r1, r3
 8005de0:	4610      	mov	r0, r2
 8005de2:	f7fa febf 	bl	8000b64 <__addsf3>
 8005de6:	4603      	mov	r3, r0
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7fb f99f 	bl	800112c <__aeabi_f2iz>
 8005dee:	4603      	mov	r3, r0
 8005df0:	4a56      	ldr	r2, [pc, #344]	; (8005f4c <main+0xf4c>)
 8005df2:	6013      	str	r3, [r2, #0]
	 			  esc_3 = throttle + pid_pitch_output - pid_roll_output - pid_yaw_output;        //Calculate the pulse for esc 3 (rear-left - CCW).
 8005df4:	4b50      	ldr	r3, [pc, #320]	; (8005f38 <main+0xf38>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fa ff67 	bl	8000ccc <__aeabi_i2f>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	4b4f      	ldr	r3, [pc, #316]	; (8005f40 <main+0xf40>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4619      	mov	r1, r3
 8005e06:	4610      	mov	r0, r2
 8005e08:	f7fa feac 	bl	8000b64 <__addsf3>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	461a      	mov	r2, r3
 8005e10:	4b4c      	ldr	r3, [pc, #304]	; (8005f44 <main+0xf44>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4619      	mov	r1, r3
 8005e16:	4610      	mov	r0, r2
 8005e18:	f7fa fea2 	bl	8000b60 <__aeabi_fsub>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	461a      	mov	r2, r3
 8005e20:	4b41      	ldr	r3, [pc, #260]	; (8005f28 <main+0xf28>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4619      	mov	r1, r3
 8005e26:	4610      	mov	r0, r2
 8005e28:	f7fa fe9a 	bl	8000b60 <__aeabi_fsub>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fb f97c 	bl	800112c <__aeabi_f2iz>
 8005e34:	4603      	mov	r3, r0
 8005e36:	4a46      	ldr	r2, [pc, #280]	; (8005f50 <main+0xf50>)
 8005e38:	6013      	str	r3, [r2, #0]
	 			  esc_4 = throttle - pid_pitch_output - pid_roll_output + pid_yaw_output;        //Calculate the pulse for esc 4 (front-left - CW).
 8005e3a:	4b3f      	ldr	r3, [pc, #252]	; (8005f38 <main+0xf38>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fa ff44 	bl	8000ccc <__aeabi_i2f>
 8005e44:	4602      	mov	r2, r0
 8005e46:	4b3e      	ldr	r3, [pc, #248]	; (8005f40 <main+0xf40>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	f7fa fe87 	bl	8000b60 <__aeabi_fsub>
 8005e52:	4603      	mov	r3, r0
 8005e54:	461a      	mov	r2, r3
 8005e56:	4b3b      	ldr	r3, [pc, #236]	; (8005f44 <main+0xf44>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	4610      	mov	r0, r2
 8005e5e:	f7fa fe7f 	bl	8000b60 <__aeabi_fsub>
 8005e62:	4603      	mov	r3, r0
 8005e64:	461a      	mov	r2, r3
 8005e66:	4b30      	ldr	r3, [pc, #192]	; (8005f28 <main+0xf28>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	4610      	mov	r0, r2
 8005e6e:	f7fa fe79 	bl	8000b64 <__addsf3>
 8005e72:	4603      	mov	r3, r0
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fb f959 	bl	800112c <__aeabi_f2iz>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	4a35      	ldr	r2, [pc, #212]	; (8005f54 <main+0xf54>)
 8005e7e:	6013      	str	r3, [r2, #0]

	 			  if ( esc_1 < min_throthle ) esc_1 = min_throthle;
 8005e80:	4b31      	ldr	r3, [pc, #196]	; (8005f48 <main+0xf48>)
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	4b34      	ldr	r3, [pc, #208]	; (8005f58 <main+0xf58>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	da03      	bge.n	8005e94 <main+0xe94>
 8005e8c:	4b32      	ldr	r3, [pc, #200]	; (8005f58 <main+0xf58>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a2d      	ldr	r2, [pc, #180]	; (8005f48 <main+0xf48>)
 8005e92:	6013      	str	r3, [r2, #0]
	 			  if ( esc_2 < min_throthle ) esc_2 = min_throthle;
 8005e94:	4b2d      	ldr	r3, [pc, #180]	; (8005f4c <main+0xf4c>)
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	4b2f      	ldr	r3, [pc, #188]	; (8005f58 <main+0xf58>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	da03      	bge.n	8005ea8 <main+0xea8>
 8005ea0:	4b2d      	ldr	r3, [pc, #180]	; (8005f58 <main+0xf58>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a29      	ldr	r2, [pc, #164]	; (8005f4c <main+0xf4c>)
 8005ea6:	6013      	str	r3, [r2, #0]
	 			  if ( esc_3 < min_throthle ) esc_3 = min_throthle;
 8005ea8:	4b29      	ldr	r3, [pc, #164]	; (8005f50 <main+0xf50>)
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	4b2a      	ldr	r3, [pc, #168]	; (8005f58 <main+0xf58>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	da03      	bge.n	8005ebc <main+0xebc>
 8005eb4:	4b28      	ldr	r3, [pc, #160]	; (8005f58 <main+0xf58>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a25      	ldr	r2, [pc, #148]	; (8005f50 <main+0xf50>)
 8005eba:	6013      	str	r3, [r2, #0]
	 			  if ( esc_4 < min_throthle ) esc_4 = min_throthle;
 8005ebc:	4b25      	ldr	r3, [pc, #148]	; (8005f54 <main+0xf54>)
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	4b25      	ldr	r3, [pc, #148]	; (8005f58 <main+0xf58>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	da03      	bge.n	8005ed0 <main+0xed0>
 8005ec8:	4b23      	ldr	r3, [pc, #140]	; (8005f58 <main+0xf58>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a21      	ldr	r2, [pc, #132]	; (8005f54 <main+0xf54>)
 8005ece:	6013      	str	r3, [r2, #0]

	 			  if ( esc_1 > max_throthle ) esc_1 = max_throthle;
 8005ed0:	4b1d      	ldr	r3, [pc, #116]	; (8005f48 <main+0xf48>)
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	4b21      	ldr	r3, [pc, #132]	; (8005f5c <main+0xf5c>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	dd03      	ble.n	8005ee4 <main+0xee4>
 8005edc:	4b1f      	ldr	r3, [pc, #124]	; (8005f5c <main+0xf5c>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a19      	ldr	r2, [pc, #100]	; (8005f48 <main+0xf48>)
 8005ee2:	6013      	str	r3, [r2, #0]
	 			  if ( esc_2 > max_throthle ) esc_2 = max_throthle;
 8005ee4:	4b19      	ldr	r3, [pc, #100]	; (8005f4c <main+0xf4c>)
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	4b1c      	ldr	r3, [pc, #112]	; (8005f5c <main+0xf5c>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	dd03      	ble.n	8005ef8 <main+0xef8>
 8005ef0:	4b1a      	ldr	r3, [pc, #104]	; (8005f5c <main+0xf5c>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a15      	ldr	r2, [pc, #84]	; (8005f4c <main+0xf4c>)
 8005ef6:	6013      	str	r3, [r2, #0]
	 			  if ( esc_3 > max_throthle ) esc_3 = max_throthle;
 8005ef8:	4b15      	ldr	r3, [pc, #84]	; (8005f50 <main+0xf50>)
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	4b17      	ldr	r3, [pc, #92]	; (8005f5c <main+0xf5c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	dd03      	ble.n	8005f0c <main+0xf0c>
 8005f04:	4b15      	ldr	r3, [pc, #84]	; (8005f5c <main+0xf5c>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a11      	ldr	r2, [pc, #68]	; (8005f50 <main+0xf50>)
 8005f0a:	6013      	str	r3, [r2, #0]
	 			  if ( esc_4 > max_throthle ) esc_4 = max_throthle;
 8005f0c:	4b11      	ldr	r3, [pc, #68]	; (8005f54 <main+0xf54>)
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	4b12      	ldr	r3, [pc, #72]	; (8005f5c <main+0xf5c>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	dd33      	ble.n	8005f80 <main+0xf80>
 8005f18:	4b10      	ldr	r3, [pc, #64]	; (8005f5c <main+0xf5c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a0d      	ldr	r2, [pc, #52]	; (8005f54 <main+0xf54>)
 8005f1e:	6013      	str	r3, [r2, #0]
 8005f20:	e02e      	b.n	8005f80 <main+0xf80>
 8005f22:	bf00      	nop
 8005f24:	20000030 	.word	0x20000030
 8005f28:	20000298 	.word	0x20000298
 8005f2c:	2000028c 	.word	0x2000028c
 8005f30:	20000288 	.word	0x20000288
 8005f34:	20000204 	.word	0x20000204
 8005f38:	2000021c 	.word	0x2000021c
 8005f3c:	200002ac 	.word	0x200002ac
 8005f40:	20000294 	.word	0x20000294
 8005f44:	20000290 	.word	0x20000290
 8005f48:	2000029c 	.word	0x2000029c
 8005f4c:	200002a0 	.word	0x200002a0
 8005f50:	200002a4 	.word	0x200002a4
 8005f54:	200002a8 	.word	0x200002a8
 8005f58:	20000034 	.word	0x20000034
 8005f5c:	20000038 	.word	0x20000038


	 		  }else{
	 			  esc_1 = disable_motor;
 8005f60:	4b1c      	ldr	r3, [pc, #112]	; (8005fd4 <main+0xfd4>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a1c      	ldr	r2, [pc, #112]	; (8005fd8 <main+0xfd8>)
 8005f66:	6013      	str	r3, [r2, #0]
	 			  esc_2 = disable_motor;
 8005f68:	4b1a      	ldr	r3, [pc, #104]	; (8005fd4 <main+0xfd4>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a1b      	ldr	r2, [pc, #108]	; (8005fdc <main+0xfdc>)
 8005f6e:	6013      	str	r3, [r2, #0]
	 			  esc_3 = disable_motor;
 8005f70:	4b18      	ldr	r3, [pc, #96]	; (8005fd4 <main+0xfd4>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a1a      	ldr	r2, [pc, #104]	; (8005fe0 <main+0xfe0>)
 8005f76:	6013      	str	r3, [r2, #0]
	 			  esc_4 = disable_motor;
 8005f78:	4b16      	ldr	r3, [pc, #88]	; (8005fd4 <main+0xfd4>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a19      	ldr	r2, [pc, #100]	; (8005fe4 <main+0xfe4>)
 8005f7e:	6013      	str	r3, [r2, #0]
	 		  }

	 		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,esc_1);
 8005f80:	4b15      	ldr	r3, [pc, #84]	; (8005fd8 <main+0xfd8>)
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	4b18      	ldr	r3, [pc, #96]	; (8005fe8 <main+0xfe8>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	635a      	str	r2, [r3, #52]	; 0x34
	 		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,esc_2);
 8005f8a:	4b14      	ldr	r3, [pc, #80]	; (8005fdc <main+0xfdc>)
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	4b16      	ldr	r3, [pc, #88]	; (8005fe8 <main+0xfe8>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	639a      	str	r2, [r3, #56]	; 0x38
	 		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,esc_3);
 8005f94:	4b12      	ldr	r3, [pc, #72]	; (8005fe0 <main+0xfe0>)
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	4b13      	ldr	r3, [pc, #76]	; (8005fe8 <main+0xfe8>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	63da      	str	r2, [r3, #60]	; 0x3c
	 		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,esc_4);
 8005f9e:	4b11      	ldr	r3, [pc, #68]	; (8005fe4 <main+0xfe4>)
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	4b11      	ldr	r3, [pc, #68]	; (8005fe8 <main+0xfe8>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	641a      	str	r2, [r3, #64]	; 0x40

	 		  if ( __HAL_TIM_GET_COUNTER(&htim3) - loop_timer > 4070 ){
 8005fa8:	4b0f      	ldr	r3, [pc, #60]	; (8005fe8 <main+0xfe8>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	 	//		  HAL_GPIO_TogglePin(led_status_GPIO_Port, led_status_Pin);
	 		  }

	 	//	  cuoi = HAL_GetTick() - dau;
	 		  while ( __HAL_TIM_GET_COUNTER(&htim2) - loop_timer < 4000 );
 8005fae:	bf00      	nop
 8005fb0:	4b0e      	ldr	r3, [pc, #56]	; (8005fec <main+0xfec>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb6:	4a0e      	ldr	r2, [pc, #56]	; (8005ff0 <main+0xff0>)
 8005fb8:	6812      	ldr	r2, [r2, #0]
 8005fba:	1a9b      	subs	r3, r3, r2
 8005fbc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8005fc0:	d3f6      	bcc.n	8005fb0 <main+0xfb0>
	 		  loop_timer = __HAL_TIM_GET_COUNTER(&htim2);
 8005fc2:	4b0a      	ldr	r3, [pc, #40]	; (8005fec <main+0xfec>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	461a      	mov	r2, r3
 8005fca:	4b09      	ldr	r3, [pc, #36]	; (8005ff0 <main+0xff0>)
 8005fcc:	601a      	str	r2, [r3, #0]
 	  receiver_input_channel_1 = ch[2]; //thr
 8005fce:	f7ff b86e 	b.w	80050ae <main+0xae>
 8005fd2:	bf00      	nop
 8005fd4:	2000003c 	.word	0x2000003c
 8005fd8:	2000029c 	.word	0x2000029c
 8005fdc:	200002a0 	.word	0x200002a0
 8005fe0:	200002a4 	.word	0x200002a4
 8005fe4:	200002a8 	.word	0x200002a8
 8005fe8:	2000034c 	.word	0x2000034c
 8005fec:	20000304 	.word	0x20000304
 8005ff0:	20000220 	.word	0x20000220

08005ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b090      	sub	sp, #64	; 0x40
 8005ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ffa:	f107 0318 	add.w	r3, r7, #24
 8005ffe:	2228      	movs	r2, #40	; 0x28
 8006000:	2100      	movs	r1, #0
 8006002:	4618      	mov	r0, r3
 8006004:	f003 fdbc 	bl	8009b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006008:	1d3b      	adds	r3, r7, #4
 800600a:	2200      	movs	r2, #0
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	605a      	str	r2, [r3, #4]
 8006010:	609a      	str	r2, [r3, #8]
 8006012:	60da      	str	r2, [r3, #12]
 8006014:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006016:	2302      	movs	r3, #2
 8006018:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800601a:	2301      	movs	r3, #1
 800601c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800601e:	2310      	movs	r3, #16
 8006020:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006022:	2302      	movs	r3, #2
 8006024:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8006026:	2300      	movs	r3, #0
 8006028:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800602a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800602e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006030:	f107 0318 	add.w	r3, r7, #24
 8006034:	4618      	mov	r0, r3
 8006036:	f002 fb65 	bl	8008704 <HAL_RCC_OscConfig>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8006040:	f000 f99e 	bl	8006380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006044:	230f      	movs	r3, #15
 8006046:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006048:	2302      	movs	r3, #2
 800604a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800604c:	2300      	movs	r3, #0
 800604e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006054:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006056:	2300      	movs	r3, #0
 8006058:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800605a:	1d3b      	adds	r3, r7, #4
 800605c:	2102      	movs	r1, #2
 800605e:	4618      	mov	r0, r3
 8006060:	f002 fdd2 	bl	8008c08 <HAL_RCC_ClockConfig>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800606a:	f000 f989 	bl	8006380 <Error_Handler>
  }
}
 800606e:	bf00      	nop
 8006070:	3740      	adds	r7, #64	; 0x40
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
	...

08006078 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800607c:	4b12      	ldr	r3, [pc, #72]	; (80060c8 <MX_I2C1_Init+0x50>)
 800607e:	4a13      	ldr	r2, [pc, #76]	; (80060cc <MX_I2C1_Init+0x54>)
 8006080:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006082:	4b11      	ldr	r3, [pc, #68]	; (80060c8 <MX_I2C1_Init+0x50>)
 8006084:	4a12      	ldr	r2, [pc, #72]	; (80060d0 <MX_I2C1_Init+0x58>)
 8006086:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006088:	4b0f      	ldr	r3, [pc, #60]	; (80060c8 <MX_I2C1_Init+0x50>)
 800608a:	2200      	movs	r2, #0
 800608c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800608e:	4b0e      	ldr	r3, [pc, #56]	; (80060c8 <MX_I2C1_Init+0x50>)
 8006090:	2200      	movs	r2, #0
 8006092:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006094:	4b0c      	ldr	r3, [pc, #48]	; (80060c8 <MX_I2C1_Init+0x50>)
 8006096:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800609a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800609c:	4b0a      	ldr	r3, [pc, #40]	; (80060c8 <MX_I2C1_Init+0x50>)
 800609e:	2200      	movs	r2, #0
 80060a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80060a2:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <MX_I2C1_Init+0x50>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80060a8:	4b07      	ldr	r3, [pc, #28]	; (80060c8 <MX_I2C1_Init+0x50>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80060ae:	4b06      	ldr	r3, [pc, #24]	; (80060c8 <MX_I2C1_Init+0x50>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80060b4:	4804      	ldr	r0, [pc, #16]	; (80060c8 <MX_I2C1_Init+0x50>)
 80060b6:	f000 fe11 	bl	8006cdc <HAL_I2C_Init>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d001      	beq.n	80060c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80060c0:	f000 f95e 	bl	8006380 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80060c4:	bf00      	nop
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	200002b0 	.word	0x200002b0
 80060cc:	40005400 	.word	0x40005400
 80060d0:	000186a0 	.word	0x000186a0

080060d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80060da:	f107 0308 	add.w	r3, r7, #8
 80060de:	2200      	movs	r2, #0
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	605a      	str	r2, [r3, #4]
 80060e4:	609a      	str	r2, [r3, #8]
 80060e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80060e8:	463b      	mov	r3, r7
 80060ea:	2200      	movs	r2, #0
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80060f0:	4b1d      	ldr	r3, [pc, #116]	; (8006168 <MX_TIM2_Init+0x94>)
 80060f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80060f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80060f8:	4b1b      	ldr	r3, [pc, #108]	; (8006168 <MX_TIM2_Init+0x94>)
 80060fa:	223f      	movs	r2, #63	; 0x3f
 80060fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060fe:	4b1a      	ldr	r3, [pc, #104]	; (8006168 <MX_TIM2_Init+0x94>)
 8006100:	2200      	movs	r2, #0
 8006102:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8006104:	4b18      	ldr	r3, [pc, #96]	; (8006168 <MX_TIM2_Init+0x94>)
 8006106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800610a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800610c:	4b16      	ldr	r3, [pc, #88]	; (8006168 <MX_TIM2_Init+0x94>)
 800610e:	2200      	movs	r2, #0
 8006110:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006112:	4b15      	ldr	r3, [pc, #84]	; (8006168 <MX_TIM2_Init+0x94>)
 8006114:	2200      	movs	r2, #0
 8006116:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006118:	4813      	ldr	r0, [pc, #76]	; (8006168 <MX_TIM2_Init+0x94>)
 800611a:	f002 feef 	bl	8008efc <HAL_TIM_Base_Init>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d001      	beq.n	8006128 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8006124:	f000 f92c 	bl	8006380 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800612c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800612e:	f107 0308 	add.w	r3, r7, #8
 8006132:	4619      	mov	r1, r3
 8006134:	480c      	ldr	r0, [pc, #48]	; (8006168 <MX_TIM2_Init+0x94>)
 8006136:	f003 f92f 	bl	8009398 <HAL_TIM_ConfigClockSource>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8006140:	f000 f91e 	bl	8006380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006144:	2300      	movs	r3, #0
 8006146:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006148:	2300      	movs	r3, #0
 800614a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800614c:	463b      	mov	r3, r7
 800614e:	4619      	mov	r1, r3
 8006150:	4805      	ldr	r0, [pc, #20]	; (8006168 <MX_TIM2_Init+0x94>)
 8006152:	f003 fc8d 	bl	8009a70 <HAL_TIMEx_MasterConfigSynchronization>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800615c:	f000 f910 	bl	8006380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006160:	bf00      	nop
 8006162:	3718      	adds	r7, #24
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	20000304 	.word	0x20000304

0800616c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b08a      	sub	sp, #40	; 0x28
 8006170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006172:	f107 0320 	add.w	r3, r7, #32
 8006176:	2200      	movs	r2, #0
 8006178:	601a      	str	r2, [r3, #0]
 800617a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800617c:	1d3b      	adds	r3, r7, #4
 800617e:	2200      	movs	r2, #0
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	605a      	str	r2, [r3, #4]
 8006184:	609a      	str	r2, [r3, #8]
 8006186:	60da      	str	r2, [r3, #12]
 8006188:	611a      	str	r2, [r3, #16]
 800618a:	615a      	str	r2, [r3, #20]
 800618c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800618e:	4b32      	ldr	r3, [pc, #200]	; (8006258 <MX_TIM3_Init+0xec>)
 8006190:	4a32      	ldr	r2, [pc, #200]	; (800625c <MX_TIM3_Init+0xf0>)
 8006192:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8006194:	4b30      	ldr	r3, [pc, #192]	; (8006258 <MX_TIM3_Init+0xec>)
 8006196:	223f      	movs	r2, #63	; 0x3f
 8006198:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800619a:	4b2f      	ldr	r3, [pc, #188]	; (8006258 <MX_TIM3_Init+0xec>)
 800619c:	2200      	movs	r2, #0
 800619e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 80061a0:	4b2d      	ldr	r3, [pc, #180]	; (8006258 <MX_TIM3_Init+0xec>)
 80061a2:	f644 6220 	movw	r2, #20000	; 0x4e20
 80061a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80061a8:	4b2b      	ldr	r3, [pc, #172]	; (8006258 <MX_TIM3_Init+0xec>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80061ae:	4b2a      	ldr	r3, [pc, #168]	; (8006258 <MX_TIM3_Init+0xec>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80061b4:	4828      	ldr	r0, [pc, #160]	; (8006258 <MX_TIM3_Init+0xec>)
 80061b6:	f002 ff3b 	bl	8009030 <HAL_TIM_PWM_Init>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80061c0:	f000 f8de 	bl	8006380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80061c4:	2300      	movs	r3, #0
 80061c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80061c8:	2300      	movs	r3, #0
 80061ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80061cc:	f107 0320 	add.w	r3, r7, #32
 80061d0:	4619      	mov	r1, r3
 80061d2:	4821      	ldr	r0, [pc, #132]	; (8006258 <MX_TIM3_Init+0xec>)
 80061d4:	f003 fc4c 	bl	8009a70 <HAL_TIMEx_MasterConfigSynchronization>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80061de:	f000 f8cf 	bl	8006380 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80061e2:	2360      	movs	r3, #96	; 0x60
 80061e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80061e6:	2300      	movs	r3, #0
 80061e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80061ea:	2300      	movs	r3, #0
 80061ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80061ee:	2300      	movs	r3, #0
 80061f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80061f2:	1d3b      	adds	r3, r7, #4
 80061f4:	2200      	movs	r2, #0
 80061f6:	4619      	mov	r1, r3
 80061f8:	4817      	ldr	r0, [pc, #92]	; (8006258 <MX_TIM3_Init+0xec>)
 80061fa:	f003 f80b 	bl	8009214 <HAL_TIM_PWM_ConfigChannel>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006204:	f000 f8bc 	bl	8006380 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006208:	1d3b      	adds	r3, r7, #4
 800620a:	2204      	movs	r2, #4
 800620c:	4619      	mov	r1, r3
 800620e:	4812      	ldr	r0, [pc, #72]	; (8006258 <MX_TIM3_Init+0xec>)
 8006210:	f003 f800 	bl	8009214 <HAL_TIM_PWM_ConfigChannel>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800621a:	f000 f8b1 	bl	8006380 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800621e:	1d3b      	adds	r3, r7, #4
 8006220:	2208      	movs	r2, #8
 8006222:	4619      	mov	r1, r3
 8006224:	480c      	ldr	r0, [pc, #48]	; (8006258 <MX_TIM3_Init+0xec>)
 8006226:	f002 fff5 	bl	8009214 <HAL_TIM_PWM_ConfigChannel>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8006230:	f000 f8a6 	bl	8006380 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006234:	1d3b      	adds	r3, r7, #4
 8006236:	220c      	movs	r2, #12
 8006238:	4619      	mov	r1, r3
 800623a:	4807      	ldr	r0, [pc, #28]	; (8006258 <MX_TIM3_Init+0xec>)
 800623c:	f002 ffea 	bl	8009214 <HAL_TIM_PWM_ConfigChannel>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8006246:	f000 f89b 	bl	8006380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800624a:	4803      	ldr	r0, [pc, #12]	; (8006258 <MX_TIM3_Init+0xec>)
 800624c:	f000 f96e 	bl	800652c <HAL_TIM_MspPostInit>

}
 8006250:	bf00      	nop
 8006252:	3728      	adds	r7, #40	; 0x28
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	2000034c 	.word	0x2000034c
 800625c:	40000400 	.word	0x40000400

08006260 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006266:	f107 0308 	add.w	r3, r7, #8
 800626a:	2200      	movs	r2, #0
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	605a      	str	r2, [r3, #4]
 8006270:	609a      	str	r2, [r3, #8]
 8006272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006274:	463b      	mov	r3, r7
 8006276:	2200      	movs	r2, #0
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800627c:	4b1d      	ldr	r3, [pc, #116]	; (80062f4 <MX_TIM4_Init+0x94>)
 800627e:	4a1e      	ldr	r2, [pc, #120]	; (80062f8 <MX_TIM4_Init+0x98>)
 8006280:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 8006282:	4b1c      	ldr	r3, [pc, #112]	; (80062f4 <MX_TIM4_Init+0x94>)
 8006284:	223f      	movs	r2, #63	; 0x3f
 8006286:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006288:	4b1a      	ldr	r3, [pc, #104]	; (80062f4 <MX_TIM4_Init+0x94>)
 800628a:	2200      	movs	r2, #0
 800628c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800628e:	4b19      	ldr	r3, [pc, #100]	; (80062f4 <MX_TIM4_Init+0x94>)
 8006290:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006294:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006296:	4b17      	ldr	r3, [pc, #92]	; (80062f4 <MX_TIM4_Init+0x94>)
 8006298:	2200      	movs	r2, #0
 800629a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800629c:	4b15      	ldr	r3, [pc, #84]	; (80062f4 <MX_TIM4_Init+0x94>)
 800629e:	2200      	movs	r2, #0
 80062a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80062a2:	4814      	ldr	r0, [pc, #80]	; (80062f4 <MX_TIM4_Init+0x94>)
 80062a4:	f002 fe2a 	bl	8008efc <HAL_TIM_Base_Init>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d001      	beq.n	80062b2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80062ae:	f000 f867 	bl	8006380 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80062b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80062b8:	f107 0308 	add.w	r3, r7, #8
 80062bc:	4619      	mov	r1, r3
 80062be:	480d      	ldr	r0, [pc, #52]	; (80062f4 <MX_TIM4_Init+0x94>)
 80062c0:	f003 f86a 	bl	8009398 <HAL_TIM_ConfigClockSource>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80062ca:	f000 f859 	bl	8006380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80062ce:	2300      	movs	r3, #0
 80062d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062d2:	2300      	movs	r3, #0
 80062d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80062d6:	463b      	mov	r3, r7
 80062d8:	4619      	mov	r1, r3
 80062da:	4806      	ldr	r0, [pc, #24]	; (80062f4 <MX_TIM4_Init+0x94>)
 80062dc:	f003 fbc8 	bl	8009a70 <HAL_TIMEx_MasterConfigSynchronization>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80062e6:	f000 f84b 	bl	8006380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80062ea:	bf00      	nop
 80062ec:	3718      	adds	r7, #24
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	20000394 	.word	0x20000394
 80062f8:	40000800 	.word	0x40000800

080062fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006302:	f107 0308 	add.w	r3, r7, #8
 8006306:	2200      	movs	r2, #0
 8006308:	601a      	str	r2, [r3, #0]
 800630a:	605a      	str	r2, [r3, #4]
 800630c:	609a      	str	r2, [r3, #8]
 800630e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006310:	4b18      	ldr	r3, [pc, #96]	; (8006374 <MX_GPIO_Init+0x78>)
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	4a17      	ldr	r2, [pc, #92]	; (8006374 <MX_GPIO_Init+0x78>)
 8006316:	f043 0304 	orr.w	r3, r3, #4
 800631a:	6193      	str	r3, [r2, #24]
 800631c:	4b15      	ldr	r3, [pc, #84]	; (8006374 <MX_GPIO_Init+0x78>)
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	f003 0304 	and.w	r3, r3, #4
 8006324:	607b      	str	r3, [r7, #4]
 8006326:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006328:	4b12      	ldr	r3, [pc, #72]	; (8006374 <MX_GPIO_Init+0x78>)
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	4a11      	ldr	r2, [pc, #68]	; (8006374 <MX_GPIO_Init+0x78>)
 800632e:	f043 0308 	orr.w	r3, r3, #8
 8006332:	6193      	str	r3, [r2, #24]
 8006334:	4b0f      	ldr	r3, [pc, #60]	; (8006374 <MX_GPIO_Init+0x78>)
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	f003 0308 	and.w	r3, r3, #8
 800633c:	603b      	str	r3, [r7, #0]
 800633e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006340:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006344:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006346:	4b0c      	ldr	r3, [pc, #48]	; (8006378 <MX_GPIO_Init+0x7c>)
 8006348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800634a:	2300      	movs	r3, #0
 800634c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800634e:	f107 0308 	add.w	r3, r7, #8
 8006352:	4619      	mov	r1, r3
 8006354:	4809      	ldr	r0, [pc, #36]	; (800637c <MX_GPIO_Init+0x80>)
 8006356:	f000 fb25 	bl	80069a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800635a:	2200      	movs	r2, #0
 800635c:	2101      	movs	r1, #1
 800635e:	2028      	movs	r0, #40	; 0x28
 8006360:	f000 fae9 	bl	8006936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006364:	2028      	movs	r0, #40	; 0x28
 8006366:	f000 fb02 	bl	800696e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800636a:	bf00      	nop
 800636c:	3718      	adds	r7, #24
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	40021000 	.word	0x40021000
 8006378:	10110000 	.word	0x10110000
 800637c:	40010c00 	.word	0x40010c00

08006380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006380:	b480      	push	{r7}
 8006382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006384:	b672      	cpsid	i
}
 8006386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006388:	e7fe      	b.n	8006388 <Error_Handler+0x8>
	...

0800638c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006392:	4b15      	ldr	r3, [pc, #84]	; (80063e8 <HAL_MspInit+0x5c>)
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	4a14      	ldr	r2, [pc, #80]	; (80063e8 <HAL_MspInit+0x5c>)
 8006398:	f043 0301 	orr.w	r3, r3, #1
 800639c:	6193      	str	r3, [r2, #24]
 800639e:	4b12      	ldr	r3, [pc, #72]	; (80063e8 <HAL_MspInit+0x5c>)
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	60bb      	str	r3, [r7, #8]
 80063a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80063aa:	4b0f      	ldr	r3, [pc, #60]	; (80063e8 <HAL_MspInit+0x5c>)
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	4a0e      	ldr	r2, [pc, #56]	; (80063e8 <HAL_MspInit+0x5c>)
 80063b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063b4:	61d3      	str	r3, [r2, #28]
 80063b6:	4b0c      	ldr	r3, [pc, #48]	; (80063e8 <HAL_MspInit+0x5c>)
 80063b8:	69db      	ldr	r3, [r3, #28]
 80063ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063be:	607b      	str	r3, [r7, #4]
 80063c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80063c2:	4b0a      	ldr	r3, [pc, #40]	; (80063ec <HAL_MspInit+0x60>)
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	4a04      	ldr	r2, [pc, #16]	; (80063ec <HAL_MspInit+0x60>)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80063de:	bf00      	nop
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bc80      	pop	{r7}
 80063e6:	4770      	bx	lr
 80063e8:	40021000 	.word	0x40021000
 80063ec:	40010000 	.word	0x40010000

080063f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b08a      	sub	sp, #40	; 0x28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063f8:	f107 0314 	add.w	r3, r7, #20
 80063fc:	2200      	movs	r2, #0
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	605a      	str	r2, [r3, #4]
 8006402:	609a      	str	r2, [r3, #8]
 8006404:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a1d      	ldr	r2, [pc, #116]	; (8006480 <HAL_I2C_MspInit+0x90>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d132      	bne.n	8006476 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006410:	4b1c      	ldr	r3, [pc, #112]	; (8006484 <HAL_I2C_MspInit+0x94>)
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	4a1b      	ldr	r2, [pc, #108]	; (8006484 <HAL_I2C_MspInit+0x94>)
 8006416:	f043 0308 	orr.w	r3, r3, #8
 800641a:	6193      	str	r3, [r2, #24]
 800641c:	4b19      	ldr	r3, [pc, #100]	; (8006484 <HAL_I2C_MspInit+0x94>)
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	f003 0308 	and.w	r3, r3, #8
 8006424:	613b      	str	r3, [r7, #16]
 8006426:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006428:	f44f 7340 	mov.w	r3, #768	; 0x300
 800642c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800642e:	2312      	movs	r3, #18
 8006430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006432:	2303      	movs	r3, #3
 8006434:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006436:	f107 0314 	add.w	r3, r7, #20
 800643a:	4619      	mov	r1, r3
 800643c:	4812      	ldr	r0, [pc, #72]	; (8006488 <HAL_I2C_MspInit+0x98>)
 800643e:	f000 fab1 	bl	80069a4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8006442:	4b12      	ldr	r3, [pc, #72]	; (800648c <HAL_I2C_MspInit+0x9c>)
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	627b      	str	r3, [r7, #36]	; 0x24
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800644e:	627b      	str	r3, [r7, #36]	; 0x24
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	f043 0302 	orr.w	r3, r3, #2
 8006456:	627b      	str	r3, [r7, #36]	; 0x24
 8006458:	4a0c      	ldr	r2, [pc, #48]	; (800648c <HAL_I2C_MspInit+0x9c>)
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800645e:	4b09      	ldr	r3, [pc, #36]	; (8006484 <HAL_I2C_MspInit+0x94>)
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	4a08      	ldr	r2, [pc, #32]	; (8006484 <HAL_I2C_MspInit+0x94>)
 8006464:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006468:	61d3      	str	r3, [r2, #28]
 800646a:	4b06      	ldr	r3, [pc, #24]	; (8006484 <HAL_I2C_MspInit+0x94>)
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006476:	bf00      	nop
 8006478:	3728      	adds	r7, #40	; 0x28
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	40005400 	.word	0x40005400
 8006484:	40021000 	.word	0x40021000
 8006488:	40010c00 	.word	0x40010c00
 800648c:	40010000 	.word	0x40010000

08006490 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a0:	d10c      	bne.n	80064bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80064a2:	4b11      	ldr	r3, [pc, #68]	; (80064e8 <HAL_TIM_Base_MspInit+0x58>)
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	4a10      	ldr	r2, [pc, #64]	; (80064e8 <HAL_TIM_Base_MspInit+0x58>)
 80064a8:	f043 0301 	orr.w	r3, r3, #1
 80064ac:	61d3      	str	r3, [r2, #28]
 80064ae:	4b0e      	ldr	r3, [pc, #56]	; (80064e8 <HAL_TIM_Base_MspInit+0x58>)
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80064ba:	e010      	b.n	80064de <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a0a      	ldr	r2, [pc, #40]	; (80064ec <HAL_TIM_Base_MspInit+0x5c>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d10b      	bne.n	80064de <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80064c6:	4b08      	ldr	r3, [pc, #32]	; (80064e8 <HAL_TIM_Base_MspInit+0x58>)
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	4a07      	ldr	r2, [pc, #28]	; (80064e8 <HAL_TIM_Base_MspInit+0x58>)
 80064cc:	f043 0304 	orr.w	r3, r3, #4
 80064d0:	61d3      	str	r3, [r2, #28]
 80064d2:	4b05      	ldr	r3, [pc, #20]	; (80064e8 <HAL_TIM_Base_MspInit+0x58>)
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	f003 0304 	and.w	r3, r3, #4
 80064da:	60bb      	str	r3, [r7, #8]
 80064dc:	68bb      	ldr	r3, [r7, #8]
}
 80064de:	bf00      	nop
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bc80      	pop	{r7}
 80064e6:	4770      	bx	lr
 80064e8:	40021000 	.word	0x40021000
 80064ec:	40000800 	.word	0x40000800

080064f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a09      	ldr	r2, [pc, #36]	; (8006524 <HAL_TIM_PWM_MspInit+0x34>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d10b      	bne.n	800651a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006502:	4b09      	ldr	r3, [pc, #36]	; (8006528 <HAL_TIM_PWM_MspInit+0x38>)
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	4a08      	ldr	r2, [pc, #32]	; (8006528 <HAL_TIM_PWM_MspInit+0x38>)
 8006508:	f043 0302 	orr.w	r3, r3, #2
 800650c:	61d3      	str	r3, [r2, #28]
 800650e:	4b06      	ldr	r3, [pc, #24]	; (8006528 <HAL_TIM_PWM_MspInit+0x38>)
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	60fb      	str	r3, [r7, #12]
 8006518:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800651a:	bf00      	nop
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	bc80      	pop	{r7}
 8006522:	4770      	bx	lr
 8006524:	40000400 	.word	0x40000400
 8006528:	40021000 	.word	0x40021000

0800652c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b088      	sub	sp, #32
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006534:	f107 0310 	add.w	r3, r7, #16
 8006538:	2200      	movs	r2, #0
 800653a:	601a      	str	r2, [r3, #0]
 800653c:	605a      	str	r2, [r3, #4]
 800653e:	609a      	str	r2, [r3, #8]
 8006540:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a1b      	ldr	r2, [pc, #108]	; (80065b4 <HAL_TIM_MspPostInit+0x88>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d12f      	bne.n	80065ac <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800654c:	4b1a      	ldr	r3, [pc, #104]	; (80065b8 <HAL_TIM_MspPostInit+0x8c>)
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	4a19      	ldr	r2, [pc, #100]	; (80065b8 <HAL_TIM_MspPostInit+0x8c>)
 8006552:	f043 0304 	orr.w	r3, r3, #4
 8006556:	6193      	str	r3, [r2, #24]
 8006558:	4b17      	ldr	r3, [pc, #92]	; (80065b8 <HAL_TIM_MspPostInit+0x8c>)
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	f003 0304 	and.w	r3, r3, #4
 8006560:	60fb      	str	r3, [r7, #12]
 8006562:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006564:	4b14      	ldr	r3, [pc, #80]	; (80065b8 <HAL_TIM_MspPostInit+0x8c>)
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	4a13      	ldr	r2, [pc, #76]	; (80065b8 <HAL_TIM_MspPostInit+0x8c>)
 800656a:	f043 0308 	orr.w	r3, r3, #8
 800656e:	6193      	str	r3, [r2, #24]
 8006570:	4b11      	ldr	r3, [pc, #68]	; (80065b8 <HAL_TIM_MspPostInit+0x8c>)
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	f003 0308 	and.w	r3, r3, #8
 8006578:	60bb      	str	r3, [r7, #8]
 800657a:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800657c:	23c0      	movs	r3, #192	; 0xc0
 800657e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006580:	2302      	movs	r3, #2
 8006582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006584:	2302      	movs	r3, #2
 8006586:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006588:	f107 0310 	add.w	r3, r7, #16
 800658c:	4619      	mov	r1, r3
 800658e:	480b      	ldr	r0, [pc, #44]	; (80065bc <HAL_TIM_MspPostInit+0x90>)
 8006590:	f000 fa08 	bl	80069a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006594:	2303      	movs	r3, #3
 8006596:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006598:	2302      	movs	r3, #2
 800659a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800659c:	2302      	movs	r3, #2
 800659e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065a0:	f107 0310 	add.w	r3, r7, #16
 80065a4:	4619      	mov	r1, r3
 80065a6:	4806      	ldr	r0, [pc, #24]	; (80065c0 <HAL_TIM_MspPostInit+0x94>)
 80065a8:	f000 f9fc 	bl	80069a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80065ac:	bf00      	nop
 80065ae:	3720      	adds	r7, #32
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	40000400 	.word	0x40000400
 80065b8:	40021000 	.word	0x40021000
 80065bc:	40010800 	.word	0x40010800
 80065c0:	40010c00 	.word	0x40010c00

080065c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80065c4:	b480      	push	{r7}
 80065c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80065c8:	e7fe      	b.n	80065c8 <NMI_Handler+0x4>

080065ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80065ca:	b480      	push	{r7}
 80065cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80065ce:	e7fe      	b.n	80065ce <HardFault_Handler+0x4>

080065d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80065d0:	b480      	push	{r7}
 80065d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80065d4:	e7fe      	b.n	80065d4 <MemManage_Handler+0x4>

080065d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80065d6:	b480      	push	{r7}
 80065d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80065da:	e7fe      	b.n	80065da <BusFault_Handler+0x4>

080065dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80065e0:	e7fe      	b.n	80065e0 <UsageFault_Handler+0x4>

080065e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80065e2:	b480      	push	{r7}
 80065e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80065e6:	bf00      	nop
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bc80      	pop	{r7}
 80065ec:	4770      	bx	lr

080065ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80065ee:	b480      	push	{r7}
 80065f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80065f2:	bf00      	nop
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bc80      	pop	{r7}
 80065f8:	4770      	bx	lr

080065fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80065fa:	b480      	push	{r7}
 80065fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80065fe:	bf00      	nop
 8006600:	46bd      	mov	sp, r7
 8006602:	bc80      	pop	{r7}
 8006604:	4770      	bx	lr

08006606 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800660a:	f000 f87d 	bl	8006708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800660e:	bf00      	nop
 8006610:	bd80      	pop	{r7, pc}

08006612 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8006616:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800661a:	f000 fb47 	bl	8006cac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800661e:	bf00      	nop
 8006620:	bd80      	pop	{r7, pc}

08006622 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006622:	b480      	push	{r7}
 8006624:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006626:	bf00      	nop
 8006628:	46bd      	mov	sp, r7
 800662a:	bc80      	pop	{r7}
 800662c:	4770      	bx	lr
	...

08006630 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006630:	f7ff fff7 	bl	8006622 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006634:	480b      	ldr	r0, [pc, #44]	; (8006664 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8006636:	490c      	ldr	r1, [pc, #48]	; (8006668 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006638:	4a0c      	ldr	r2, [pc, #48]	; (800666c <LoopFillZerobss+0x16>)
  movs r3, #0
 800663a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800663c:	e002      	b.n	8006644 <LoopCopyDataInit>

0800663e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800663e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006642:	3304      	adds	r3, #4

08006644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006648:	d3f9      	bcc.n	800663e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800664a:	4a09      	ldr	r2, [pc, #36]	; (8006670 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800664c:	4c09      	ldr	r4, [pc, #36]	; (8006674 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800664e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006650:	e001      	b.n	8006656 <LoopFillZerobss>

08006652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006654:	3204      	adds	r2, #4

08006656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006658:	d3fb      	bcc.n	8006652 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800665a:	f003 fa6d 	bl	8009b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800665e:	f7fe fccf 	bl	8005000 <main>
  bx lr
 8006662:	4770      	bx	lr
  ldr r0, =_sdata
 8006664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006668:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 800666c:	0800b120 	.word	0x0800b120
  ldr r2, =_sbss
 8006670:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8006674:	200003e0 	.word	0x200003e0

08006678 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006678:	e7fe      	b.n	8006678 <ADC1_2_IRQHandler>
	...

0800667c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006680:	4b08      	ldr	r3, [pc, #32]	; (80066a4 <HAL_Init+0x28>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a07      	ldr	r2, [pc, #28]	; (80066a4 <HAL_Init+0x28>)
 8006686:	f043 0310 	orr.w	r3, r3, #16
 800668a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800668c:	2003      	movs	r0, #3
 800668e:	f000 f947 	bl	8006920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006692:	200f      	movs	r0, #15
 8006694:	f000 f808 	bl	80066a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006698:	f7ff fe78 	bl	800638c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	40022000 	.word	0x40022000

080066a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80066b0:	4b12      	ldr	r3, [pc, #72]	; (80066fc <HAL_InitTick+0x54>)
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	4b12      	ldr	r3, [pc, #72]	; (8006700 <HAL_InitTick+0x58>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	4619      	mov	r1, r3
 80066ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066be:	fbb3 f3f1 	udiv	r3, r3, r1
 80066c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 f95f 	bl	800698a <HAL_SYSTICK_Config>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d001      	beq.n	80066d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e00e      	b.n	80066f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b0f      	cmp	r3, #15
 80066da:	d80a      	bhi.n	80066f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80066dc:	2200      	movs	r2, #0
 80066de:	6879      	ldr	r1, [r7, #4]
 80066e0:	f04f 30ff 	mov.w	r0, #4294967295
 80066e4:	f000 f927 	bl	8006936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80066e8:	4a06      	ldr	r2, [pc, #24]	; (8006704 <HAL_InitTick+0x5c>)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	e000      	b.n	80066f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	20000048 	.word	0x20000048
 8006700:	20000050 	.word	0x20000050
 8006704:	2000004c 	.word	0x2000004c

08006708 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006708:	b480      	push	{r7}
 800670a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800670c:	4b05      	ldr	r3, [pc, #20]	; (8006724 <HAL_IncTick+0x1c>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	461a      	mov	r2, r3
 8006712:	4b05      	ldr	r3, [pc, #20]	; (8006728 <HAL_IncTick+0x20>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4413      	add	r3, r2
 8006718:	4a03      	ldr	r2, [pc, #12]	; (8006728 <HAL_IncTick+0x20>)
 800671a:	6013      	str	r3, [r2, #0]
}
 800671c:	bf00      	nop
 800671e:	46bd      	mov	sp, r7
 8006720:	bc80      	pop	{r7}
 8006722:	4770      	bx	lr
 8006724:	20000050 	.word	0x20000050
 8006728:	200003dc 	.word	0x200003dc

0800672c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800672c:	b480      	push	{r7}
 800672e:	af00      	add	r7, sp, #0
  return uwTick;
 8006730:	4b02      	ldr	r3, [pc, #8]	; (800673c <HAL_GetTick+0x10>)
 8006732:	681b      	ldr	r3, [r3, #0]
}
 8006734:	4618      	mov	r0, r3
 8006736:	46bd      	mov	sp, r7
 8006738:	bc80      	pop	{r7}
 800673a:	4770      	bx	lr
 800673c:	200003dc 	.word	0x200003dc

08006740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006748:	f7ff fff0 	bl	800672c <HAL_GetTick>
 800674c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006758:	d005      	beq.n	8006766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800675a:	4b0a      	ldr	r3, [pc, #40]	; (8006784 <HAL_Delay+0x44>)
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4413      	add	r3, r2
 8006764:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006766:	bf00      	nop
 8006768:	f7ff ffe0 	bl	800672c <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	429a      	cmp	r2, r3
 8006776:	d8f7      	bhi.n	8006768 <HAL_Delay+0x28>
  {
  }
}
 8006778:	bf00      	nop
 800677a:	bf00      	nop
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	20000050 	.word	0x20000050

08006788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f003 0307 	and.w	r3, r3, #7
 8006796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006798:	4b0c      	ldr	r3, [pc, #48]	; (80067cc <__NVIC_SetPriorityGrouping+0x44>)
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80067a4:	4013      	ands	r3, r2
 80067a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80067b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80067b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80067ba:	4a04      	ldr	r2, [pc, #16]	; (80067cc <__NVIC_SetPriorityGrouping+0x44>)
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	60d3      	str	r3, [r2, #12]
}
 80067c0:	bf00      	nop
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bc80      	pop	{r7}
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	e000ed00 	.word	0xe000ed00

080067d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80067d0:	b480      	push	{r7}
 80067d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80067d4:	4b04      	ldr	r3, [pc, #16]	; (80067e8 <__NVIC_GetPriorityGrouping+0x18>)
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	0a1b      	lsrs	r3, r3, #8
 80067da:	f003 0307 	and.w	r3, r3, #7
}
 80067de:	4618      	mov	r0, r3
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bc80      	pop	{r7}
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	e000ed00 	.word	0xe000ed00

080067ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	4603      	mov	r3, r0
 80067f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	db0b      	blt.n	8006816 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067fe:	79fb      	ldrb	r3, [r7, #7]
 8006800:	f003 021f 	and.w	r2, r3, #31
 8006804:	4906      	ldr	r1, [pc, #24]	; (8006820 <__NVIC_EnableIRQ+0x34>)
 8006806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800680a:	095b      	lsrs	r3, r3, #5
 800680c:	2001      	movs	r0, #1
 800680e:	fa00 f202 	lsl.w	r2, r0, r2
 8006812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006816:	bf00      	nop
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	bc80      	pop	{r7}
 800681e:	4770      	bx	lr
 8006820:	e000e100 	.word	0xe000e100

08006824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	4603      	mov	r3, r0
 800682c:	6039      	str	r1, [r7, #0]
 800682e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006834:	2b00      	cmp	r3, #0
 8006836:	db0a      	blt.n	800684e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	b2da      	uxtb	r2, r3
 800683c:	490c      	ldr	r1, [pc, #48]	; (8006870 <__NVIC_SetPriority+0x4c>)
 800683e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006842:	0112      	lsls	r2, r2, #4
 8006844:	b2d2      	uxtb	r2, r2
 8006846:	440b      	add	r3, r1
 8006848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800684c:	e00a      	b.n	8006864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	b2da      	uxtb	r2, r3
 8006852:	4908      	ldr	r1, [pc, #32]	; (8006874 <__NVIC_SetPriority+0x50>)
 8006854:	79fb      	ldrb	r3, [r7, #7]
 8006856:	f003 030f 	and.w	r3, r3, #15
 800685a:	3b04      	subs	r3, #4
 800685c:	0112      	lsls	r2, r2, #4
 800685e:	b2d2      	uxtb	r2, r2
 8006860:	440b      	add	r3, r1
 8006862:	761a      	strb	r2, [r3, #24]
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	bc80      	pop	{r7}
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	e000e100 	.word	0xe000e100
 8006874:	e000ed00 	.word	0xe000ed00

08006878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006878:	b480      	push	{r7}
 800687a:	b089      	sub	sp, #36	; 0x24
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f003 0307 	and.w	r3, r3, #7
 800688a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	f1c3 0307 	rsb	r3, r3, #7
 8006892:	2b04      	cmp	r3, #4
 8006894:	bf28      	it	cs
 8006896:	2304      	movcs	r3, #4
 8006898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	3304      	adds	r3, #4
 800689e:	2b06      	cmp	r3, #6
 80068a0:	d902      	bls.n	80068a8 <NVIC_EncodePriority+0x30>
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	3b03      	subs	r3, #3
 80068a6:	e000      	b.n	80068aa <NVIC_EncodePriority+0x32>
 80068a8:	2300      	movs	r3, #0
 80068aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068ac:	f04f 32ff 	mov.w	r2, #4294967295
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	fa02 f303 	lsl.w	r3, r2, r3
 80068b6:	43da      	mvns	r2, r3
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	401a      	ands	r2, r3
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80068c0:	f04f 31ff 	mov.w	r1, #4294967295
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	fa01 f303 	lsl.w	r3, r1, r3
 80068ca:	43d9      	mvns	r1, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068d0:	4313      	orrs	r3, r2
         );
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3724      	adds	r7, #36	; 0x24
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bc80      	pop	{r7}
 80068da:	4770      	bx	lr

080068dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	3b01      	subs	r3, #1
 80068e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068ec:	d301      	bcc.n	80068f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80068ee:	2301      	movs	r3, #1
 80068f0:	e00f      	b.n	8006912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80068f2:	4a0a      	ldr	r2, [pc, #40]	; (800691c <SysTick_Config+0x40>)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	3b01      	subs	r3, #1
 80068f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80068fa:	210f      	movs	r1, #15
 80068fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006900:	f7ff ff90 	bl	8006824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006904:	4b05      	ldr	r3, [pc, #20]	; (800691c <SysTick_Config+0x40>)
 8006906:	2200      	movs	r2, #0
 8006908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800690a:	4b04      	ldr	r3, [pc, #16]	; (800691c <SysTick_Config+0x40>)
 800690c:	2207      	movs	r2, #7
 800690e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	e000e010 	.word	0xe000e010

08006920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7ff ff2d 	bl	8006788 <__NVIC_SetPriorityGrouping>
}
 800692e:	bf00      	nop
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006936:	b580      	push	{r7, lr}
 8006938:	b086      	sub	sp, #24
 800693a:	af00      	add	r7, sp, #0
 800693c:	4603      	mov	r3, r0
 800693e:	60b9      	str	r1, [r7, #8]
 8006940:	607a      	str	r2, [r7, #4]
 8006942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006944:	2300      	movs	r3, #0
 8006946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006948:	f7ff ff42 	bl	80067d0 <__NVIC_GetPriorityGrouping>
 800694c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	68b9      	ldr	r1, [r7, #8]
 8006952:	6978      	ldr	r0, [r7, #20]
 8006954:	f7ff ff90 	bl	8006878 <NVIC_EncodePriority>
 8006958:	4602      	mov	r2, r0
 800695a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800695e:	4611      	mov	r1, r2
 8006960:	4618      	mov	r0, r3
 8006962:	f7ff ff5f 	bl	8006824 <__NVIC_SetPriority>
}
 8006966:	bf00      	nop
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b082      	sub	sp, #8
 8006972:	af00      	add	r7, sp, #0
 8006974:	4603      	mov	r3, r0
 8006976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800697c:	4618      	mov	r0, r3
 800697e:	f7ff ff35 	bl	80067ec <__NVIC_EnableIRQ>
}
 8006982:	bf00      	nop
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b082      	sub	sp, #8
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7ff ffa2 	bl	80068dc <SysTick_Config>
 8006998:	4603      	mov	r3, r0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
	...

080069a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b08b      	sub	sp, #44	; 0x2c
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80069ae:	2300      	movs	r3, #0
 80069b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80069b2:	2300      	movs	r3, #0
 80069b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80069b6:	e169      	b.n	8006c8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80069b8:	2201      	movs	r2, #1
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	fa02 f303 	lsl.w	r3, r2, r3
 80069c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	69fa      	ldr	r2, [r7, #28]
 80069c8:	4013      	ands	r3, r2
 80069ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80069cc:	69ba      	ldr	r2, [r7, #24]
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	f040 8158 	bne.w	8006c86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	4a9a      	ldr	r2, [pc, #616]	; (8006c44 <HAL_GPIO_Init+0x2a0>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d05e      	beq.n	8006a9e <HAL_GPIO_Init+0xfa>
 80069e0:	4a98      	ldr	r2, [pc, #608]	; (8006c44 <HAL_GPIO_Init+0x2a0>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d875      	bhi.n	8006ad2 <HAL_GPIO_Init+0x12e>
 80069e6:	4a98      	ldr	r2, [pc, #608]	; (8006c48 <HAL_GPIO_Init+0x2a4>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d058      	beq.n	8006a9e <HAL_GPIO_Init+0xfa>
 80069ec:	4a96      	ldr	r2, [pc, #600]	; (8006c48 <HAL_GPIO_Init+0x2a4>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d86f      	bhi.n	8006ad2 <HAL_GPIO_Init+0x12e>
 80069f2:	4a96      	ldr	r2, [pc, #600]	; (8006c4c <HAL_GPIO_Init+0x2a8>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d052      	beq.n	8006a9e <HAL_GPIO_Init+0xfa>
 80069f8:	4a94      	ldr	r2, [pc, #592]	; (8006c4c <HAL_GPIO_Init+0x2a8>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d869      	bhi.n	8006ad2 <HAL_GPIO_Init+0x12e>
 80069fe:	4a94      	ldr	r2, [pc, #592]	; (8006c50 <HAL_GPIO_Init+0x2ac>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d04c      	beq.n	8006a9e <HAL_GPIO_Init+0xfa>
 8006a04:	4a92      	ldr	r2, [pc, #584]	; (8006c50 <HAL_GPIO_Init+0x2ac>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d863      	bhi.n	8006ad2 <HAL_GPIO_Init+0x12e>
 8006a0a:	4a92      	ldr	r2, [pc, #584]	; (8006c54 <HAL_GPIO_Init+0x2b0>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d046      	beq.n	8006a9e <HAL_GPIO_Init+0xfa>
 8006a10:	4a90      	ldr	r2, [pc, #576]	; (8006c54 <HAL_GPIO_Init+0x2b0>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d85d      	bhi.n	8006ad2 <HAL_GPIO_Init+0x12e>
 8006a16:	2b12      	cmp	r3, #18
 8006a18:	d82a      	bhi.n	8006a70 <HAL_GPIO_Init+0xcc>
 8006a1a:	2b12      	cmp	r3, #18
 8006a1c:	d859      	bhi.n	8006ad2 <HAL_GPIO_Init+0x12e>
 8006a1e:	a201      	add	r2, pc, #4	; (adr r2, 8006a24 <HAL_GPIO_Init+0x80>)
 8006a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a24:	08006a9f 	.word	0x08006a9f
 8006a28:	08006a79 	.word	0x08006a79
 8006a2c:	08006a8b 	.word	0x08006a8b
 8006a30:	08006acd 	.word	0x08006acd
 8006a34:	08006ad3 	.word	0x08006ad3
 8006a38:	08006ad3 	.word	0x08006ad3
 8006a3c:	08006ad3 	.word	0x08006ad3
 8006a40:	08006ad3 	.word	0x08006ad3
 8006a44:	08006ad3 	.word	0x08006ad3
 8006a48:	08006ad3 	.word	0x08006ad3
 8006a4c:	08006ad3 	.word	0x08006ad3
 8006a50:	08006ad3 	.word	0x08006ad3
 8006a54:	08006ad3 	.word	0x08006ad3
 8006a58:	08006ad3 	.word	0x08006ad3
 8006a5c:	08006ad3 	.word	0x08006ad3
 8006a60:	08006ad3 	.word	0x08006ad3
 8006a64:	08006ad3 	.word	0x08006ad3
 8006a68:	08006a81 	.word	0x08006a81
 8006a6c:	08006a95 	.word	0x08006a95
 8006a70:	4a79      	ldr	r2, [pc, #484]	; (8006c58 <HAL_GPIO_Init+0x2b4>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d013      	beq.n	8006a9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006a76:	e02c      	b.n	8006ad2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	623b      	str	r3, [r7, #32]
          break;
 8006a7e:	e029      	b.n	8006ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	3304      	adds	r3, #4
 8006a86:	623b      	str	r3, [r7, #32]
          break;
 8006a88:	e024      	b.n	8006ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	3308      	adds	r3, #8
 8006a90:	623b      	str	r3, [r7, #32]
          break;
 8006a92:	e01f      	b.n	8006ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	330c      	adds	r3, #12
 8006a9a:	623b      	str	r3, [r7, #32]
          break;
 8006a9c:	e01a      	b.n	8006ad4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d102      	bne.n	8006aac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006aa6:	2304      	movs	r3, #4
 8006aa8:	623b      	str	r3, [r7, #32]
          break;
 8006aaa:	e013      	b.n	8006ad4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d105      	bne.n	8006ac0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006ab4:	2308      	movs	r3, #8
 8006ab6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	69fa      	ldr	r2, [r7, #28]
 8006abc:	611a      	str	r2, [r3, #16]
          break;
 8006abe:	e009      	b.n	8006ad4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006ac0:	2308      	movs	r3, #8
 8006ac2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	69fa      	ldr	r2, [r7, #28]
 8006ac8:	615a      	str	r2, [r3, #20]
          break;
 8006aca:	e003      	b.n	8006ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006acc:	2300      	movs	r3, #0
 8006ace:	623b      	str	r3, [r7, #32]
          break;
 8006ad0:	e000      	b.n	8006ad4 <HAL_GPIO_Init+0x130>
          break;
 8006ad2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	2bff      	cmp	r3, #255	; 0xff
 8006ad8:	d801      	bhi.n	8006ade <HAL_GPIO_Init+0x13a>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	e001      	b.n	8006ae2 <HAL_GPIO_Init+0x13e>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	3304      	adds	r3, #4
 8006ae2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	2bff      	cmp	r3, #255	; 0xff
 8006ae8:	d802      	bhi.n	8006af0 <HAL_GPIO_Init+0x14c>
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	e002      	b.n	8006af6 <HAL_GPIO_Init+0x152>
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	3b08      	subs	r3, #8
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	210f      	movs	r1, #15
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	fa01 f303 	lsl.w	r3, r1, r3
 8006b04:	43db      	mvns	r3, r3
 8006b06:	401a      	ands	r2, r3
 8006b08:	6a39      	ldr	r1, [r7, #32]
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b10:	431a      	orrs	r2, r3
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 80b1 	beq.w	8006c86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006b24:	4b4d      	ldr	r3, [pc, #308]	; (8006c5c <HAL_GPIO_Init+0x2b8>)
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	4a4c      	ldr	r2, [pc, #304]	; (8006c5c <HAL_GPIO_Init+0x2b8>)
 8006b2a:	f043 0301 	orr.w	r3, r3, #1
 8006b2e:	6193      	str	r3, [r2, #24]
 8006b30:	4b4a      	ldr	r3, [pc, #296]	; (8006c5c <HAL_GPIO_Init+0x2b8>)
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	60bb      	str	r3, [r7, #8]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006b3c:	4a48      	ldr	r2, [pc, #288]	; (8006c60 <HAL_GPIO_Init+0x2bc>)
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	089b      	lsrs	r3, r3, #2
 8006b42:	3302      	adds	r3, #2
 8006b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	f003 0303 	and.w	r3, r3, #3
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	220f      	movs	r2, #15
 8006b54:	fa02 f303 	lsl.w	r3, r2, r3
 8006b58:	43db      	mvns	r3, r3
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a40      	ldr	r2, [pc, #256]	; (8006c64 <HAL_GPIO_Init+0x2c0>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d013      	beq.n	8006b90 <HAL_GPIO_Init+0x1ec>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a3f      	ldr	r2, [pc, #252]	; (8006c68 <HAL_GPIO_Init+0x2c4>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d00d      	beq.n	8006b8c <HAL_GPIO_Init+0x1e8>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a3e      	ldr	r2, [pc, #248]	; (8006c6c <HAL_GPIO_Init+0x2c8>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d007      	beq.n	8006b88 <HAL_GPIO_Init+0x1e4>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a3d      	ldr	r2, [pc, #244]	; (8006c70 <HAL_GPIO_Init+0x2cc>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d101      	bne.n	8006b84 <HAL_GPIO_Init+0x1e0>
 8006b80:	2303      	movs	r3, #3
 8006b82:	e006      	b.n	8006b92 <HAL_GPIO_Init+0x1ee>
 8006b84:	2304      	movs	r3, #4
 8006b86:	e004      	b.n	8006b92 <HAL_GPIO_Init+0x1ee>
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e002      	b.n	8006b92 <HAL_GPIO_Init+0x1ee>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e000      	b.n	8006b92 <HAL_GPIO_Init+0x1ee>
 8006b90:	2300      	movs	r3, #0
 8006b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b94:	f002 0203 	and.w	r2, r2, #3
 8006b98:	0092      	lsls	r2, r2, #2
 8006b9a:	4093      	lsls	r3, r2
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006ba2:	492f      	ldr	r1, [pc, #188]	; (8006c60 <HAL_GPIO_Init+0x2bc>)
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	089b      	lsrs	r3, r3, #2
 8006ba8:	3302      	adds	r3, #2
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d006      	beq.n	8006bca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006bbc:	4b2d      	ldr	r3, [pc, #180]	; (8006c74 <HAL_GPIO_Init+0x2d0>)
 8006bbe:	689a      	ldr	r2, [r3, #8]
 8006bc0:	492c      	ldr	r1, [pc, #176]	; (8006c74 <HAL_GPIO_Init+0x2d0>)
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	608b      	str	r3, [r1, #8]
 8006bc8:	e006      	b.n	8006bd8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006bca:	4b2a      	ldr	r3, [pc, #168]	; (8006c74 <HAL_GPIO_Init+0x2d0>)
 8006bcc:	689a      	ldr	r2, [r3, #8]
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	43db      	mvns	r3, r3
 8006bd2:	4928      	ldr	r1, [pc, #160]	; (8006c74 <HAL_GPIO_Init+0x2d0>)
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d006      	beq.n	8006bf2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006be4:	4b23      	ldr	r3, [pc, #140]	; (8006c74 <HAL_GPIO_Init+0x2d0>)
 8006be6:	68da      	ldr	r2, [r3, #12]
 8006be8:	4922      	ldr	r1, [pc, #136]	; (8006c74 <HAL_GPIO_Init+0x2d0>)
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	60cb      	str	r3, [r1, #12]
 8006bf0:	e006      	b.n	8006c00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006bf2:	4b20      	ldr	r3, [pc, #128]	; (8006c74 <HAL_GPIO_Init+0x2d0>)
 8006bf4:	68da      	ldr	r2, [r3, #12]
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	43db      	mvns	r3, r3
 8006bfa:	491e      	ldr	r1, [pc, #120]	; (8006c74 <HAL_GPIO_Init+0x2d0>)
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d006      	beq.n	8006c1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006c0c:	4b19      	ldr	r3, [pc, #100]	; (8006c74 <HAL_GPIO_Init+0x2d0>)
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	4918      	ldr	r1, [pc, #96]	; (8006c74 <HAL_GPIO_Init+0x2d0>)
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	604b      	str	r3, [r1, #4]
 8006c18:	e006      	b.n	8006c28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006c1a:	4b16      	ldr	r3, [pc, #88]	; (8006c74 <HAL_GPIO_Init+0x2d0>)
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	43db      	mvns	r3, r3
 8006c22:	4914      	ldr	r1, [pc, #80]	; (8006c74 <HAL_GPIO_Init+0x2d0>)
 8006c24:	4013      	ands	r3, r2
 8006c26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d021      	beq.n	8006c78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006c34:	4b0f      	ldr	r3, [pc, #60]	; (8006c74 <HAL_GPIO_Init+0x2d0>)
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	490e      	ldr	r1, [pc, #56]	; (8006c74 <HAL_GPIO_Init+0x2d0>)
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	600b      	str	r3, [r1, #0]
 8006c40:	e021      	b.n	8006c86 <HAL_GPIO_Init+0x2e2>
 8006c42:	bf00      	nop
 8006c44:	10320000 	.word	0x10320000
 8006c48:	10310000 	.word	0x10310000
 8006c4c:	10220000 	.word	0x10220000
 8006c50:	10210000 	.word	0x10210000
 8006c54:	10120000 	.word	0x10120000
 8006c58:	10110000 	.word	0x10110000
 8006c5c:	40021000 	.word	0x40021000
 8006c60:	40010000 	.word	0x40010000
 8006c64:	40010800 	.word	0x40010800
 8006c68:	40010c00 	.word	0x40010c00
 8006c6c:	40011000 	.word	0x40011000
 8006c70:	40011400 	.word	0x40011400
 8006c74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006c78:	4b0b      	ldr	r3, [pc, #44]	; (8006ca8 <HAL_GPIO_Init+0x304>)
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	43db      	mvns	r3, r3
 8006c80:	4909      	ldr	r1, [pc, #36]	; (8006ca8 <HAL_GPIO_Init+0x304>)
 8006c82:	4013      	ands	r3, r2
 8006c84:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	3301      	adds	r3, #1
 8006c8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c92:	fa22 f303 	lsr.w	r3, r2, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f47f ae8e 	bne.w	80069b8 <HAL_GPIO_Init+0x14>
  }
}
 8006c9c:	bf00      	nop
 8006c9e:	bf00      	nop
 8006ca0:	372c      	adds	r7, #44	; 0x2c
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bc80      	pop	{r7}
 8006ca6:	4770      	bx	lr
 8006ca8:	40010400 	.word	0x40010400

08006cac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006cb6:	4b08      	ldr	r3, [pc, #32]	; (8006cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006cb8:	695a      	ldr	r2, [r3, #20]
 8006cba:	88fb      	ldrh	r3, [r7, #6]
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d006      	beq.n	8006cd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006cc2:	4a05      	ldr	r2, [pc, #20]	; (8006cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006cc4:	88fb      	ldrh	r3, [r7, #6]
 8006cc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006cc8:	88fb      	ldrh	r3, [r7, #6]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7fe f8ee 	bl	8004eac <HAL_GPIO_EXTI_Callback>
  }
}
 8006cd0:	bf00      	nop
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	40010400 	.word	0x40010400

08006cdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e12b      	b.n	8006f46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d106      	bne.n	8006d08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7ff fb74 	bl	80063f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2224      	movs	r2, #36	; 0x24
 8006d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f022 0201 	bic.w	r2, r2, #1
 8006d1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006d40:	f002 f8aa 	bl	8008e98 <HAL_RCC_GetPCLK1Freq>
 8006d44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	4a81      	ldr	r2, [pc, #516]	; (8006f50 <HAL_I2C_Init+0x274>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d807      	bhi.n	8006d60 <HAL_I2C_Init+0x84>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	4a80      	ldr	r2, [pc, #512]	; (8006f54 <HAL_I2C_Init+0x278>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	bf94      	ite	ls
 8006d58:	2301      	movls	r3, #1
 8006d5a:	2300      	movhi	r3, #0
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	e006      	b.n	8006d6e <HAL_I2C_Init+0x92>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4a7d      	ldr	r2, [pc, #500]	; (8006f58 <HAL_I2C_Init+0x27c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	bf94      	ite	ls
 8006d68:	2301      	movls	r3, #1
 8006d6a:	2300      	movhi	r3, #0
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d001      	beq.n	8006d76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e0e7      	b.n	8006f46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	4a78      	ldr	r2, [pc, #480]	; (8006f5c <HAL_I2C_Init+0x280>)
 8006d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7e:	0c9b      	lsrs	r3, r3, #18
 8006d80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	4a6a      	ldr	r2, [pc, #424]	; (8006f50 <HAL_I2C_Init+0x274>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d802      	bhi.n	8006db0 <HAL_I2C_Init+0xd4>
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	3301      	adds	r3, #1
 8006dae:	e009      	b.n	8006dc4 <HAL_I2C_Init+0xe8>
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006db6:	fb02 f303 	mul.w	r3, r2, r3
 8006dba:	4a69      	ldr	r2, [pc, #420]	; (8006f60 <HAL_I2C_Init+0x284>)
 8006dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc0:	099b      	lsrs	r3, r3, #6
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	6812      	ldr	r2, [r2, #0]
 8006dc8:	430b      	orrs	r3, r1
 8006dca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006dd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	495c      	ldr	r1, [pc, #368]	; (8006f50 <HAL_I2C_Init+0x274>)
 8006de0:	428b      	cmp	r3, r1
 8006de2:	d819      	bhi.n	8006e18 <HAL_I2C_Init+0x13c>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	1e59      	subs	r1, r3, #1
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	fbb1 f3f3 	udiv	r3, r1, r3
 8006df2:	1c59      	adds	r1, r3, #1
 8006df4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006df8:	400b      	ands	r3, r1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00a      	beq.n	8006e14 <HAL_I2C_Init+0x138>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	1e59      	subs	r1, r3, #1
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e12:	e051      	b.n	8006eb8 <HAL_I2C_Init+0x1dc>
 8006e14:	2304      	movs	r3, #4
 8006e16:	e04f      	b.n	8006eb8 <HAL_I2C_Init+0x1dc>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d111      	bne.n	8006e44 <HAL_I2C_Init+0x168>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	1e58      	subs	r0, r3, #1
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6859      	ldr	r1, [r3, #4]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	005b      	lsls	r3, r3, #1
 8006e2c:	440b      	add	r3, r1
 8006e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e32:	3301      	adds	r3, #1
 8006e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	bf0c      	ite	eq
 8006e3c:	2301      	moveq	r3, #1
 8006e3e:	2300      	movne	r3, #0
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	e012      	b.n	8006e6a <HAL_I2C_Init+0x18e>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	1e58      	subs	r0, r3, #1
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6859      	ldr	r1, [r3, #4]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	440b      	add	r3, r1
 8006e52:	0099      	lsls	r1, r3, #2
 8006e54:	440b      	add	r3, r1
 8006e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	bf0c      	ite	eq
 8006e64:	2301      	moveq	r3, #1
 8006e66:	2300      	movne	r3, #0
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <HAL_I2C_Init+0x196>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e022      	b.n	8006eb8 <HAL_I2C_Init+0x1dc>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10e      	bne.n	8006e98 <HAL_I2C_Init+0x1bc>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	1e58      	subs	r0, r3, #1
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6859      	ldr	r1, [r3, #4]
 8006e82:	460b      	mov	r3, r1
 8006e84:	005b      	lsls	r3, r3, #1
 8006e86:	440b      	add	r3, r1
 8006e88:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e96:	e00f      	b.n	8006eb8 <HAL_I2C_Init+0x1dc>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	1e58      	subs	r0, r3, #1
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6859      	ldr	r1, [r3, #4]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	440b      	add	r3, r1
 8006ea6:	0099      	lsls	r1, r3, #2
 8006ea8:	440b      	add	r3, r1
 8006eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8006eae:	3301      	adds	r3, #1
 8006eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006eb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006eb8:	6879      	ldr	r1, [r7, #4]
 8006eba:	6809      	ldr	r1, [r1, #0]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	69da      	ldr	r2, [r3, #28]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	430a      	orrs	r2, r1
 8006eda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006ee6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	6911      	ldr	r1, [r2, #16]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	68d2      	ldr	r2, [r2, #12]
 8006ef2:	4311      	orrs	r1, r2
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	6812      	ldr	r2, [r2, #0]
 8006ef8:	430b      	orrs	r3, r1
 8006efa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	695a      	ldr	r2, [r3, #20]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f042 0201 	orr.w	r2, r2, #1
 8006f26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2220      	movs	r2, #32
 8006f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	000186a0 	.word	0x000186a0
 8006f54:	001e847f 	.word	0x001e847f
 8006f58:	003d08ff 	.word	0x003d08ff
 8006f5c:	431bde83 	.word	0x431bde83
 8006f60:	10624dd3 	.word	0x10624dd3

08006f64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b088      	sub	sp, #32
 8006f68:	af02      	add	r7, sp, #8
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	607a      	str	r2, [r7, #4]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	460b      	mov	r3, r1
 8006f72:	817b      	strh	r3, [r7, #10]
 8006f74:	4613      	mov	r3, r2
 8006f76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006f78:	f7ff fbd8 	bl	800672c <HAL_GetTick>
 8006f7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b20      	cmp	r3, #32
 8006f88:	f040 80e0 	bne.w	800714c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	2319      	movs	r3, #25
 8006f92:	2201      	movs	r2, #1
 8006f94:	4970      	ldr	r1, [pc, #448]	; (8007158 <HAL_I2C_Master_Transmit+0x1f4>)
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f001 f97e 	bl	8008298 <I2C_WaitOnFlagUntilTimeout>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	e0d3      	b.n	800714e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d101      	bne.n	8006fb4 <HAL_I2C_Master_Transmit+0x50>
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	e0cc      	b.n	800714e <HAL_I2C_Master_Transmit+0x1ea>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d007      	beq.n	8006fda <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f042 0201 	orr.w	r2, r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fe8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2221      	movs	r2, #33	; 0x21
 8006fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2210      	movs	r2, #16
 8006ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	893a      	ldrh	r2, [r7, #8]
 800700a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007010:	b29a      	uxth	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	4a50      	ldr	r2, [pc, #320]	; (800715c <HAL_I2C_Master_Transmit+0x1f8>)
 800701a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800701c:	8979      	ldrh	r1, [r7, #10]
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	6a3a      	ldr	r2, [r7, #32]
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f000 fe6a 	bl	8007cfc <I2C_MasterRequestWrite>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e08d      	b.n	800714e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007032:	2300      	movs	r3, #0
 8007034:	613b      	str	r3, [r7, #16]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	613b      	str	r3, [r7, #16]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	613b      	str	r3, [r7, #16]
 8007046:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007048:	e066      	b.n	8007118 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	6a39      	ldr	r1, [r7, #32]
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f001 fa3c 	bl	80084cc <I2C_WaitOnTXEFlagUntilTimeout>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00d      	beq.n	8007076 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705e:	2b04      	cmp	r3, #4
 8007060:	d107      	bne.n	8007072 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007070:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e06b      	b.n	800714e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	781a      	ldrb	r2, [r3, #0]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007090:	b29b      	uxth	r3, r3
 8007092:	3b01      	subs	r3, #1
 8007094:	b29a      	uxth	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800709e:	3b01      	subs	r3, #1
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	f003 0304 	and.w	r3, r3, #4
 80070b0:	2b04      	cmp	r3, #4
 80070b2:	d11b      	bne.n	80070ec <HAL_I2C_Master_Transmit+0x188>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d017      	beq.n	80070ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	781a      	ldrb	r2, [r3, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070cc:	1c5a      	adds	r2, r3, #1
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	3b01      	subs	r3, #1
 80070da:	b29a      	uxth	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070e4:	3b01      	subs	r3, #1
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	6a39      	ldr	r1, [r7, #32]
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f001 fa33 	bl	800855c <I2C_WaitOnBTFFlagUntilTimeout>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00d      	beq.n	8007118 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007100:	2b04      	cmp	r3, #4
 8007102:	d107      	bne.n	8007114 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007112:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e01a      	b.n	800714e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800711c:	2b00      	cmp	r3, #0
 800711e:	d194      	bne.n	800704a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800712e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2220      	movs	r2, #32
 8007134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007148:	2300      	movs	r3, #0
 800714a:	e000      	b.n	800714e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800714c:	2302      	movs	r3, #2
  }
}
 800714e:	4618      	mov	r0, r3
 8007150:	3718      	adds	r7, #24
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	00100002 	.word	0x00100002
 800715c:	ffff0000 	.word	0xffff0000

08007160 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b08c      	sub	sp, #48	; 0x30
 8007164:	af02      	add	r7, sp, #8
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	607a      	str	r2, [r7, #4]
 800716a:	461a      	mov	r2, r3
 800716c:	460b      	mov	r3, r1
 800716e:	817b      	strh	r3, [r7, #10]
 8007170:	4613      	mov	r3, r2
 8007172:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8007174:	2300      	movs	r3, #0
 8007176:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007178:	f7ff fad8 	bl	800672c <HAL_GetTick>
 800717c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b20      	cmp	r3, #32
 8007188:	f040 824b 	bne.w	8007622 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	2319      	movs	r3, #25
 8007192:	2201      	movs	r2, #1
 8007194:	497f      	ldr	r1, [pc, #508]	; (8007394 <HAL_I2C_Master_Receive+0x234>)
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f001 f87e 	bl	8008298 <I2C_WaitOnFlagUntilTimeout>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80071a2:	2302      	movs	r3, #2
 80071a4:	e23e      	b.n	8007624 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d101      	bne.n	80071b4 <HAL_I2C_Master_Receive+0x54>
 80071b0:	2302      	movs	r3, #2
 80071b2:	e237      	b.n	8007624 <HAL_I2C_Master_Receive+0x4c4>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d007      	beq.n	80071da <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f042 0201 	orr.w	r2, r2, #1
 80071d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2222      	movs	r2, #34	; 0x22
 80071ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2210      	movs	r2, #16
 80071f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	893a      	ldrh	r2, [r7, #8]
 800720a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007210:	b29a      	uxth	r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	4a5f      	ldr	r2, [pc, #380]	; (8007398 <HAL_I2C_Master_Receive+0x238>)
 800721a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800721c:	8979      	ldrh	r1, [r7, #10]
 800721e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f000 fdec 	bl	8007e00 <I2C_MasterRequestRead>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e1f8      	b.n	8007624 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007236:	2b00      	cmp	r3, #0
 8007238:	d113      	bne.n	8007262 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800723a:	2300      	movs	r3, #0
 800723c:	61fb      	str	r3, [r7, #28]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	61fb      	str	r3, [r7, #28]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	61fb      	str	r3, [r7, #28]
 800724e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800725e:	601a      	str	r2, [r3, #0]
 8007260:	e1cc      	b.n	80075fc <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007266:	2b01      	cmp	r3, #1
 8007268:	d11e      	bne.n	80072a8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007278:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800727a:	b672      	cpsid	i
}
 800727c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800727e:	2300      	movs	r3, #0
 8007280:	61bb      	str	r3, [r7, #24]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	61bb      	str	r3, [r7, #24]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	61bb      	str	r3, [r7, #24]
 8007292:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80072a4:	b662      	cpsie	i
}
 80072a6:	e035      	b.n	8007314 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d11e      	bne.n	80072ee <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80072c0:	b672      	cpsid	i
}
 80072c2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072c4:	2300      	movs	r3, #0
 80072c6:	617b      	str	r3, [r7, #20]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	617b      	str	r3, [r7, #20]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	617b      	str	r3, [r7, #20]
 80072d8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80072ea:	b662      	cpsie	i
}
 80072ec:	e012      	b.n	8007314 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072fe:	2300      	movs	r3, #0
 8007300:	613b      	str	r3, [r7, #16]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	695b      	ldr	r3, [r3, #20]
 8007308:	613b      	str	r3, [r7, #16]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	613b      	str	r3, [r7, #16]
 8007312:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8007314:	e172      	b.n	80075fc <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800731a:	2b03      	cmp	r3, #3
 800731c:	f200 811f 	bhi.w	800755e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007324:	2b01      	cmp	r3, #1
 8007326:	d123      	bne.n	8007370 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800732a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f001 f95d 	bl	80085ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d001      	beq.n	800733c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e173      	b.n	8007624 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	691a      	ldr	r2, [r3, #16]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007346:	b2d2      	uxtb	r2, r2
 8007348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007358:	3b01      	subs	r3, #1
 800735a:	b29a      	uxth	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007364:	b29b      	uxth	r3, r3
 8007366:	3b01      	subs	r3, #1
 8007368:	b29a      	uxth	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800736e:	e145      	b.n	80075fc <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007374:	2b02      	cmp	r3, #2
 8007376:	d152      	bne.n	800741e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737e:	2200      	movs	r2, #0
 8007380:	4906      	ldr	r1, [pc, #24]	; (800739c <HAL_I2C_Master_Receive+0x23c>)
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f000 ff88 	bl	8008298 <I2C_WaitOnFlagUntilTimeout>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d008      	beq.n	80073a0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e148      	b.n	8007624 <HAL_I2C_Master_Receive+0x4c4>
 8007392:	bf00      	nop
 8007394:	00100002 	.word	0x00100002
 8007398:	ffff0000 	.word	0xffff0000
 800739c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80073a0:	b672      	cpsid	i
}
 80073a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	691a      	ldr	r2, [r3, #16]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073be:	b2d2      	uxtb	r2, r2
 80073c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	1c5a      	adds	r2, r3, #1
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073d0:	3b01      	subs	r3, #1
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073dc:	b29b      	uxth	r3, r3
 80073de:	3b01      	subs	r3, #1
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80073e6:	b662      	cpsie	i
}
 80073e8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	691a      	ldr	r2, [r3, #16]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f4:	b2d2      	uxtb	r2, r2
 80073f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fc:	1c5a      	adds	r2, r3, #1
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007406:	3b01      	subs	r3, #1
 8007408:	b29a      	uxth	r2, r3
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007412:	b29b      	uxth	r3, r3
 8007414:	3b01      	subs	r3, #1
 8007416:	b29a      	uxth	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800741c:	e0ee      	b.n	80075fc <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	2200      	movs	r2, #0
 8007426:	4981      	ldr	r1, [pc, #516]	; (800762c <HAL_I2C_Master_Receive+0x4cc>)
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 ff35 	bl	8008298 <I2C_WaitOnFlagUntilTimeout>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e0f5      	b.n	8007624 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007446:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007448:	b672      	cpsid	i
}
 800744a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	691a      	ldr	r2, [r3, #16]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007456:	b2d2      	uxtb	r2, r2
 8007458:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745e:	1c5a      	adds	r2, r3, #1
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007468:	3b01      	subs	r3, #1
 800746a:	b29a      	uxth	r2, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007474:	b29b      	uxth	r3, r3
 8007476:	3b01      	subs	r3, #1
 8007478:	b29a      	uxth	r2, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800747e:	4b6c      	ldr	r3, [pc, #432]	; (8007630 <HAL_I2C_Master_Receive+0x4d0>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	08db      	lsrs	r3, r3, #3
 8007484:	4a6b      	ldr	r2, [pc, #428]	; (8007634 <HAL_I2C_Master_Receive+0x4d4>)
 8007486:	fba2 2303 	umull	r2, r3, r2, r3
 800748a:	0a1a      	lsrs	r2, r3, #8
 800748c:	4613      	mov	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	00da      	lsls	r2, r3, #3
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007498:	6a3b      	ldr	r3, [r7, #32]
 800749a:	3b01      	subs	r3, #1
 800749c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800749e:	6a3b      	ldr	r3, [r7, #32]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d118      	bne.n	80074d6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2220      	movs	r2, #32
 80074ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074be:	f043 0220 	orr.w	r2, r3, #32
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80074c6:	b662      	cpsie	i
}
 80074c8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e0a6      	b.n	8007624 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	695b      	ldr	r3, [r3, #20]
 80074dc:	f003 0304 	and.w	r3, r3, #4
 80074e0:	2b04      	cmp	r3, #4
 80074e2:	d1d9      	bne.n	8007498 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	691a      	ldr	r2, [r3, #16]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fe:	b2d2      	uxtb	r2, r2
 8007500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007506:	1c5a      	adds	r2, r3, #1
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007510:	3b01      	subs	r3, #1
 8007512:	b29a      	uxth	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800751c:	b29b      	uxth	r3, r3
 800751e:	3b01      	subs	r3, #1
 8007520:	b29a      	uxth	r2, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007526:	b662      	cpsie	i
}
 8007528:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	691a      	ldr	r2, [r3, #16]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007534:	b2d2      	uxtb	r2, r2
 8007536:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753c:	1c5a      	adds	r2, r3, #1
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007546:	3b01      	subs	r3, #1
 8007548:	b29a      	uxth	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007552:	b29b      	uxth	r3, r3
 8007554:	3b01      	subs	r3, #1
 8007556:	b29a      	uxth	r2, r3
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800755c:	e04e      	b.n	80075fc <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800755e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007560:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f001 f842 	bl	80085ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d001      	beq.n	8007572 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e058      	b.n	8007624 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	691a      	ldr	r2, [r3, #16]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757c:	b2d2      	uxtb	r2, r2
 800757e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007584:	1c5a      	adds	r2, r3, #1
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800758e:	3b01      	subs	r3, #1
 8007590:	b29a      	uxth	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800759a:	b29b      	uxth	r3, r3
 800759c:	3b01      	subs	r3, #1
 800759e:	b29a      	uxth	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	f003 0304 	and.w	r3, r3, #4
 80075ae:	2b04      	cmp	r3, #4
 80075b0:	d124      	bne.n	80075fc <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	d107      	bne.n	80075ca <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075c8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	691a      	ldr	r2, [r3, #16]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d4:	b2d2      	uxtb	r2, r2
 80075d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075e6:	3b01      	subs	r3, #1
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	3b01      	subs	r3, #1
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007600:	2b00      	cmp	r3, #0
 8007602:	f47f ae88 	bne.w	8007316 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2220      	movs	r2, #32
 800760a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800761e:	2300      	movs	r3, #0
 8007620:	e000      	b.n	8007624 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8007622:	2302      	movs	r3, #2
  }
}
 8007624:	4618      	mov	r0, r3
 8007626:	3728      	adds	r7, #40	; 0x28
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	00010004 	.word	0x00010004
 8007630:	20000048 	.word	0x20000048
 8007634:	14f8b589 	.word	0x14f8b589

08007638 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b088      	sub	sp, #32
 800763c:	af02      	add	r7, sp, #8
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	4608      	mov	r0, r1
 8007642:	4611      	mov	r1, r2
 8007644:	461a      	mov	r2, r3
 8007646:	4603      	mov	r3, r0
 8007648:	817b      	strh	r3, [r7, #10]
 800764a:	460b      	mov	r3, r1
 800764c:	813b      	strh	r3, [r7, #8]
 800764e:	4613      	mov	r3, r2
 8007650:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007652:	f7ff f86b 	bl	800672c <HAL_GetTick>
 8007656:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800765e:	b2db      	uxtb	r3, r3
 8007660:	2b20      	cmp	r3, #32
 8007662:	f040 80d9 	bne.w	8007818 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	2319      	movs	r3, #25
 800766c:	2201      	movs	r2, #1
 800766e:	496d      	ldr	r1, [pc, #436]	; (8007824 <HAL_I2C_Mem_Write+0x1ec>)
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f000 fe11 	bl	8008298 <I2C_WaitOnFlagUntilTimeout>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d001      	beq.n	8007680 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800767c:	2302      	movs	r3, #2
 800767e:	e0cc      	b.n	800781a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007686:	2b01      	cmp	r3, #1
 8007688:	d101      	bne.n	800768e <HAL_I2C_Mem_Write+0x56>
 800768a:	2302      	movs	r3, #2
 800768c:	e0c5      	b.n	800781a <HAL_I2C_Mem_Write+0x1e2>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0301 	and.w	r3, r3, #1
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d007      	beq.n	80076b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f042 0201 	orr.w	r2, r2, #1
 80076b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2221      	movs	r2, #33	; 0x21
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2240      	movs	r2, #64	; 0x40
 80076d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6a3a      	ldr	r2, [r7, #32]
 80076de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80076e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	4a4d      	ldr	r2, [pc, #308]	; (8007828 <HAL_I2C_Mem_Write+0x1f0>)
 80076f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80076f6:	88f8      	ldrh	r0, [r7, #6]
 80076f8:	893a      	ldrh	r2, [r7, #8]
 80076fa:	8979      	ldrh	r1, [r7, #10]
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	9301      	str	r3, [sp, #4]
 8007700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	4603      	mov	r3, r0
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f000 fc48 	bl	8007f9c <I2C_RequestMemoryWrite>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d052      	beq.n	80077b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e081      	b.n	800781a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f000 fed6 	bl	80084cc <I2C_WaitOnTXEFlagUntilTimeout>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00d      	beq.n	8007742 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772a:	2b04      	cmp	r3, #4
 800772c:	d107      	bne.n	800773e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800773c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e06b      	b.n	800781a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007746:	781a      	ldrb	r2, [r3, #0]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800775c:	3b01      	subs	r3, #1
 800775e:	b29a      	uxth	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007768:	b29b      	uxth	r3, r3
 800776a:	3b01      	subs	r3, #1
 800776c:	b29a      	uxth	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	f003 0304 	and.w	r3, r3, #4
 800777c:	2b04      	cmp	r3, #4
 800777e:	d11b      	bne.n	80077b8 <HAL_I2C_Mem_Write+0x180>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007784:	2b00      	cmp	r3, #0
 8007786:	d017      	beq.n	80077b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778c:	781a      	ldrb	r2, [r3, #0]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	1c5a      	adds	r2, r3, #1
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a2:	3b01      	subs	r3, #1
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	3b01      	subs	r3, #1
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d1aa      	bne.n	8007716 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077c0:	697a      	ldr	r2, [r7, #20]
 80077c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f000 fec9 	bl	800855c <I2C_WaitOnBTFFlagUntilTimeout>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00d      	beq.n	80077ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d4:	2b04      	cmp	r3, #4
 80077d6:	d107      	bne.n	80077e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e016      	b.n	800781a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2220      	movs	r2, #32
 8007800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	e000      	b.n	800781a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007818:	2302      	movs	r3, #2
  }
}
 800781a:	4618      	mov	r0, r3
 800781c:	3718      	adds	r7, #24
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	00100002 	.word	0x00100002
 8007828:	ffff0000 	.word	0xffff0000

0800782c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b08c      	sub	sp, #48	; 0x30
 8007830:	af02      	add	r7, sp, #8
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	4608      	mov	r0, r1
 8007836:	4611      	mov	r1, r2
 8007838:	461a      	mov	r2, r3
 800783a:	4603      	mov	r3, r0
 800783c:	817b      	strh	r3, [r7, #10]
 800783e:	460b      	mov	r3, r1
 8007840:	813b      	strh	r3, [r7, #8]
 8007842:	4613      	mov	r3, r2
 8007844:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8007846:	2300      	movs	r3, #0
 8007848:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800784a:	f7fe ff6f 	bl	800672c <HAL_GetTick>
 800784e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b20      	cmp	r3, #32
 800785a:	f040 8244 	bne.w	8007ce6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800785e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	2319      	movs	r3, #25
 8007864:	2201      	movs	r2, #1
 8007866:	4982      	ldr	r1, [pc, #520]	; (8007a70 <HAL_I2C_Mem_Read+0x244>)
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f000 fd15 	bl	8008298 <I2C_WaitOnFlagUntilTimeout>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d001      	beq.n	8007878 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8007874:	2302      	movs	r3, #2
 8007876:	e237      	b.n	8007ce8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800787e:	2b01      	cmp	r3, #1
 8007880:	d101      	bne.n	8007886 <HAL_I2C_Mem_Read+0x5a>
 8007882:	2302      	movs	r3, #2
 8007884:	e230      	b.n	8007ce8 <HAL_I2C_Mem_Read+0x4bc>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	2b01      	cmp	r3, #1
 800789a:	d007      	beq.n	80078ac <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f042 0201 	orr.w	r2, r2, #1
 80078aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2222      	movs	r2, #34	; 0x22
 80078c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2240      	movs	r2, #64	; 0x40
 80078c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80078dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4a62      	ldr	r2, [pc, #392]	; (8007a74 <HAL_I2C_Mem_Read+0x248>)
 80078ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80078ee:	88f8      	ldrh	r0, [r7, #6]
 80078f0:	893a      	ldrh	r2, [r7, #8]
 80078f2:	8979      	ldrh	r1, [r7, #10]
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	9301      	str	r3, [sp, #4]
 80078f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	4603      	mov	r3, r0
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f000 fbe2 	bl	80080c8 <I2C_RequestMemoryRead>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d001      	beq.n	800790e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e1ec      	b.n	8007ce8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007912:	2b00      	cmp	r3, #0
 8007914:	d113      	bne.n	800793e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007916:	2300      	movs	r3, #0
 8007918:	61fb      	str	r3, [r7, #28]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	61fb      	str	r3, [r7, #28]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	61fb      	str	r3, [r7, #28]
 800792a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800793a:	601a      	str	r2, [r3, #0]
 800793c:	e1c0      	b.n	8007cc0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007942:	2b01      	cmp	r3, #1
 8007944:	d11e      	bne.n	8007984 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007954:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007956:	b672      	cpsid	i
}
 8007958:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800795a:	2300      	movs	r3, #0
 800795c:	61bb      	str	r3, [r7, #24]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	61bb      	str	r3, [r7, #24]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	61bb      	str	r3, [r7, #24]
 800796e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800797e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007980:	b662      	cpsie	i
}
 8007982:	e035      	b.n	80079f0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007988:	2b02      	cmp	r3, #2
 800798a:	d11e      	bne.n	80079ca <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800799a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800799c:	b672      	cpsid	i
}
 800799e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079a0:	2300      	movs	r3, #0
 80079a2:	617b      	str	r3, [r7, #20]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	617b      	str	r3, [r7, #20]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	617b      	str	r3, [r7, #20]
 80079b4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80079c6:	b662      	cpsie	i
}
 80079c8:	e012      	b.n	80079f0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079d8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079da:	2300      	movs	r3, #0
 80079dc:	613b      	str	r3, [r7, #16]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	695b      	ldr	r3, [r3, #20]
 80079e4:	613b      	str	r3, [r7, #16]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	613b      	str	r3, [r7, #16]
 80079ee:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80079f0:	e166      	b.n	8007cc0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079f6:	2b03      	cmp	r3, #3
 80079f8:	f200 811f 	bhi.w	8007c3a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d123      	bne.n	8007a4c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f000 fdef 	bl	80085ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e167      	b.n	8007ce8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	691a      	ldr	r2, [r3, #16]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a22:	b2d2      	uxtb	r2, r2
 8007a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2a:	1c5a      	adds	r2, r3, #1
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a34:	3b01      	subs	r3, #1
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	3b01      	subs	r3, #1
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a4a:	e139      	b.n	8007cc0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d152      	bne.n	8007afa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	4906      	ldr	r1, [pc, #24]	; (8007a78 <HAL_I2C_Mem_Read+0x24c>)
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 fc1a 	bl	8008298 <I2C_WaitOnFlagUntilTimeout>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d008      	beq.n	8007a7c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e13c      	b.n	8007ce8 <HAL_I2C_Mem_Read+0x4bc>
 8007a6e:	bf00      	nop
 8007a70:	00100002 	.word	0x00100002
 8007a74:	ffff0000 	.word	0xffff0000
 8007a78:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007a7c:	b672      	cpsid	i
}
 8007a7e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	691a      	ldr	r2, [r3, #16]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9a:	b2d2      	uxtb	r2, r2
 8007a9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa2:	1c5a      	adds	r2, r3, #1
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aac:	3b01      	subs	r3, #1
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	3b01      	subs	r3, #1
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007ac2:	b662      	cpsie	i
}
 8007ac4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	691a      	ldr	r2, [r3, #16]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad0:	b2d2      	uxtb	r2, r2
 8007ad2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad8:	1c5a      	adds	r2, r3, #1
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	3b01      	subs	r3, #1
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007af8:	e0e2      	b.n	8007cc0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b00:	2200      	movs	r2, #0
 8007b02:	497b      	ldr	r1, [pc, #492]	; (8007cf0 <HAL_I2C_Mem_Read+0x4c4>)
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 fbc7 	bl	8008298 <I2C_WaitOnFlagUntilTimeout>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e0e9      	b.n	8007ce8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007b24:	b672      	cpsid	i
}
 8007b26:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	691a      	ldr	r2, [r3, #16]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b32:	b2d2      	uxtb	r2, r2
 8007b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3a:	1c5a      	adds	r2, r3, #1
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b44:	3b01      	subs	r3, #1
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	3b01      	subs	r3, #1
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007b5a:	4b66      	ldr	r3, [pc, #408]	; (8007cf4 <HAL_I2C_Mem_Read+0x4c8>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	08db      	lsrs	r3, r3, #3
 8007b60:	4a65      	ldr	r2, [pc, #404]	; (8007cf8 <HAL_I2C_Mem_Read+0x4cc>)
 8007b62:	fba2 2303 	umull	r2, r3, r2, r3
 8007b66:	0a1a      	lsrs	r2, r3, #8
 8007b68:	4613      	mov	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	00da      	lsls	r2, r3, #3
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007b74:	6a3b      	ldr	r3, [r7, #32]
 8007b76:	3b01      	subs	r3, #1
 8007b78:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8007b7a:	6a3b      	ldr	r3, [r7, #32]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d118      	bne.n	8007bb2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9a:	f043 0220 	orr.w	r2, r3, #32
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8007ba2:	b662      	cpsie	i
}
 8007ba4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e09a      	b.n	8007ce8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	f003 0304 	and.w	r3, r3, #4
 8007bbc:	2b04      	cmp	r3, #4
 8007bbe:	d1d9      	bne.n	8007b74 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	691a      	ldr	r2, [r3, #16]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bda:	b2d2      	uxtb	r2, r2
 8007bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be2:	1c5a      	adds	r2, r3, #1
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bec:	3b01      	subs	r3, #1
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007c02:	b662      	cpsie	i
}
 8007c04:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	691a      	ldr	r2, [r3, #16]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c10:	b2d2      	uxtb	r2, r2
 8007c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c18:	1c5a      	adds	r2, r3, #1
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c22:	3b01      	subs	r3, #1
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	3b01      	subs	r3, #1
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c38:	e042      	b.n	8007cc0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f000 fcd4 	bl	80085ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d001      	beq.n	8007c4e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e04c      	b.n	8007ce8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	691a      	ldr	r2, [r3, #16]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c58:	b2d2      	uxtb	r2, r2
 8007c5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c60:	1c5a      	adds	r2, r3, #1
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	f003 0304 	and.w	r3, r3, #4
 8007c8a:	2b04      	cmp	r3, #4
 8007c8c:	d118      	bne.n	8007cc0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	691a      	ldr	r2, [r3, #16]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	b2d2      	uxtb	r2, r2
 8007c9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca0:	1c5a      	adds	r2, r3, #1
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007caa:	3b01      	subs	r3, #1
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f47f ae94 	bne.w	80079f2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	e000      	b.n	8007ce8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8007ce6:	2302      	movs	r3, #2
  }
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3728      	adds	r7, #40	; 0x28
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	00010004 	.word	0x00010004
 8007cf4:	20000048 	.word	0x20000048
 8007cf8:	14f8b589 	.word	0x14f8b589

08007cfc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b088      	sub	sp, #32
 8007d00:	af02      	add	r7, sp, #8
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	607a      	str	r2, [r7, #4]
 8007d06:	603b      	str	r3, [r7, #0]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	2b08      	cmp	r3, #8
 8007d16:	d006      	beq.n	8007d26 <I2C_MasterRequestWrite+0x2a>
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d003      	beq.n	8007d26 <I2C_MasterRequestWrite+0x2a>
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d24:	d108      	bne.n	8007d38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d34:	601a      	str	r2, [r3, #0]
 8007d36:	e00b      	b.n	8007d50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3c:	2b12      	cmp	r3, #18
 8007d3e:	d107      	bne.n	8007d50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f000 fa9b 	bl	8008298 <I2C_WaitOnFlagUntilTimeout>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00d      	beq.n	8007d84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d76:	d103      	bne.n	8007d80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e035      	b.n	8007df0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d8c:	d108      	bne.n	8007da0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d8e:	897b      	ldrh	r3, [r7, #10]
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	461a      	mov	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007d9c:	611a      	str	r2, [r3, #16]
 8007d9e:	e01b      	b.n	8007dd8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007da0:	897b      	ldrh	r3, [r7, #10]
 8007da2:	11db      	asrs	r3, r3, #7
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	f003 0306 	and.w	r3, r3, #6
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	f063 030f 	orn	r3, r3, #15
 8007db0:	b2da      	uxtb	r2, r3
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	490e      	ldr	r1, [pc, #56]	; (8007df8 <I2C_MasterRequestWrite+0xfc>)
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	f000 fae4 	bl	800838c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e010      	b.n	8007df0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007dce:	897b      	ldrh	r3, [r7, #10]
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	4907      	ldr	r1, [pc, #28]	; (8007dfc <I2C_MasterRequestWrite+0x100>)
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f000 fad4 	bl	800838c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e000      	b.n	8007df0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3718      	adds	r7, #24
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	00010008 	.word	0x00010008
 8007dfc:	00010002 	.word	0x00010002

08007e00 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b088      	sub	sp, #32
 8007e04:	af02      	add	r7, sp, #8
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	607a      	str	r2, [r7, #4]
 8007e0a:	603b      	str	r3, [r7, #0]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e14:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e24:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	2b08      	cmp	r3, #8
 8007e2a:	d006      	beq.n	8007e3a <I2C_MasterRequestRead+0x3a>
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d003      	beq.n	8007e3a <I2C_MasterRequestRead+0x3a>
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007e38:	d108      	bne.n	8007e4c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e48:	601a      	str	r2, [r3, #0]
 8007e4a:	e00b      	b.n	8007e64 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e50:	2b11      	cmp	r3, #17
 8007e52:	d107      	bne.n	8007e64 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	9300      	str	r3, [sp, #0]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f000 fa11 	bl	8008298 <I2C_WaitOnFlagUntilTimeout>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00d      	beq.n	8007e98 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e8a:	d103      	bne.n	8007e94 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e079      	b.n	8007f8c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ea0:	d108      	bne.n	8007eb4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007ea2:	897b      	ldrh	r3, [r7, #10]
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	f043 0301 	orr.w	r3, r3, #1
 8007eaa:	b2da      	uxtb	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	611a      	str	r2, [r3, #16]
 8007eb2:	e05f      	b.n	8007f74 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007eb4:	897b      	ldrh	r3, [r7, #10]
 8007eb6:	11db      	asrs	r3, r3, #7
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	f003 0306 	and.w	r3, r3, #6
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	f063 030f 	orn	r3, r3, #15
 8007ec4:	b2da      	uxtb	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	4930      	ldr	r1, [pc, #192]	; (8007f94 <I2C_MasterRequestRead+0x194>)
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f000 fa5a 	bl	800838c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e054      	b.n	8007f8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007ee2:	897b      	ldrh	r3, [r7, #10]
 8007ee4:	b2da      	uxtb	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	4929      	ldr	r1, [pc, #164]	; (8007f98 <I2C_MasterRequestRead+0x198>)
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f000 fa4a 	bl	800838c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d001      	beq.n	8007f02 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e044      	b.n	8007f8c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f02:	2300      	movs	r3, #0
 8007f04:	613b      	str	r3, [r7, #16]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	695b      	ldr	r3, [r3, #20]
 8007f0c:	613b      	str	r3, [r7, #16]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	613b      	str	r3, [r7, #16]
 8007f16:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f26:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f000 f9af 	bl	8008298 <I2C_WaitOnFlagUntilTimeout>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00d      	beq.n	8007f5c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f4e:	d103      	bne.n	8007f58 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f56:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e017      	b.n	8007f8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007f5c:	897b      	ldrh	r3, [r7, #10]
 8007f5e:	11db      	asrs	r3, r3, #7
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	f003 0306 	and.w	r3, r3, #6
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	f063 030e 	orn	r3, r3, #14
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	4907      	ldr	r1, [pc, #28]	; (8007f98 <I2C_MasterRequestRead+0x198>)
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f000 fa06 	bl	800838c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d001      	beq.n	8007f8a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e000      	b.n	8007f8c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3718      	adds	r7, #24
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	00010008 	.word	0x00010008
 8007f98:	00010002 	.word	0x00010002

08007f9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b088      	sub	sp, #32
 8007fa0:	af02      	add	r7, sp, #8
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	4608      	mov	r0, r1
 8007fa6:	4611      	mov	r1, r2
 8007fa8:	461a      	mov	r2, r3
 8007faa:	4603      	mov	r3, r0
 8007fac:	817b      	strh	r3, [r7, #10]
 8007fae:	460b      	mov	r3, r1
 8007fb0:	813b      	strh	r3, [r7, #8]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	6a3b      	ldr	r3, [r7, #32]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	f000 f960 	bl	8008298 <I2C_WaitOnFlagUntilTimeout>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00d      	beq.n	8007ffa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fec:	d103      	bne.n	8007ff6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ff4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e05f      	b.n	80080ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ffa:	897b      	ldrh	r3, [r7, #10]
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	461a      	mov	r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008008:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	6a3a      	ldr	r2, [r7, #32]
 800800e:	492d      	ldr	r1, [pc, #180]	; (80080c4 <I2C_RequestMemoryWrite+0x128>)
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f000 f9bb 	bl	800838c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	e04c      	b.n	80080ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008020:	2300      	movs	r3, #0
 8008022:	617b      	str	r3, [r7, #20]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	617b      	str	r3, [r7, #20]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	617b      	str	r3, [r7, #20]
 8008034:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008038:	6a39      	ldr	r1, [r7, #32]
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	f000 fa46 	bl	80084cc <I2C_WaitOnTXEFlagUntilTimeout>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00d      	beq.n	8008062 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804a:	2b04      	cmp	r3, #4
 800804c:	d107      	bne.n	800805e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800805c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e02b      	b.n	80080ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008062:	88fb      	ldrh	r3, [r7, #6]
 8008064:	2b01      	cmp	r3, #1
 8008066:	d105      	bne.n	8008074 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008068:	893b      	ldrh	r3, [r7, #8]
 800806a:	b2da      	uxtb	r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	611a      	str	r2, [r3, #16]
 8008072:	e021      	b.n	80080b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008074:	893b      	ldrh	r3, [r7, #8]
 8008076:	0a1b      	lsrs	r3, r3, #8
 8008078:	b29b      	uxth	r3, r3
 800807a:	b2da      	uxtb	r2, r3
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008084:	6a39      	ldr	r1, [r7, #32]
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f000 fa20 	bl	80084cc <I2C_WaitOnTXEFlagUntilTimeout>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00d      	beq.n	80080ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008096:	2b04      	cmp	r3, #4
 8008098:	d107      	bne.n	80080aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e005      	b.n	80080ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80080ae:	893b      	ldrh	r3, [r7, #8]
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3718      	adds	r7, #24
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	00010002 	.word	0x00010002

080080c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b088      	sub	sp, #32
 80080cc:	af02      	add	r7, sp, #8
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	4608      	mov	r0, r1
 80080d2:	4611      	mov	r1, r2
 80080d4:	461a      	mov	r2, r3
 80080d6:	4603      	mov	r3, r0
 80080d8:	817b      	strh	r3, [r7, #10]
 80080da:	460b      	mov	r3, r1
 80080dc:	813b      	strh	r3, [r7, #8]
 80080de:	4613      	mov	r3, r2
 80080e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80080f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008100:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	6a3b      	ldr	r3, [r7, #32]
 8008108:	2200      	movs	r2, #0
 800810a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f000 f8c2 	bl	8008298 <I2C_WaitOnFlagUntilTimeout>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00d      	beq.n	8008136 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008128:	d103      	bne.n	8008132 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008130:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e0aa      	b.n	800828c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008136:	897b      	ldrh	r3, [r7, #10]
 8008138:	b2db      	uxtb	r3, r3
 800813a:	461a      	mov	r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008144:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008148:	6a3a      	ldr	r2, [r7, #32]
 800814a:	4952      	ldr	r1, [pc, #328]	; (8008294 <I2C_RequestMemoryRead+0x1cc>)
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f000 f91d 	bl	800838c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d001      	beq.n	800815c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e097      	b.n	800828c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800815c:	2300      	movs	r3, #0
 800815e:	617b      	str	r3, [r7, #20]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	617b      	str	r3, [r7, #20]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	617b      	str	r3, [r7, #20]
 8008170:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008174:	6a39      	ldr	r1, [r7, #32]
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	f000 f9a8 	bl	80084cc <I2C_WaitOnTXEFlagUntilTimeout>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00d      	beq.n	800819e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008186:	2b04      	cmp	r3, #4
 8008188:	d107      	bne.n	800819a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008198:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e076      	b.n	800828c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800819e:	88fb      	ldrh	r3, [r7, #6]
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d105      	bne.n	80081b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80081a4:	893b      	ldrh	r3, [r7, #8]
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	611a      	str	r2, [r3, #16]
 80081ae:	e021      	b.n	80081f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80081b0:	893b      	ldrh	r3, [r7, #8]
 80081b2:	0a1b      	lsrs	r3, r3, #8
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	b2da      	uxtb	r2, r3
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081c0:	6a39      	ldr	r1, [r7, #32]
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f000 f982 	bl	80084cc <I2C_WaitOnTXEFlagUntilTimeout>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00d      	beq.n	80081ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d2:	2b04      	cmp	r3, #4
 80081d4:	d107      	bne.n	80081e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e050      	b.n	800828c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80081ea:	893b      	ldrh	r3, [r7, #8]
 80081ec:	b2da      	uxtb	r2, r3
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081f6:	6a39      	ldr	r1, [r7, #32]
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f000 f967 	bl	80084cc <I2C_WaitOnTXEFlagUntilTimeout>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d00d      	beq.n	8008220 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008208:	2b04      	cmp	r3, #4
 800820a:	d107      	bne.n	800821c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800821a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	e035      	b.n	800828c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800822e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	6a3b      	ldr	r3, [r7, #32]
 8008236:	2200      	movs	r2, #0
 8008238:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f000 f82b 	bl	8008298 <I2C_WaitOnFlagUntilTimeout>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00d      	beq.n	8008264 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008256:	d103      	bne.n	8008260 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800825e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008260:	2303      	movs	r3, #3
 8008262:	e013      	b.n	800828c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008264:	897b      	ldrh	r3, [r7, #10]
 8008266:	b2db      	uxtb	r3, r3
 8008268:	f043 0301 	orr.w	r3, r3, #1
 800826c:	b2da      	uxtb	r2, r3
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008276:	6a3a      	ldr	r2, [r7, #32]
 8008278:	4906      	ldr	r1, [pc, #24]	; (8008294 <I2C_RequestMemoryRead+0x1cc>)
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f000 f886 	bl	800838c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d001      	beq.n	800828a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	e000      	b.n	800828c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	00010002 	.word	0x00010002

08008298 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	603b      	str	r3, [r7, #0]
 80082a4:	4613      	mov	r3, r2
 80082a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80082a8:	e048      	b.n	800833c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b0:	d044      	beq.n	800833c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082b2:	f7fe fa3b 	bl	800672c <HAL_GetTick>
 80082b6:	4602      	mov	r2, r0
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d302      	bcc.n	80082c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d139      	bne.n	800833c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	0c1b      	lsrs	r3, r3, #16
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d10d      	bne.n	80082ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	695b      	ldr	r3, [r3, #20]
 80082d8:	43da      	mvns	r2, r3
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	4013      	ands	r3, r2
 80082de:	b29b      	uxth	r3, r3
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	bf0c      	ite	eq
 80082e4:	2301      	moveq	r3, #1
 80082e6:	2300      	movne	r3, #0
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	461a      	mov	r2, r3
 80082ec:	e00c      	b.n	8008308 <I2C_WaitOnFlagUntilTimeout+0x70>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	43da      	mvns	r2, r3
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	4013      	ands	r3, r2
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	bf0c      	ite	eq
 8008300:	2301      	moveq	r3, #1
 8008302:	2300      	movne	r3, #0
 8008304:	b2db      	uxtb	r3, r3
 8008306:	461a      	mov	r2, r3
 8008308:	79fb      	ldrb	r3, [r7, #7]
 800830a:	429a      	cmp	r2, r3
 800830c:	d116      	bne.n	800833c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2200      	movs	r2, #0
 8008312:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2220      	movs	r2, #32
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008328:	f043 0220 	orr.w	r2, r3, #32
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	e023      	b.n	8008384 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	0c1b      	lsrs	r3, r3, #16
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b01      	cmp	r3, #1
 8008344:	d10d      	bne.n	8008362 <I2C_WaitOnFlagUntilTimeout+0xca>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	43da      	mvns	r2, r3
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	4013      	ands	r3, r2
 8008352:	b29b      	uxth	r3, r3
 8008354:	2b00      	cmp	r3, #0
 8008356:	bf0c      	ite	eq
 8008358:	2301      	moveq	r3, #1
 800835a:	2300      	movne	r3, #0
 800835c:	b2db      	uxtb	r3, r3
 800835e:	461a      	mov	r2, r3
 8008360:	e00c      	b.n	800837c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	43da      	mvns	r2, r3
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	4013      	ands	r3, r2
 800836e:	b29b      	uxth	r3, r3
 8008370:	2b00      	cmp	r3, #0
 8008372:	bf0c      	ite	eq
 8008374:	2301      	moveq	r3, #1
 8008376:	2300      	movne	r3, #0
 8008378:	b2db      	uxtb	r3, r3
 800837a:	461a      	mov	r2, r3
 800837c:	79fb      	ldrb	r3, [r7, #7]
 800837e:	429a      	cmp	r2, r3
 8008380:	d093      	beq.n	80082aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
 8008398:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800839a:	e071      	b.n	8008480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083aa:	d123      	bne.n	80083f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80083c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2220      	movs	r2, #32
 80083d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e0:	f043 0204 	orr.w	r2, r3, #4
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e067      	b.n	80084c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fa:	d041      	beq.n	8008480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083fc:	f7fe f996 	bl	800672c <HAL_GetTick>
 8008400:	4602      	mov	r2, r0
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	1ad3      	subs	r3, r2, r3
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	429a      	cmp	r2, r3
 800840a:	d302      	bcc.n	8008412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d136      	bne.n	8008480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	0c1b      	lsrs	r3, r3, #16
 8008416:	b2db      	uxtb	r3, r3
 8008418:	2b01      	cmp	r3, #1
 800841a:	d10c      	bne.n	8008436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	43da      	mvns	r2, r3
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	4013      	ands	r3, r2
 8008428:	b29b      	uxth	r3, r3
 800842a:	2b00      	cmp	r3, #0
 800842c:	bf14      	ite	ne
 800842e:	2301      	movne	r3, #1
 8008430:	2300      	moveq	r3, #0
 8008432:	b2db      	uxtb	r3, r3
 8008434:	e00b      	b.n	800844e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	699b      	ldr	r3, [r3, #24]
 800843c:	43da      	mvns	r2, r3
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	4013      	ands	r3, r2
 8008442:	b29b      	uxth	r3, r3
 8008444:	2b00      	cmp	r3, #0
 8008446:	bf14      	ite	ne
 8008448:	2301      	movne	r3, #1
 800844a:	2300      	moveq	r3, #0
 800844c:	b2db      	uxtb	r3, r3
 800844e:	2b00      	cmp	r3, #0
 8008450:	d016      	beq.n	8008480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2220      	movs	r2, #32
 800845c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2200      	movs	r2, #0
 8008464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846c:	f043 0220 	orr.w	r2, r3, #32
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e021      	b.n	80084c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	0c1b      	lsrs	r3, r3, #16
 8008484:	b2db      	uxtb	r3, r3
 8008486:	2b01      	cmp	r3, #1
 8008488:	d10c      	bne.n	80084a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	695b      	ldr	r3, [r3, #20]
 8008490:	43da      	mvns	r2, r3
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	4013      	ands	r3, r2
 8008496:	b29b      	uxth	r3, r3
 8008498:	2b00      	cmp	r3, #0
 800849a:	bf14      	ite	ne
 800849c:	2301      	movne	r3, #1
 800849e:	2300      	moveq	r3, #0
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	e00b      	b.n	80084bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	43da      	mvns	r2, r3
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	4013      	ands	r3, r2
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	bf14      	ite	ne
 80084b6:	2301      	movne	r3, #1
 80084b8:	2300      	moveq	r3, #0
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f47f af6d 	bne.w	800839c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80084d8:	e034      	b.n	8008544 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f000 f8e3 	bl	80086a6 <I2C_IsAcknowledgeFailed>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d001      	beq.n	80084ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e034      	b.n	8008554 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f0:	d028      	beq.n	8008544 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084f2:	f7fe f91b 	bl	800672c <HAL_GetTick>
 80084f6:	4602      	mov	r2, r0
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	1ad3      	subs	r3, r2, r3
 80084fc:	68ba      	ldr	r2, [r7, #8]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d302      	bcc.n	8008508 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d11d      	bne.n	8008544 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008512:	2b80      	cmp	r3, #128	; 0x80
 8008514:	d016      	beq.n	8008544 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2220      	movs	r2, #32
 8008520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008530:	f043 0220 	orr.w	r2, r3, #32
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2200      	movs	r2, #0
 800853c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e007      	b.n	8008554 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800854e:	2b80      	cmp	r3, #128	; 0x80
 8008550:	d1c3      	bne.n	80084da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008568:	e034      	b.n	80085d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f000 f89b 	bl	80086a6 <I2C_IsAcknowledgeFailed>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d001      	beq.n	800857a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e034      	b.n	80085e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008580:	d028      	beq.n	80085d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008582:	f7fe f8d3 	bl	800672c <HAL_GetTick>
 8008586:	4602      	mov	r2, r0
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	429a      	cmp	r2, r3
 8008590:	d302      	bcc.n	8008598 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d11d      	bne.n	80085d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	f003 0304 	and.w	r3, r3, #4
 80085a2:	2b04      	cmp	r3, #4
 80085a4:	d016      	beq.n	80085d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2220      	movs	r2, #32
 80085b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c0:	f043 0220 	orr.w	r2, r3, #32
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e007      	b.n	80085e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	f003 0304 	and.w	r3, r3, #4
 80085de:	2b04      	cmp	r3, #4
 80085e0:	d1c3      	bne.n	800856a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80085f8:	e049      	b.n	800868e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	695b      	ldr	r3, [r3, #20]
 8008600:	f003 0310 	and.w	r3, r3, #16
 8008604:	2b10      	cmp	r3, #16
 8008606:	d119      	bne.n	800863c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f06f 0210 	mvn.w	r2, #16
 8008610:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2200      	movs	r2, #0
 8008616:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2220      	movs	r2, #32
 800861c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	e030      	b.n	800869e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800863c:	f7fe f876 	bl	800672c <HAL_GetTick>
 8008640:	4602      	mov	r2, r0
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	429a      	cmp	r2, r3
 800864a:	d302      	bcc.n	8008652 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d11d      	bne.n	800868e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	695b      	ldr	r3, [r3, #20]
 8008658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800865c:	2b40      	cmp	r3, #64	; 0x40
 800865e:	d016      	beq.n	800868e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2220      	movs	r2, #32
 800866a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867a:	f043 0220 	orr.w	r2, r3, #32
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e007      	b.n	800869e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	695b      	ldr	r3, [r3, #20]
 8008694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008698:	2b40      	cmp	r3, #64	; 0x40
 800869a:	d1ae      	bne.n	80085fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b083      	sub	sp, #12
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	695b      	ldr	r3, [r3, #20]
 80086b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086bc:	d11b      	bne.n	80086f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80086c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2220      	movs	r2, #32
 80086d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e2:	f043 0204 	orr.w	r2, r3, #4
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e000      	b.n	80086f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80086f6:	2300      	movs	r3, #0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bc80      	pop	{r7}
 8008700:	4770      	bx	lr
	...

08008704 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b086      	sub	sp, #24
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d101      	bne.n	8008716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e272      	b.n	8008bfc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 0301 	and.w	r3, r3, #1
 800871e:	2b00      	cmp	r3, #0
 8008720:	f000 8087 	beq.w	8008832 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008724:	4b92      	ldr	r3, [pc, #584]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	f003 030c 	and.w	r3, r3, #12
 800872c:	2b04      	cmp	r3, #4
 800872e:	d00c      	beq.n	800874a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008730:	4b8f      	ldr	r3, [pc, #572]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	f003 030c 	and.w	r3, r3, #12
 8008738:	2b08      	cmp	r3, #8
 800873a:	d112      	bne.n	8008762 <HAL_RCC_OscConfig+0x5e>
 800873c:	4b8c      	ldr	r3, [pc, #560]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008748:	d10b      	bne.n	8008762 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800874a:	4b89      	ldr	r3, [pc, #548]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d06c      	beq.n	8008830 <HAL_RCC_OscConfig+0x12c>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d168      	bne.n	8008830 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	e24c      	b.n	8008bfc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800876a:	d106      	bne.n	800877a <HAL_RCC_OscConfig+0x76>
 800876c:	4b80      	ldr	r3, [pc, #512]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a7f      	ldr	r2, [pc, #508]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 8008772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008776:	6013      	str	r3, [r2, #0]
 8008778:	e02e      	b.n	80087d8 <HAL_RCC_OscConfig+0xd4>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d10c      	bne.n	800879c <HAL_RCC_OscConfig+0x98>
 8008782:	4b7b      	ldr	r3, [pc, #492]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a7a      	ldr	r2, [pc, #488]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 8008788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800878c:	6013      	str	r3, [r2, #0]
 800878e:	4b78      	ldr	r3, [pc, #480]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a77      	ldr	r2, [pc, #476]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 8008794:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008798:	6013      	str	r3, [r2, #0]
 800879a:	e01d      	b.n	80087d8 <HAL_RCC_OscConfig+0xd4>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087a4:	d10c      	bne.n	80087c0 <HAL_RCC_OscConfig+0xbc>
 80087a6:	4b72      	ldr	r3, [pc, #456]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a71      	ldr	r2, [pc, #452]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 80087ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087b0:	6013      	str	r3, [r2, #0]
 80087b2:	4b6f      	ldr	r3, [pc, #444]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a6e      	ldr	r2, [pc, #440]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 80087b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087bc:	6013      	str	r3, [r2, #0]
 80087be:	e00b      	b.n	80087d8 <HAL_RCC_OscConfig+0xd4>
 80087c0:	4b6b      	ldr	r3, [pc, #428]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a6a      	ldr	r2, [pc, #424]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 80087c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087ca:	6013      	str	r3, [r2, #0]
 80087cc:	4b68      	ldr	r3, [pc, #416]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a67      	ldr	r2, [pc, #412]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 80087d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d013      	beq.n	8008808 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087e0:	f7fd ffa4 	bl	800672c <HAL_GetTick>
 80087e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087e6:	e008      	b.n	80087fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087e8:	f7fd ffa0 	bl	800672c <HAL_GetTick>
 80087ec:	4602      	mov	r2, r0
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	2b64      	cmp	r3, #100	; 0x64
 80087f4:	d901      	bls.n	80087fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e200      	b.n	8008bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087fa:	4b5d      	ldr	r3, [pc, #372]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008802:	2b00      	cmp	r3, #0
 8008804:	d0f0      	beq.n	80087e8 <HAL_RCC_OscConfig+0xe4>
 8008806:	e014      	b.n	8008832 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008808:	f7fd ff90 	bl	800672c <HAL_GetTick>
 800880c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800880e:	e008      	b.n	8008822 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008810:	f7fd ff8c 	bl	800672c <HAL_GetTick>
 8008814:	4602      	mov	r2, r0
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	1ad3      	subs	r3, r2, r3
 800881a:	2b64      	cmp	r3, #100	; 0x64
 800881c:	d901      	bls.n	8008822 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e1ec      	b.n	8008bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008822:	4b53      	ldr	r3, [pc, #332]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1f0      	bne.n	8008810 <HAL_RCC_OscConfig+0x10c>
 800882e:	e000      	b.n	8008832 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0302 	and.w	r3, r3, #2
 800883a:	2b00      	cmp	r3, #0
 800883c:	d063      	beq.n	8008906 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800883e:	4b4c      	ldr	r3, [pc, #304]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	f003 030c 	and.w	r3, r3, #12
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00b      	beq.n	8008862 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800884a:	4b49      	ldr	r3, [pc, #292]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	f003 030c 	and.w	r3, r3, #12
 8008852:	2b08      	cmp	r3, #8
 8008854:	d11c      	bne.n	8008890 <HAL_RCC_OscConfig+0x18c>
 8008856:	4b46      	ldr	r3, [pc, #280]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800885e:	2b00      	cmp	r3, #0
 8008860:	d116      	bne.n	8008890 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008862:	4b43      	ldr	r3, [pc, #268]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f003 0302 	and.w	r3, r3, #2
 800886a:	2b00      	cmp	r3, #0
 800886c:	d005      	beq.n	800887a <HAL_RCC_OscConfig+0x176>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	2b01      	cmp	r3, #1
 8008874:	d001      	beq.n	800887a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e1c0      	b.n	8008bfc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800887a:	4b3d      	ldr	r3, [pc, #244]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	00db      	lsls	r3, r3, #3
 8008888:	4939      	ldr	r1, [pc, #228]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 800888a:	4313      	orrs	r3, r2
 800888c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800888e:	e03a      	b.n	8008906 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d020      	beq.n	80088da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008898:	4b36      	ldr	r3, [pc, #216]	; (8008974 <HAL_RCC_OscConfig+0x270>)
 800889a:	2201      	movs	r2, #1
 800889c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800889e:	f7fd ff45 	bl	800672c <HAL_GetTick>
 80088a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088a4:	e008      	b.n	80088b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088a6:	f7fd ff41 	bl	800672c <HAL_GetTick>
 80088aa:	4602      	mov	r2, r0
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	1ad3      	subs	r3, r2, r3
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d901      	bls.n	80088b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80088b4:	2303      	movs	r3, #3
 80088b6:	e1a1      	b.n	8008bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088b8:	4b2d      	ldr	r3, [pc, #180]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 0302 	and.w	r3, r3, #2
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d0f0      	beq.n	80088a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088c4:	4b2a      	ldr	r3, [pc, #168]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	695b      	ldr	r3, [r3, #20]
 80088d0:	00db      	lsls	r3, r3, #3
 80088d2:	4927      	ldr	r1, [pc, #156]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 80088d4:	4313      	orrs	r3, r2
 80088d6:	600b      	str	r3, [r1, #0]
 80088d8:	e015      	b.n	8008906 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088da:	4b26      	ldr	r3, [pc, #152]	; (8008974 <HAL_RCC_OscConfig+0x270>)
 80088dc:	2200      	movs	r2, #0
 80088de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088e0:	f7fd ff24 	bl	800672c <HAL_GetTick>
 80088e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088e6:	e008      	b.n	80088fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088e8:	f7fd ff20 	bl	800672c <HAL_GetTick>
 80088ec:	4602      	mov	r2, r0
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d901      	bls.n	80088fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	e180      	b.n	8008bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088fa:	4b1d      	ldr	r3, [pc, #116]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 0302 	and.w	r3, r3, #2
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1f0      	bne.n	80088e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 0308 	and.w	r3, r3, #8
 800890e:	2b00      	cmp	r3, #0
 8008910:	d03a      	beq.n	8008988 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d019      	beq.n	800894e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800891a:	4b17      	ldr	r3, [pc, #92]	; (8008978 <HAL_RCC_OscConfig+0x274>)
 800891c:	2201      	movs	r2, #1
 800891e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008920:	f7fd ff04 	bl	800672c <HAL_GetTick>
 8008924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008926:	e008      	b.n	800893a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008928:	f7fd ff00 	bl	800672c <HAL_GetTick>
 800892c:	4602      	mov	r2, r0
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	2b02      	cmp	r3, #2
 8008934:	d901      	bls.n	800893a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008936:	2303      	movs	r3, #3
 8008938:	e160      	b.n	8008bfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800893a:	4b0d      	ldr	r3, [pc, #52]	; (8008970 <HAL_RCC_OscConfig+0x26c>)
 800893c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893e:	f003 0302 	and.w	r3, r3, #2
 8008942:	2b00      	cmp	r3, #0
 8008944:	d0f0      	beq.n	8008928 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008946:	2001      	movs	r0, #1
 8008948:	f000 faba 	bl	8008ec0 <RCC_Delay>
 800894c:	e01c      	b.n	8008988 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800894e:	4b0a      	ldr	r3, [pc, #40]	; (8008978 <HAL_RCC_OscConfig+0x274>)
 8008950:	2200      	movs	r2, #0
 8008952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008954:	f7fd feea 	bl	800672c <HAL_GetTick>
 8008958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800895a:	e00f      	b.n	800897c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800895c:	f7fd fee6 	bl	800672c <HAL_GetTick>
 8008960:	4602      	mov	r2, r0
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	2b02      	cmp	r3, #2
 8008968:	d908      	bls.n	800897c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800896a:	2303      	movs	r3, #3
 800896c:	e146      	b.n	8008bfc <HAL_RCC_OscConfig+0x4f8>
 800896e:	bf00      	nop
 8008970:	40021000 	.word	0x40021000
 8008974:	42420000 	.word	0x42420000
 8008978:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800897c:	4b92      	ldr	r3, [pc, #584]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 800897e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008980:	f003 0302 	and.w	r3, r3, #2
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1e9      	bne.n	800895c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 0304 	and.w	r3, r3, #4
 8008990:	2b00      	cmp	r3, #0
 8008992:	f000 80a6 	beq.w	8008ae2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008996:	2300      	movs	r3, #0
 8008998:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800899a:	4b8b      	ldr	r3, [pc, #556]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 800899c:	69db      	ldr	r3, [r3, #28]
 800899e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d10d      	bne.n	80089c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089a6:	4b88      	ldr	r3, [pc, #544]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 80089a8:	69db      	ldr	r3, [r3, #28]
 80089aa:	4a87      	ldr	r2, [pc, #540]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 80089ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089b0:	61d3      	str	r3, [r2, #28]
 80089b2:	4b85      	ldr	r3, [pc, #532]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 80089b4:	69db      	ldr	r3, [r3, #28]
 80089b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089ba:	60bb      	str	r3, [r7, #8]
 80089bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089be:	2301      	movs	r3, #1
 80089c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089c2:	4b82      	ldr	r3, [pc, #520]	; (8008bcc <HAL_RCC_OscConfig+0x4c8>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d118      	bne.n	8008a00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80089ce:	4b7f      	ldr	r3, [pc, #508]	; (8008bcc <HAL_RCC_OscConfig+0x4c8>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a7e      	ldr	r2, [pc, #504]	; (8008bcc <HAL_RCC_OscConfig+0x4c8>)
 80089d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089da:	f7fd fea7 	bl	800672c <HAL_GetTick>
 80089de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089e0:	e008      	b.n	80089f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089e2:	f7fd fea3 	bl	800672c <HAL_GetTick>
 80089e6:	4602      	mov	r2, r0
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	1ad3      	subs	r3, r2, r3
 80089ec:	2b64      	cmp	r3, #100	; 0x64
 80089ee:	d901      	bls.n	80089f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80089f0:	2303      	movs	r3, #3
 80089f2:	e103      	b.n	8008bfc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089f4:	4b75      	ldr	r3, [pc, #468]	; (8008bcc <HAL_RCC_OscConfig+0x4c8>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d0f0      	beq.n	80089e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d106      	bne.n	8008a16 <HAL_RCC_OscConfig+0x312>
 8008a08:	4b6f      	ldr	r3, [pc, #444]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 8008a0a:	6a1b      	ldr	r3, [r3, #32]
 8008a0c:	4a6e      	ldr	r2, [pc, #440]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 8008a0e:	f043 0301 	orr.w	r3, r3, #1
 8008a12:	6213      	str	r3, [r2, #32]
 8008a14:	e02d      	b.n	8008a72 <HAL_RCC_OscConfig+0x36e>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10c      	bne.n	8008a38 <HAL_RCC_OscConfig+0x334>
 8008a1e:	4b6a      	ldr	r3, [pc, #424]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 8008a20:	6a1b      	ldr	r3, [r3, #32]
 8008a22:	4a69      	ldr	r2, [pc, #420]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 8008a24:	f023 0301 	bic.w	r3, r3, #1
 8008a28:	6213      	str	r3, [r2, #32]
 8008a2a:	4b67      	ldr	r3, [pc, #412]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	4a66      	ldr	r2, [pc, #408]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 8008a30:	f023 0304 	bic.w	r3, r3, #4
 8008a34:	6213      	str	r3, [r2, #32]
 8008a36:	e01c      	b.n	8008a72 <HAL_RCC_OscConfig+0x36e>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	2b05      	cmp	r3, #5
 8008a3e:	d10c      	bne.n	8008a5a <HAL_RCC_OscConfig+0x356>
 8008a40:	4b61      	ldr	r3, [pc, #388]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 8008a42:	6a1b      	ldr	r3, [r3, #32]
 8008a44:	4a60      	ldr	r2, [pc, #384]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 8008a46:	f043 0304 	orr.w	r3, r3, #4
 8008a4a:	6213      	str	r3, [r2, #32]
 8008a4c:	4b5e      	ldr	r3, [pc, #376]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 8008a4e:	6a1b      	ldr	r3, [r3, #32]
 8008a50:	4a5d      	ldr	r2, [pc, #372]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 8008a52:	f043 0301 	orr.w	r3, r3, #1
 8008a56:	6213      	str	r3, [r2, #32]
 8008a58:	e00b      	b.n	8008a72 <HAL_RCC_OscConfig+0x36e>
 8008a5a:	4b5b      	ldr	r3, [pc, #364]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 8008a5c:	6a1b      	ldr	r3, [r3, #32]
 8008a5e:	4a5a      	ldr	r2, [pc, #360]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 8008a60:	f023 0301 	bic.w	r3, r3, #1
 8008a64:	6213      	str	r3, [r2, #32]
 8008a66:	4b58      	ldr	r3, [pc, #352]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 8008a68:	6a1b      	ldr	r3, [r3, #32]
 8008a6a:	4a57      	ldr	r2, [pc, #348]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 8008a6c:	f023 0304 	bic.w	r3, r3, #4
 8008a70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d015      	beq.n	8008aa6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a7a:	f7fd fe57 	bl	800672c <HAL_GetTick>
 8008a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a80:	e00a      	b.n	8008a98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a82:	f7fd fe53 	bl	800672c <HAL_GetTick>
 8008a86:	4602      	mov	r2, r0
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d901      	bls.n	8008a98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008a94:	2303      	movs	r3, #3
 8008a96:	e0b1      	b.n	8008bfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a98:	4b4b      	ldr	r3, [pc, #300]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 8008a9a:	6a1b      	ldr	r3, [r3, #32]
 8008a9c:	f003 0302 	and.w	r3, r3, #2
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d0ee      	beq.n	8008a82 <HAL_RCC_OscConfig+0x37e>
 8008aa4:	e014      	b.n	8008ad0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008aa6:	f7fd fe41 	bl	800672c <HAL_GetTick>
 8008aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008aac:	e00a      	b.n	8008ac4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008aae:	f7fd fe3d 	bl	800672c <HAL_GetTick>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	1ad3      	subs	r3, r2, r3
 8008ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d901      	bls.n	8008ac4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e09b      	b.n	8008bfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ac4:	4b40      	ldr	r3, [pc, #256]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 8008ac6:	6a1b      	ldr	r3, [r3, #32]
 8008ac8:	f003 0302 	and.w	r3, r3, #2
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1ee      	bne.n	8008aae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008ad0:	7dfb      	ldrb	r3, [r7, #23]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d105      	bne.n	8008ae2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ad6:	4b3c      	ldr	r3, [pc, #240]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 8008ad8:	69db      	ldr	r3, [r3, #28]
 8008ada:	4a3b      	ldr	r2, [pc, #236]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 8008adc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ae0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	69db      	ldr	r3, [r3, #28]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	f000 8087 	beq.w	8008bfa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008aec:	4b36      	ldr	r3, [pc, #216]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	f003 030c 	and.w	r3, r3, #12
 8008af4:	2b08      	cmp	r3, #8
 8008af6:	d061      	beq.n	8008bbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	69db      	ldr	r3, [r3, #28]
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d146      	bne.n	8008b8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b00:	4b33      	ldr	r3, [pc, #204]	; (8008bd0 <HAL_RCC_OscConfig+0x4cc>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b06:	f7fd fe11 	bl	800672c <HAL_GetTick>
 8008b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008b0c:	e008      	b.n	8008b20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b0e:	f7fd fe0d 	bl	800672c <HAL_GetTick>
 8008b12:	4602      	mov	r2, r0
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d901      	bls.n	8008b20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	e06d      	b.n	8008bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008b20:	4b29      	ldr	r3, [pc, #164]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1f0      	bne.n	8008b0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a1b      	ldr	r3, [r3, #32]
 8008b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b34:	d108      	bne.n	8008b48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008b36:	4b24      	ldr	r3, [pc, #144]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	4921      	ldr	r1, [pc, #132]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 8008b44:	4313      	orrs	r3, r2
 8008b46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b48:	4b1f      	ldr	r3, [pc, #124]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a19      	ldr	r1, [r3, #32]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b58:	430b      	orrs	r3, r1
 8008b5a:	491b      	ldr	r1, [pc, #108]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b60:	4b1b      	ldr	r3, [pc, #108]	; (8008bd0 <HAL_RCC_OscConfig+0x4cc>)
 8008b62:	2201      	movs	r2, #1
 8008b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b66:	f7fd fde1 	bl	800672c <HAL_GetTick>
 8008b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008b6c:	e008      	b.n	8008b80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b6e:	f7fd fddd 	bl	800672c <HAL_GetTick>
 8008b72:	4602      	mov	r2, r0
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	1ad3      	subs	r3, r2, r3
 8008b78:	2b02      	cmp	r3, #2
 8008b7a:	d901      	bls.n	8008b80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	e03d      	b.n	8008bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008b80:	4b11      	ldr	r3, [pc, #68]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d0f0      	beq.n	8008b6e <HAL_RCC_OscConfig+0x46a>
 8008b8c:	e035      	b.n	8008bfa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b8e:	4b10      	ldr	r3, [pc, #64]	; (8008bd0 <HAL_RCC_OscConfig+0x4cc>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b94:	f7fd fdca 	bl	800672c <HAL_GetTick>
 8008b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008b9a:	e008      	b.n	8008bae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b9c:	f7fd fdc6 	bl	800672c <HAL_GetTick>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d901      	bls.n	8008bae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008baa:	2303      	movs	r3, #3
 8008bac:	e026      	b.n	8008bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008bae:	4b06      	ldr	r3, [pc, #24]	; (8008bc8 <HAL_RCC_OscConfig+0x4c4>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1f0      	bne.n	8008b9c <HAL_RCC_OscConfig+0x498>
 8008bba:	e01e      	b.n	8008bfa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	69db      	ldr	r3, [r3, #28]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d107      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e019      	b.n	8008bfc <HAL_RCC_OscConfig+0x4f8>
 8008bc8:	40021000 	.word	0x40021000
 8008bcc:	40007000 	.word	0x40007000
 8008bd0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008bd4:	4b0b      	ldr	r3, [pc, #44]	; (8008c04 <HAL_RCC_OscConfig+0x500>)
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a1b      	ldr	r3, [r3, #32]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d106      	bne.n	8008bf6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d001      	beq.n	8008bfa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e000      	b.n	8008bfc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3718      	adds	r7, #24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	40021000 	.word	0x40021000

08008c08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d101      	bne.n	8008c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e0d0      	b.n	8008dbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008c1c:	4b6a      	ldr	r3, [pc, #424]	; (8008dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 0307 	and.w	r3, r3, #7
 8008c24:	683a      	ldr	r2, [r7, #0]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d910      	bls.n	8008c4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c2a:	4b67      	ldr	r3, [pc, #412]	; (8008dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f023 0207 	bic.w	r2, r3, #7
 8008c32:	4965      	ldr	r1, [pc, #404]	; (8008dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	4313      	orrs	r3, r2
 8008c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c3a:	4b63      	ldr	r3, [pc, #396]	; (8008dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 0307 	and.w	r3, r3, #7
 8008c42:	683a      	ldr	r2, [r7, #0]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d001      	beq.n	8008c4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e0b8      	b.n	8008dbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 0302 	and.w	r3, r3, #2
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d020      	beq.n	8008c9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 0304 	and.w	r3, r3, #4
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d005      	beq.n	8008c70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008c64:	4b59      	ldr	r3, [pc, #356]	; (8008dcc <HAL_RCC_ClockConfig+0x1c4>)
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	4a58      	ldr	r2, [pc, #352]	; (8008dcc <HAL_RCC_ClockConfig+0x1c4>)
 8008c6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008c6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 0308 	and.w	r3, r3, #8
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d005      	beq.n	8008c88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008c7c:	4b53      	ldr	r3, [pc, #332]	; (8008dcc <HAL_RCC_ClockConfig+0x1c4>)
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	4a52      	ldr	r2, [pc, #328]	; (8008dcc <HAL_RCC_ClockConfig+0x1c4>)
 8008c82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008c86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c88:	4b50      	ldr	r3, [pc, #320]	; (8008dcc <HAL_RCC_ClockConfig+0x1c4>)
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	494d      	ldr	r1, [pc, #308]	; (8008dcc <HAL_RCC_ClockConfig+0x1c4>)
 8008c96:	4313      	orrs	r3, r2
 8008c98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 0301 	and.w	r3, r3, #1
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d040      	beq.n	8008d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d107      	bne.n	8008cbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cae:	4b47      	ldr	r3, [pc, #284]	; (8008dcc <HAL_RCC_ClockConfig+0x1c4>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d115      	bne.n	8008ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e07f      	b.n	8008dbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d107      	bne.n	8008cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cc6:	4b41      	ldr	r3, [pc, #260]	; (8008dcc <HAL_RCC_ClockConfig+0x1c4>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d109      	bne.n	8008ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e073      	b.n	8008dbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cd6:	4b3d      	ldr	r3, [pc, #244]	; (8008dcc <HAL_RCC_ClockConfig+0x1c4>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f003 0302 	and.w	r3, r3, #2
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d101      	bne.n	8008ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e06b      	b.n	8008dbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ce6:	4b39      	ldr	r3, [pc, #228]	; (8008dcc <HAL_RCC_ClockConfig+0x1c4>)
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	f023 0203 	bic.w	r2, r3, #3
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	4936      	ldr	r1, [pc, #216]	; (8008dcc <HAL_RCC_ClockConfig+0x1c4>)
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008cf8:	f7fd fd18 	bl	800672c <HAL_GetTick>
 8008cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cfe:	e00a      	b.n	8008d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d00:	f7fd fd14 	bl	800672c <HAL_GetTick>
 8008d04:	4602      	mov	r2, r0
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	1ad3      	subs	r3, r2, r3
 8008d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d901      	bls.n	8008d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008d12:	2303      	movs	r3, #3
 8008d14:	e053      	b.n	8008dbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d16:	4b2d      	ldr	r3, [pc, #180]	; (8008dcc <HAL_RCC_ClockConfig+0x1c4>)
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	f003 020c 	and.w	r2, r3, #12
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d1eb      	bne.n	8008d00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008d28:	4b27      	ldr	r3, [pc, #156]	; (8008dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 0307 	and.w	r3, r3, #7
 8008d30:	683a      	ldr	r2, [r7, #0]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d210      	bcs.n	8008d58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d36:	4b24      	ldr	r3, [pc, #144]	; (8008dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f023 0207 	bic.w	r2, r3, #7
 8008d3e:	4922      	ldr	r1, [pc, #136]	; (8008dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d46:	4b20      	ldr	r3, [pc, #128]	; (8008dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 0307 	and.w	r3, r3, #7
 8008d4e:	683a      	ldr	r2, [r7, #0]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d001      	beq.n	8008d58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	e032      	b.n	8008dbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f003 0304 	and.w	r3, r3, #4
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d008      	beq.n	8008d76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d64:	4b19      	ldr	r3, [pc, #100]	; (8008dcc <HAL_RCC_ClockConfig+0x1c4>)
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	4916      	ldr	r1, [pc, #88]	; (8008dcc <HAL_RCC_ClockConfig+0x1c4>)
 8008d72:	4313      	orrs	r3, r2
 8008d74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 0308 	and.w	r3, r3, #8
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d009      	beq.n	8008d96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008d82:	4b12      	ldr	r3, [pc, #72]	; (8008dcc <HAL_RCC_ClockConfig+0x1c4>)
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	00db      	lsls	r3, r3, #3
 8008d90:	490e      	ldr	r1, [pc, #56]	; (8008dcc <HAL_RCC_ClockConfig+0x1c4>)
 8008d92:	4313      	orrs	r3, r2
 8008d94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008d96:	f000 f821 	bl	8008ddc <HAL_RCC_GetSysClockFreq>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	4b0b      	ldr	r3, [pc, #44]	; (8008dcc <HAL_RCC_ClockConfig+0x1c4>)
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	091b      	lsrs	r3, r3, #4
 8008da2:	f003 030f 	and.w	r3, r3, #15
 8008da6:	490a      	ldr	r1, [pc, #40]	; (8008dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8008da8:	5ccb      	ldrb	r3, [r1, r3]
 8008daa:	fa22 f303 	lsr.w	r3, r2, r3
 8008dae:	4a09      	ldr	r2, [pc, #36]	; (8008dd4 <HAL_RCC_ClockConfig+0x1cc>)
 8008db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008db2:	4b09      	ldr	r3, [pc, #36]	; (8008dd8 <HAL_RCC_ClockConfig+0x1d0>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fd fc76 	bl	80066a8 <HAL_InitTick>

  return HAL_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	40022000 	.word	0x40022000
 8008dcc:	40021000 	.word	0x40021000
 8008dd0:	0800b084 	.word	0x0800b084
 8008dd4:	20000048 	.word	0x20000048
 8008dd8:	2000004c 	.word	0x2000004c

08008ddc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b087      	sub	sp, #28
 8008de0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008de2:	2300      	movs	r3, #0
 8008de4:	60fb      	str	r3, [r7, #12]
 8008de6:	2300      	movs	r3, #0
 8008de8:	60bb      	str	r3, [r7, #8]
 8008dea:	2300      	movs	r3, #0
 8008dec:	617b      	str	r3, [r7, #20]
 8008dee:	2300      	movs	r3, #0
 8008df0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008df2:	2300      	movs	r3, #0
 8008df4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008df6:	4b1e      	ldr	r3, [pc, #120]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x94>)
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f003 030c 	and.w	r3, r3, #12
 8008e02:	2b04      	cmp	r3, #4
 8008e04:	d002      	beq.n	8008e0c <HAL_RCC_GetSysClockFreq+0x30>
 8008e06:	2b08      	cmp	r3, #8
 8008e08:	d003      	beq.n	8008e12 <HAL_RCC_GetSysClockFreq+0x36>
 8008e0a:	e027      	b.n	8008e5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008e0c:	4b19      	ldr	r3, [pc, #100]	; (8008e74 <HAL_RCC_GetSysClockFreq+0x98>)
 8008e0e:	613b      	str	r3, [r7, #16]
      break;
 8008e10:	e027      	b.n	8008e62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	0c9b      	lsrs	r3, r3, #18
 8008e16:	f003 030f 	and.w	r3, r3, #15
 8008e1a:	4a17      	ldr	r2, [pc, #92]	; (8008e78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8008e1c:	5cd3      	ldrb	r3, [r2, r3]
 8008e1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d010      	beq.n	8008e4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008e2a:	4b11      	ldr	r3, [pc, #68]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x94>)
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	0c5b      	lsrs	r3, r3, #17
 8008e30:	f003 0301 	and.w	r3, r3, #1
 8008e34:	4a11      	ldr	r2, [pc, #68]	; (8008e7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8008e36:	5cd3      	ldrb	r3, [r2, r3]
 8008e38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a0d      	ldr	r2, [pc, #52]	; (8008e74 <HAL_RCC_GetSysClockFreq+0x98>)
 8008e3e:	fb03 f202 	mul.w	r2, r3, r2
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e48:	617b      	str	r3, [r7, #20]
 8008e4a:	e004      	b.n	8008e56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a0c      	ldr	r2, [pc, #48]	; (8008e80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008e50:	fb02 f303 	mul.w	r3, r2, r3
 8008e54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	613b      	str	r3, [r7, #16]
      break;
 8008e5a:	e002      	b.n	8008e62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008e5c:	4b05      	ldr	r3, [pc, #20]	; (8008e74 <HAL_RCC_GetSysClockFreq+0x98>)
 8008e5e:	613b      	str	r3, [r7, #16]
      break;
 8008e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e62:	693b      	ldr	r3, [r7, #16]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	371c      	adds	r7, #28
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bc80      	pop	{r7}
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	40021000 	.word	0x40021000
 8008e74:	007a1200 	.word	0x007a1200
 8008e78:	0800b09c 	.word	0x0800b09c
 8008e7c:	0800b0ac 	.word	0x0800b0ac
 8008e80:	003d0900 	.word	0x003d0900

08008e84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e84:	b480      	push	{r7}
 8008e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e88:	4b02      	ldr	r3, [pc, #8]	; (8008e94 <HAL_RCC_GetHCLKFreq+0x10>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bc80      	pop	{r7}
 8008e92:	4770      	bx	lr
 8008e94:	20000048 	.word	0x20000048

08008e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008e9c:	f7ff fff2 	bl	8008e84 <HAL_RCC_GetHCLKFreq>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	4b05      	ldr	r3, [pc, #20]	; (8008eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	0a1b      	lsrs	r3, r3, #8
 8008ea8:	f003 0307 	and.w	r3, r3, #7
 8008eac:	4903      	ldr	r1, [pc, #12]	; (8008ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8008eae:	5ccb      	ldrb	r3, [r1, r3]
 8008eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	40021000 	.word	0x40021000
 8008ebc:	0800b094 	.word	0x0800b094

08008ec0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008ec8:	4b0a      	ldr	r3, [pc, #40]	; (8008ef4 <RCC_Delay+0x34>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a0a      	ldr	r2, [pc, #40]	; (8008ef8 <RCC_Delay+0x38>)
 8008ece:	fba2 2303 	umull	r2, r3, r2, r3
 8008ed2:	0a5b      	lsrs	r3, r3, #9
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	fb02 f303 	mul.w	r3, r2, r3
 8008eda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008edc:	bf00      	nop
  }
  while (Delay --);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	1e5a      	subs	r2, r3, #1
 8008ee2:	60fa      	str	r2, [r7, #12]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1f9      	bne.n	8008edc <RCC_Delay+0x1c>
}
 8008ee8:	bf00      	nop
 8008eea:	bf00      	nop
 8008eec:	3714      	adds	r7, #20
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bc80      	pop	{r7}
 8008ef2:	4770      	bx	lr
 8008ef4:	20000048 	.word	0x20000048
 8008ef8:	10624dd3 	.word	0x10624dd3

08008efc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d101      	bne.n	8008f0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e041      	b.n	8008f92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d106      	bne.n	8008f28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f7fd fab4 	bl	8006490 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	3304      	adds	r3, #4
 8008f38:	4619      	mov	r1, r3
 8008f3a:	4610      	mov	r0, r2
 8008f3c:	f000 faf4 	bl	8009528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3708      	adds	r7, #8
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
	...

08008f9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d001      	beq.n	8008fb4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e032      	b.n	800901a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2202      	movs	r2, #2
 8008fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a18      	ldr	r2, [pc, #96]	; (8009024 <HAL_TIM_Base_Start+0x88>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d00e      	beq.n	8008fe4 <HAL_TIM_Base_Start+0x48>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fce:	d009      	beq.n	8008fe4 <HAL_TIM_Base_Start+0x48>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a14      	ldr	r2, [pc, #80]	; (8009028 <HAL_TIM_Base_Start+0x8c>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d004      	beq.n	8008fe4 <HAL_TIM_Base_Start+0x48>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a13      	ldr	r2, [pc, #76]	; (800902c <HAL_TIM_Base_Start+0x90>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d111      	bne.n	8009008 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	f003 0307 	and.w	r3, r3, #7
 8008fee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2b06      	cmp	r3, #6
 8008ff4:	d010      	beq.n	8009018 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f042 0201 	orr.w	r2, r2, #1
 8009004:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009006:	e007      	b.n	8009018 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f042 0201 	orr.w	r2, r2, #1
 8009016:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	bc80      	pop	{r7}
 8009022:	4770      	bx	lr
 8009024:	40012c00 	.word	0x40012c00
 8009028:	40000400 	.word	0x40000400
 800902c:	40000800 	.word	0x40000800

08009030 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d101      	bne.n	8009042 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	e041      	b.n	80090c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009048:	b2db      	uxtb	r3, r3
 800904a:	2b00      	cmp	r3, #0
 800904c:	d106      	bne.n	800905c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f7fd fa4a 	bl	80064f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2202      	movs	r2, #2
 8009060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	3304      	adds	r3, #4
 800906c:	4619      	mov	r1, r3
 800906e:	4610      	mov	r0, r2
 8009070:	f000 fa5a 	bl	8009528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
	...

080090d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d109      	bne.n	80090f4 <HAL_TIM_PWM_Start+0x24>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	bf14      	ite	ne
 80090ec:	2301      	movne	r3, #1
 80090ee:	2300      	moveq	r3, #0
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	e022      	b.n	800913a <HAL_TIM_PWM_Start+0x6a>
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	2b04      	cmp	r3, #4
 80090f8:	d109      	bne.n	800910e <HAL_TIM_PWM_Start+0x3e>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009100:	b2db      	uxtb	r3, r3
 8009102:	2b01      	cmp	r3, #1
 8009104:	bf14      	ite	ne
 8009106:	2301      	movne	r3, #1
 8009108:	2300      	moveq	r3, #0
 800910a:	b2db      	uxtb	r3, r3
 800910c:	e015      	b.n	800913a <HAL_TIM_PWM_Start+0x6a>
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	2b08      	cmp	r3, #8
 8009112:	d109      	bne.n	8009128 <HAL_TIM_PWM_Start+0x58>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800911a:	b2db      	uxtb	r3, r3
 800911c:	2b01      	cmp	r3, #1
 800911e:	bf14      	ite	ne
 8009120:	2301      	movne	r3, #1
 8009122:	2300      	moveq	r3, #0
 8009124:	b2db      	uxtb	r3, r3
 8009126:	e008      	b.n	800913a <HAL_TIM_PWM_Start+0x6a>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800912e:	b2db      	uxtb	r3, r3
 8009130:	2b01      	cmp	r3, #1
 8009132:	bf14      	ite	ne
 8009134:	2301      	movne	r3, #1
 8009136:	2300      	moveq	r3, #0
 8009138:	b2db      	uxtb	r3, r3
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e05e      	b.n	8009200 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d104      	bne.n	8009152 <HAL_TIM_PWM_Start+0x82>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2202      	movs	r2, #2
 800914c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009150:	e013      	b.n	800917a <HAL_TIM_PWM_Start+0xaa>
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	2b04      	cmp	r3, #4
 8009156:	d104      	bne.n	8009162 <HAL_TIM_PWM_Start+0x92>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2202      	movs	r2, #2
 800915c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009160:	e00b      	b.n	800917a <HAL_TIM_PWM_Start+0xaa>
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	2b08      	cmp	r3, #8
 8009166:	d104      	bne.n	8009172 <HAL_TIM_PWM_Start+0xa2>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2202      	movs	r2, #2
 800916c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009170:	e003      	b.n	800917a <HAL_TIM_PWM_Start+0xaa>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2202      	movs	r2, #2
 8009176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2201      	movs	r2, #1
 8009180:	6839      	ldr	r1, [r7, #0]
 8009182:	4618      	mov	r0, r3
 8009184:	f000 fc50 	bl	8009a28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a1e      	ldr	r2, [pc, #120]	; (8009208 <HAL_TIM_PWM_Start+0x138>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d107      	bne.n	80091a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80091a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a18      	ldr	r2, [pc, #96]	; (8009208 <HAL_TIM_PWM_Start+0x138>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d00e      	beq.n	80091ca <HAL_TIM_PWM_Start+0xfa>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091b4:	d009      	beq.n	80091ca <HAL_TIM_PWM_Start+0xfa>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a14      	ldr	r2, [pc, #80]	; (800920c <HAL_TIM_PWM_Start+0x13c>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d004      	beq.n	80091ca <HAL_TIM_PWM_Start+0xfa>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a12      	ldr	r2, [pc, #72]	; (8009210 <HAL_TIM_PWM_Start+0x140>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d111      	bne.n	80091ee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	f003 0307 	and.w	r3, r3, #7
 80091d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2b06      	cmp	r3, #6
 80091da:	d010      	beq.n	80091fe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f042 0201 	orr.w	r2, r2, #1
 80091ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091ec:	e007      	b.n	80091fe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f042 0201 	orr.w	r2, r2, #1
 80091fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	3710      	adds	r7, #16
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	40012c00 	.word	0x40012c00
 800920c:	40000400 	.word	0x40000400
 8009210:	40000800 	.word	0x40000800

08009214 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b086      	sub	sp, #24
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009220:	2300      	movs	r3, #0
 8009222:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800922a:	2b01      	cmp	r3, #1
 800922c:	d101      	bne.n	8009232 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800922e:	2302      	movs	r3, #2
 8009230:	e0ae      	b.n	8009390 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2b0c      	cmp	r3, #12
 800923e:	f200 809f 	bhi.w	8009380 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009242:	a201      	add	r2, pc, #4	; (adr r2, 8009248 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009248:	0800927d 	.word	0x0800927d
 800924c:	08009381 	.word	0x08009381
 8009250:	08009381 	.word	0x08009381
 8009254:	08009381 	.word	0x08009381
 8009258:	080092bd 	.word	0x080092bd
 800925c:	08009381 	.word	0x08009381
 8009260:	08009381 	.word	0x08009381
 8009264:	08009381 	.word	0x08009381
 8009268:	080092ff 	.word	0x080092ff
 800926c:	08009381 	.word	0x08009381
 8009270:	08009381 	.word	0x08009381
 8009274:	08009381 	.word	0x08009381
 8009278:	0800933f 	.word	0x0800933f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	68b9      	ldr	r1, [r7, #8]
 8009282:	4618      	mov	r0, r3
 8009284:	f000 f9b2 	bl	80095ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	699a      	ldr	r2, [r3, #24]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f042 0208 	orr.w	r2, r2, #8
 8009296:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	699a      	ldr	r2, [r3, #24]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f022 0204 	bic.w	r2, r2, #4
 80092a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	6999      	ldr	r1, [r3, #24]
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	691a      	ldr	r2, [r3, #16]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	430a      	orrs	r2, r1
 80092b8:	619a      	str	r2, [r3, #24]
      break;
 80092ba:	e064      	b.n	8009386 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68b9      	ldr	r1, [r7, #8]
 80092c2:	4618      	mov	r0, r3
 80092c4:	f000 f9f8 	bl	80096b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	699a      	ldr	r2, [r3, #24]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	699a      	ldr	r2, [r3, #24]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6999      	ldr	r1, [r3, #24]
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	021a      	lsls	r2, r3, #8
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	430a      	orrs	r2, r1
 80092fa:	619a      	str	r2, [r3, #24]
      break;
 80092fc:	e043      	b.n	8009386 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	68b9      	ldr	r1, [r7, #8]
 8009304:	4618      	mov	r0, r3
 8009306:	f000 fa41 	bl	800978c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	69da      	ldr	r2, [r3, #28]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f042 0208 	orr.w	r2, r2, #8
 8009318:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	69da      	ldr	r2, [r3, #28]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f022 0204 	bic.w	r2, r2, #4
 8009328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	69d9      	ldr	r1, [r3, #28]
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	691a      	ldr	r2, [r3, #16]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	430a      	orrs	r2, r1
 800933a:	61da      	str	r2, [r3, #28]
      break;
 800933c:	e023      	b.n	8009386 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68b9      	ldr	r1, [r7, #8]
 8009344:	4618      	mov	r0, r3
 8009346:	f000 fa8b 	bl	8009860 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	69da      	ldr	r2, [r3, #28]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009358:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	69da      	ldr	r2, [r3, #28]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009368:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	69d9      	ldr	r1, [r3, #28]
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	021a      	lsls	r2, r3, #8
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	430a      	orrs	r2, r1
 800937c:	61da      	str	r2, [r3, #28]
      break;
 800937e:	e002      	b.n	8009386 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009380:	2301      	movs	r3, #1
 8009382:	75fb      	strb	r3, [r7, #23]
      break;
 8009384:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2200      	movs	r2, #0
 800938a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800938e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009390:	4618      	mov	r0, r3
 8009392:	3718      	adds	r7, #24
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80093a2:	2300      	movs	r3, #0
 80093a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d101      	bne.n	80093b4 <HAL_TIM_ConfigClockSource+0x1c>
 80093b0:	2302      	movs	r3, #2
 80093b2:	e0b4      	b.n	800951e <HAL_TIM_ConfigClockSource+0x186>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2202      	movs	r2, #2
 80093c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80093d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80093da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68ba      	ldr	r2, [r7, #8]
 80093e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093ec:	d03e      	beq.n	800946c <HAL_TIM_ConfigClockSource+0xd4>
 80093ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093f2:	f200 8087 	bhi.w	8009504 <HAL_TIM_ConfigClockSource+0x16c>
 80093f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093fa:	f000 8086 	beq.w	800950a <HAL_TIM_ConfigClockSource+0x172>
 80093fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009402:	d87f      	bhi.n	8009504 <HAL_TIM_ConfigClockSource+0x16c>
 8009404:	2b70      	cmp	r3, #112	; 0x70
 8009406:	d01a      	beq.n	800943e <HAL_TIM_ConfigClockSource+0xa6>
 8009408:	2b70      	cmp	r3, #112	; 0x70
 800940a:	d87b      	bhi.n	8009504 <HAL_TIM_ConfigClockSource+0x16c>
 800940c:	2b60      	cmp	r3, #96	; 0x60
 800940e:	d050      	beq.n	80094b2 <HAL_TIM_ConfigClockSource+0x11a>
 8009410:	2b60      	cmp	r3, #96	; 0x60
 8009412:	d877      	bhi.n	8009504 <HAL_TIM_ConfigClockSource+0x16c>
 8009414:	2b50      	cmp	r3, #80	; 0x50
 8009416:	d03c      	beq.n	8009492 <HAL_TIM_ConfigClockSource+0xfa>
 8009418:	2b50      	cmp	r3, #80	; 0x50
 800941a:	d873      	bhi.n	8009504 <HAL_TIM_ConfigClockSource+0x16c>
 800941c:	2b40      	cmp	r3, #64	; 0x40
 800941e:	d058      	beq.n	80094d2 <HAL_TIM_ConfigClockSource+0x13a>
 8009420:	2b40      	cmp	r3, #64	; 0x40
 8009422:	d86f      	bhi.n	8009504 <HAL_TIM_ConfigClockSource+0x16c>
 8009424:	2b30      	cmp	r3, #48	; 0x30
 8009426:	d064      	beq.n	80094f2 <HAL_TIM_ConfigClockSource+0x15a>
 8009428:	2b30      	cmp	r3, #48	; 0x30
 800942a:	d86b      	bhi.n	8009504 <HAL_TIM_ConfigClockSource+0x16c>
 800942c:	2b20      	cmp	r3, #32
 800942e:	d060      	beq.n	80094f2 <HAL_TIM_ConfigClockSource+0x15a>
 8009430:	2b20      	cmp	r3, #32
 8009432:	d867      	bhi.n	8009504 <HAL_TIM_ConfigClockSource+0x16c>
 8009434:	2b00      	cmp	r3, #0
 8009436:	d05c      	beq.n	80094f2 <HAL_TIM_ConfigClockSource+0x15a>
 8009438:	2b10      	cmp	r3, #16
 800943a:	d05a      	beq.n	80094f2 <HAL_TIM_ConfigClockSource+0x15a>
 800943c:	e062      	b.n	8009504 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6818      	ldr	r0, [r3, #0]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	6899      	ldr	r1, [r3, #8]
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	685a      	ldr	r2, [r3, #4]
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	f000 facc 	bl	80099ea <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009460:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	609a      	str	r2, [r3, #8]
      break;
 800946a:	e04f      	b.n	800950c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6818      	ldr	r0, [r3, #0]
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	6899      	ldr	r1, [r3, #8]
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	685a      	ldr	r2, [r3, #4]
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	f000 fab5 	bl	80099ea <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	689a      	ldr	r2, [r3, #8]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800948e:	609a      	str	r2, [r3, #8]
      break;
 8009490:	e03c      	b.n	800950c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6818      	ldr	r0, [r3, #0]
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	6859      	ldr	r1, [r3, #4]
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	461a      	mov	r2, r3
 80094a0:	f000 fa2c 	bl	80098fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2150      	movs	r1, #80	; 0x50
 80094aa:	4618      	mov	r0, r3
 80094ac:	f000 fa83 	bl	80099b6 <TIM_ITRx_SetConfig>
      break;
 80094b0:	e02c      	b.n	800950c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6818      	ldr	r0, [r3, #0]
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	6859      	ldr	r1, [r3, #4]
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	461a      	mov	r2, r3
 80094c0:	f000 fa4a 	bl	8009958 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2160      	movs	r1, #96	; 0x60
 80094ca:	4618      	mov	r0, r3
 80094cc:	f000 fa73 	bl	80099b6 <TIM_ITRx_SetConfig>
      break;
 80094d0:	e01c      	b.n	800950c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6818      	ldr	r0, [r3, #0]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	6859      	ldr	r1, [r3, #4]
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	461a      	mov	r2, r3
 80094e0:	f000 fa0c 	bl	80098fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2140      	movs	r1, #64	; 0x40
 80094ea:	4618      	mov	r0, r3
 80094ec:	f000 fa63 	bl	80099b6 <TIM_ITRx_SetConfig>
      break;
 80094f0:	e00c      	b.n	800950c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4619      	mov	r1, r3
 80094fc:	4610      	mov	r0, r2
 80094fe:	f000 fa5a 	bl	80099b6 <TIM_ITRx_SetConfig>
      break;
 8009502:	e003      	b.n	800950c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	73fb      	strb	r3, [r7, #15]
      break;
 8009508:	e000      	b.n	800950c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800950a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800951c:	7bfb      	ldrb	r3, [r7, #15]
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
	...

08009528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009528:	b480      	push	{r7}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a29      	ldr	r2, [pc, #164]	; (80095e0 <TIM_Base_SetConfig+0xb8>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d00b      	beq.n	8009558 <TIM_Base_SetConfig+0x30>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009546:	d007      	beq.n	8009558 <TIM_Base_SetConfig+0x30>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a26      	ldr	r2, [pc, #152]	; (80095e4 <TIM_Base_SetConfig+0xbc>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d003      	beq.n	8009558 <TIM_Base_SetConfig+0x30>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a25      	ldr	r2, [pc, #148]	; (80095e8 <TIM_Base_SetConfig+0xc0>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d108      	bne.n	800956a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800955e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	4313      	orrs	r3, r2
 8009568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a1c      	ldr	r2, [pc, #112]	; (80095e0 <TIM_Base_SetConfig+0xb8>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d00b      	beq.n	800958a <TIM_Base_SetConfig+0x62>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009578:	d007      	beq.n	800958a <TIM_Base_SetConfig+0x62>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a19      	ldr	r2, [pc, #100]	; (80095e4 <TIM_Base_SetConfig+0xbc>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d003      	beq.n	800958a <TIM_Base_SetConfig+0x62>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a18      	ldr	r2, [pc, #96]	; (80095e8 <TIM_Base_SetConfig+0xc0>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d108      	bne.n	800959c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	68fa      	ldr	r2, [r7, #12]
 8009598:	4313      	orrs	r3, r2
 800959a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	695b      	ldr	r3, [r3, #20]
 80095a6:	4313      	orrs	r3, r2
 80095a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	68fa      	ldr	r2, [r7, #12]
 80095ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	689a      	ldr	r2, [r3, #8]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	4a07      	ldr	r2, [pc, #28]	; (80095e0 <TIM_Base_SetConfig+0xb8>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d103      	bne.n	80095d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	691a      	ldr	r2, [r3, #16]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	615a      	str	r2, [r3, #20]
}
 80095d6:	bf00      	nop
 80095d8:	3714      	adds	r7, #20
 80095da:	46bd      	mov	sp, r7
 80095dc:	bc80      	pop	{r7}
 80095de:	4770      	bx	lr
 80095e0:	40012c00 	.word	0x40012c00
 80095e4:	40000400 	.word	0x40000400
 80095e8:	40000800 	.word	0x40000800

080095ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b087      	sub	sp, #28
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a1b      	ldr	r3, [r3, #32]
 80095fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6a1b      	ldr	r3, [r3, #32]
 8009600:	f023 0201 	bic.w	r2, r3, #1
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	699b      	ldr	r3, [r3, #24]
 8009612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800961a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f023 0303 	bic.w	r3, r3, #3
 8009622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	4313      	orrs	r3, r2
 800962c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	f023 0302 	bic.w	r3, r3, #2
 8009634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	697a      	ldr	r2, [r7, #20]
 800963c:	4313      	orrs	r3, r2
 800963e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4a1c      	ldr	r2, [pc, #112]	; (80096b4 <TIM_OC1_SetConfig+0xc8>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d10c      	bne.n	8009662 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	f023 0308 	bic.w	r3, r3, #8
 800964e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	697a      	ldr	r2, [r7, #20]
 8009656:	4313      	orrs	r3, r2
 8009658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	f023 0304 	bic.w	r3, r3, #4
 8009660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a13      	ldr	r2, [pc, #76]	; (80096b4 <TIM_OC1_SetConfig+0xc8>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d111      	bne.n	800968e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	695b      	ldr	r3, [r3, #20]
 800967e:	693a      	ldr	r2, [r7, #16]
 8009680:	4313      	orrs	r3, r2
 8009682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	699b      	ldr	r3, [r3, #24]
 8009688:	693a      	ldr	r2, [r7, #16]
 800968a:	4313      	orrs	r3, r2
 800968c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	693a      	ldr	r2, [r7, #16]
 8009692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	685a      	ldr	r2, [r3, #4]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	697a      	ldr	r2, [r7, #20]
 80096a6:	621a      	str	r2, [r3, #32]
}
 80096a8:	bf00      	nop
 80096aa:	371c      	adds	r7, #28
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bc80      	pop	{r7}
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	40012c00 	.word	0x40012c00

080096b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b087      	sub	sp, #28
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6a1b      	ldr	r3, [r3, #32]
 80096c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6a1b      	ldr	r3, [r3, #32]
 80096cc:	f023 0210 	bic.w	r2, r3, #16
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	021b      	lsls	r3, r3, #8
 80096f6:	68fa      	ldr	r2, [r7, #12]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	f023 0320 	bic.w	r3, r3, #32
 8009702:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	011b      	lsls	r3, r3, #4
 800970a:	697a      	ldr	r2, [r7, #20]
 800970c:	4313      	orrs	r3, r2
 800970e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4a1d      	ldr	r2, [pc, #116]	; (8009788 <TIM_OC2_SetConfig+0xd0>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d10d      	bne.n	8009734 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800971e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	011b      	lsls	r3, r3, #4
 8009726:	697a      	ldr	r2, [r7, #20]
 8009728:	4313      	orrs	r3, r2
 800972a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009732:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a14      	ldr	r2, [pc, #80]	; (8009788 <TIM_OC2_SetConfig+0xd0>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d113      	bne.n	8009764 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009742:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800974a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	695b      	ldr	r3, [r3, #20]
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	693a      	ldr	r2, [r7, #16]
 8009754:	4313      	orrs	r3, r2
 8009756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	699b      	ldr	r3, [r3, #24]
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	693a      	ldr	r2, [r7, #16]
 8009760:	4313      	orrs	r3, r2
 8009762:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	693a      	ldr	r2, [r7, #16]
 8009768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	685a      	ldr	r2, [r3, #4]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	697a      	ldr	r2, [r7, #20]
 800977c:	621a      	str	r2, [r3, #32]
}
 800977e:	bf00      	nop
 8009780:	371c      	adds	r7, #28
 8009782:	46bd      	mov	sp, r7
 8009784:	bc80      	pop	{r7}
 8009786:	4770      	bx	lr
 8009788:	40012c00 	.word	0x40012c00

0800978c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800978c:	b480      	push	{r7}
 800978e:	b087      	sub	sp, #28
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a1b      	ldr	r3, [r3, #32]
 800979a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a1b      	ldr	r3, [r3, #32]
 80097a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	69db      	ldr	r3, [r3, #28]
 80097b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f023 0303 	bic.w	r3, r3, #3
 80097c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	4313      	orrs	r3, r2
 80097cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	021b      	lsls	r3, r3, #8
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	4313      	orrs	r3, r2
 80097e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4a1d      	ldr	r2, [pc, #116]	; (800985c <TIM_OC3_SetConfig+0xd0>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d10d      	bne.n	8009806 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	021b      	lsls	r3, r3, #8
 80097f8:	697a      	ldr	r2, [r7, #20]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009804:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4a14      	ldr	r2, [pc, #80]	; (800985c <TIM_OC3_SetConfig+0xd0>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d113      	bne.n	8009836 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800981c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	695b      	ldr	r3, [r3, #20]
 8009822:	011b      	lsls	r3, r3, #4
 8009824:	693a      	ldr	r2, [r7, #16]
 8009826:	4313      	orrs	r3, r2
 8009828:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	699b      	ldr	r3, [r3, #24]
 800982e:	011b      	lsls	r3, r3, #4
 8009830:	693a      	ldr	r2, [r7, #16]
 8009832:	4313      	orrs	r3, r2
 8009834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	693a      	ldr	r2, [r7, #16]
 800983a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	685a      	ldr	r2, [r3, #4]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	697a      	ldr	r2, [r7, #20]
 800984e:	621a      	str	r2, [r3, #32]
}
 8009850:	bf00      	nop
 8009852:	371c      	adds	r7, #28
 8009854:	46bd      	mov	sp, r7
 8009856:	bc80      	pop	{r7}
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	40012c00 	.word	0x40012c00

08009860 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009860:	b480      	push	{r7}
 8009862:	b087      	sub	sp, #28
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a1b      	ldr	r3, [r3, #32]
 800986e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a1b      	ldr	r3, [r3, #32]
 8009874:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	69db      	ldr	r3, [r3, #28]
 8009886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800988e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	021b      	lsls	r3, r3, #8
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	4313      	orrs	r3, r2
 80098a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	031b      	lsls	r3, r3, #12
 80098b2:	693a      	ldr	r2, [r7, #16]
 80098b4:	4313      	orrs	r3, r2
 80098b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	4a0f      	ldr	r2, [pc, #60]	; (80098f8 <TIM_OC4_SetConfig+0x98>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d109      	bne.n	80098d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	695b      	ldr	r3, [r3, #20]
 80098cc:	019b      	lsls	r3, r3, #6
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	4313      	orrs	r3, r2
 80098d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	697a      	ldr	r2, [r7, #20]
 80098d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	685a      	ldr	r2, [r3, #4]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	621a      	str	r2, [r3, #32]
}
 80098ee:	bf00      	nop
 80098f0:	371c      	adds	r7, #28
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bc80      	pop	{r7}
 80098f6:	4770      	bx	lr
 80098f8:	40012c00 	.word	0x40012c00

080098fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b087      	sub	sp, #28
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6a1b      	ldr	r3, [r3, #32]
 800990c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	f023 0201 	bic.w	r2, r3, #1
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	011b      	lsls	r3, r3, #4
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	4313      	orrs	r3, r2
 8009930:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	f023 030a 	bic.w	r3, r3, #10
 8009938:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800993a:	697a      	ldr	r2, [r7, #20]
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	4313      	orrs	r3, r2
 8009940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	693a      	ldr	r2, [r7, #16]
 8009946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	697a      	ldr	r2, [r7, #20]
 800994c:	621a      	str	r2, [r3, #32]
}
 800994e:	bf00      	nop
 8009950:	371c      	adds	r7, #28
 8009952:	46bd      	mov	sp, r7
 8009954:	bc80      	pop	{r7}
 8009956:	4770      	bx	lr

08009958 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009958:	b480      	push	{r7}
 800995a:	b087      	sub	sp, #28
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6a1b      	ldr	r3, [r3, #32]
 8009968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	6a1b      	ldr	r3, [r3, #32]
 800996e:	f023 0210 	bic.w	r2, r3, #16
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	699b      	ldr	r3, [r3, #24]
 800997a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	031b      	lsls	r3, r3, #12
 8009988:	693a      	ldr	r2, [r7, #16]
 800998a:	4313      	orrs	r3, r2
 800998c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009994:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	011b      	lsls	r3, r3, #4
 800999a:	697a      	ldr	r2, [r7, #20]
 800999c:	4313      	orrs	r3, r2
 800999e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	693a      	ldr	r2, [r7, #16]
 80099a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	697a      	ldr	r2, [r7, #20]
 80099aa:	621a      	str	r2, [r3, #32]
}
 80099ac:	bf00      	nop
 80099ae:	371c      	adds	r7, #28
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bc80      	pop	{r7}
 80099b4:	4770      	bx	lr

080099b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80099b6:	b480      	push	{r7}
 80099b8:	b085      	sub	sp, #20
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
 80099be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80099ce:	683a      	ldr	r2, [r7, #0]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	4313      	orrs	r3, r2
 80099d4:	f043 0307 	orr.w	r3, r3, #7
 80099d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	609a      	str	r2, [r3, #8]
}
 80099e0:	bf00      	nop
 80099e2:	3714      	adds	r7, #20
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bc80      	pop	{r7}
 80099e8:	4770      	bx	lr

080099ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80099ea:	b480      	push	{r7}
 80099ec:	b087      	sub	sp, #28
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	60f8      	str	r0, [r7, #12]
 80099f2:	60b9      	str	r1, [r7, #8]
 80099f4:	607a      	str	r2, [r7, #4]
 80099f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	021a      	lsls	r2, r3, #8
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	431a      	orrs	r2, r3
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	697a      	ldr	r2, [r7, #20]
 8009a14:	4313      	orrs	r3, r2
 8009a16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	697a      	ldr	r2, [r7, #20]
 8009a1c:	609a      	str	r2, [r3, #8]
}
 8009a1e:	bf00      	nop
 8009a20:	371c      	adds	r7, #28
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bc80      	pop	{r7}
 8009a26:	4770      	bx	lr

08009a28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b087      	sub	sp, #28
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	f003 031f 	and.w	r3, r3, #31
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	6a1a      	ldr	r2, [r3, #32]
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	43db      	mvns	r3, r3
 8009a4a:	401a      	ands	r2, r3
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6a1a      	ldr	r2, [r3, #32]
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	f003 031f 	and.w	r3, r3, #31
 8009a5a:	6879      	ldr	r1, [r7, #4]
 8009a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8009a60:	431a      	orrs	r2, r3
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	621a      	str	r2, [r3, #32]
}
 8009a66:	bf00      	nop
 8009a68:	371c      	adds	r7, #28
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bc80      	pop	{r7}
 8009a6e:	4770      	bx	lr

08009a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d101      	bne.n	8009a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a84:	2302      	movs	r3, #2
 8009a86:	e046      	b.n	8009b16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2202      	movs	r2, #2
 8009a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a16      	ldr	r2, [pc, #88]	; (8009b20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d00e      	beq.n	8009aea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ad4:	d009      	beq.n	8009aea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a12      	ldr	r2, [pc, #72]	; (8009b24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d004      	beq.n	8009aea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a10      	ldr	r2, [pc, #64]	; (8009b28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d10c      	bne.n	8009b04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009af0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	68ba      	ldr	r2, [r7, #8]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	68ba      	ldr	r2, [r7, #8]
 8009b02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b14:	2300      	movs	r3, #0
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3714      	adds	r7, #20
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bc80      	pop	{r7}
 8009b1e:	4770      	bx	lr
 8009b20:	40012c00 	.word	0x40012c00
 8009b24:	40000400 	.word	0x40000400
 8009b28:	40000800 	.word	0x40000800

08009b2c <__errno>:
 8009b2c:	4b01      	ldr	r3, [pc, #4]	; (8009b34 <__errno+0x8>)
 8009b2e:	6818      	ldr	r0, [r3, #0]
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop
 8009b34:	20000054 	.word	0x20000054

08009b38 <__libc_init_array>:
 8009b38:	b570      	push	{r4, r5, r6, lr}
 8009b3a:	2600      	movs	r6, #0
 8009b3c:	4d0c      	ldr	r5, [pc, #48]	; (8009b70 <__libc_init_array+0x38>)
 8009b3e:	4c0d      	ldr	r4, [pc, #52]	; (8009b74 <__libc_init_array+0x3c>)
 8009b40:	1b64      	subs	r4, r4, r5
 8009b42:	10a4      	asrs	r4, r4, #2
 8009b44:	42a6      	cmp	r6, r4
 8009b46:	d109      	bne.n	8009b5c <__libc_init_array+0x24>
 8009b48:	f001 fa7c 	bl	800b044 <_init>
 8009b4c:	2600      	movs	r6, #0
 8009b4e:	4d0a      	ldr	r5, [pc, #40]	; (8009b78 <__libc_init_array+0x40>)
 8009b50:	4c0a      	ldr	r4, [pc, #40]	; (8009b7c <__libc_init_array+0x44>)
 8009b52:	1b64      	subs	r4, r4, r5
 8009b54:	10a4      	asrs	r4, r4, #2
 8009b56:	42a6      	cmp	r6, r4
 8009b58:	d105      	bne.n	8009b66 <__libc_init_array+0x2e>
 8009b5a:	bd70      	pop	{r4, r5, r6, pc}
 8009b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b60:	4798      	blx	r3
 8009b62:	3601      	adds	r6, #1
 8009b64:	e7ee      	b.n	8009b44 <__libc_init_array+0xc>
 8009b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b6a:	4798      	blx	r3
 8009b6c:	3601      	adds	r6, #1
 8009b6e:	e7f2      	b.n	8009b56 <__libc_init_array+0x1e>
 8009b70:	0800b118 	.word	0x0800b118
 8009b74:	0800b118 	.word	0x0800b118
 8009b78:	0800b118 	.word	0x0800b118
 8009b7c:	0800b11c 	.word	0x0800b11c

08009b80 <memset>:
 8009b80:	4603      	mov	r3, r0
 8009b82:	4402      	add	r2, r0
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d100      	bne.n	8009b8a <memset+0xa>
 8009b88:	4770      	bx	lr
 8009b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b8e:	e7f9      	b.n	8009b84 <memset+0x4>

08009b90 <pow>:
 8009b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b94:	4614      	mov	r4, r2
 8009b96:	461d      	mov	r5, r3
 8009b98:	4680      	mov	r8, r0
 8009b9a:	4689      	mov	r9, r1
 8009b9c:	f000 f8a8 	bl	8009cf0 <__ieee754_pow>
 8009ba0:	4622      	mov	r2, r4
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	460f      	mov	r7, r1
 8009ba6:	462b      	mov	r3, r5
 8009ba8:	4620      	mov	r0, r4
 8009baa:	4629      	mov	r1, r5
 8009bac:	f7f6 ff26 	bl	80009fc <__aeabi_dcmpun>
 8009bb0:	bbc8      	cbnz	r0, 8009c26 <pow+0x96>
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	4640      	mov	r0, r8
 8009bb8:	4649      	mov	r1, r9
 8009bba:	f7f6 feed 	bl	8000998 <__aeabi_dcmpeq>
 8009bbe:	b1b8      	cbz	r0, 8009bf0 <pow+0x60>
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	4629      	mov	r1, r5
 8009bc8:	f7f6 fee6 	bl	8000998 <__aeabi_dcmpeq>
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	d141      	bne.n	8009c54 <pow+0xc4>
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	4629      	mov	r1, r5
 8009bd4:	f001 f89c 	bl	800ad10 <finite>
 8009bd8:	b328      	cbz	r0, 8009c26 <pow+0x96>
 8009bda:	2200      	movs	r2, #0
 8009bdc:	2300      	movs	r3, #0
 8009bde:	4620      	mov	r0, r4
 8009be0:	4629      	mov	r1, r5
 8009be2:	f7f6 fee3 	bl	80009ac <__aeabi_dcmplt>
 8009be6:	b1f0      	cbz	r0, 8009c26 <pow+0x96>
 8009be8:	f7ff ffa0 	bl	8009b2c <__errno>
 8009bec:	2322      	movs	r3, #34	; 0x22
 8009bee:	e019      	b.n	8009c24 <pow+0x94>
 8009bf0:	4630      	mov	r0, r6
 8009bf2:	4639      	mov	r1, r7
 8009bf4:	f001 f88c 	bl	800ad10 <finite>
 8009bf8:	b9c8      	cbnz	r0, 8009c2e <pow+0x9e>
 8009bfa:	4640      	mov	r0, r8
 8009bfc:	4649      	mov	r1, r9
 8009bfe:	f001 f887 	bl	800ad10 <finite>
 8009c02:	b1a0      	cbz	r0, 8009c2e <pow+0x9e>
 8009c04:	4620      	mov	r0, r4
 8009c06:	4629      	mov	r1, r5
 8009c08:	f001 f882 	bl	800ad10 <finite>
 8009c0c:	b178      	cbz	r0, 8009c2e <pow+0x9e>
 8009c0e:	4632      	mov	r2, r6
 8009c10:	463b      	mov	r3, r7
 8009c12:	4630      	mov	r0, r6
 8009c14:	4639      	mov	r1, r7
 8009c16:	f7f6 fef1 	bl	80009fc <__aeabi_dcmpun>
 8009c1a:	2800      	cmp	r0, #0
 8009c1c:	d0e4      	beq.n	8009be8 <pow+0x58>
 8009c1e:	f7ff ff85 	bl	8009b2c <__errno>
 8009c22:	2321      	movs	r3, #33	; 0x21
 8009c24:	6003      	str	r3, [r0, #0]
 8009c26:	4630      	mov	r0, r6
 8009c28:	4639      	mov	r1, r7
 8009c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c2e:	2200      	movs	r2, #0
 8009c30:	2300      	movs	r3, #0
 8009c32:	4630      	mov	r0, r6
 8009c34:	4639      	mov	r1, r7
 8009c36:	f7f6 feaf 	bl	8000998 <__aeabi_dcmpeq>
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	d0f3      	beq.n	8009c26 <pow+0x96>
 8009c3e:	4640      	mov	r0, r8
 8009c40:	4649      	mov	r1, r9
 8009c42:	f001 f865 	bl	800ad10 <finite>
 8009c46:	2800      	cmp	r0, #0
 8009c48:	d0ed      	beq.n	8009c26 <pow+0x96>
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	4629      	mov	r1, r5
 8009c4e:	f001 f85f 	bl	800ad10 <finite>
 8009c52:	e7c8      	b.n	8009be6 <pow+0x56>
 8009c54:	2600      	movs	r6, #0
 8009c56:	4f01      	ldr	r7, [pc, #4]	; (8009c5c <pow+0xcc>)
 8009c58:	e7e5      	b.n	8009c26 <pow+0x96>
 8009c5a:	bf00      	nop
 8009c5c:	3ff00000 	.word	0x3ff00000

08009c60 <sqrt>:
 8009c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c62:	4606      	mov	r6, r0
 8009c64:	460f      	mov	r7, r1
 8009c66:	f000 fd59 	bl	800a71c <__ieee754_sqrt>
 8009c6a:	4632      	mov	r2, r6
 8009c6c:	4604      	mov	r4, r0
 8009c6e:	460d      	mov	r5, r1
 8009c70:	463b      	mov	r3, r7
 8009c72:	4630      	mov	r0, r6
 8009c74:	4639      	mov	r1, r7
 8009c76:	f7f6 fec1 	bl	80009fc <__aeabi_dcmpun>
 8009c7a:	b990      	cbnz	r0, 8009ca2 <sqrt+0x42>
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	2300      	movs	r3, #0
 8009c80:	4630      	mov	r0, r6
 8009c82:	4639      	mov	r1, r7
 8009c84:	f7f6 fe92 	bl	80009ac <__aeabi_dcmplt>
 8009c88:	b158      	cbz	r0, 8009ca2 <sqrt+0x42>
 8009c8a:	f7ff ff4f 	bl	8009b2c <__errno>
 8009c8e:	2321      	movs	r3, #33	; 0x21
 8009c90:	2200      	movs	r2, #0
 8009c92:	6003      	str	r3, [r0, #0]
 8009c94:	2300      	movs	r3, #0
 8009c96:	4610      	mov	r0, r2
 8009c98:	4619      	mov	r1, r3
 8009c9a:	f7f6 fd3f 	bl	800071c <__aeabi_ddiv>
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	460d      	mov	r5, r1
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	4629      	mov	r1, r5
 8009ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009ca8 <asinf>:
 8009ca8:	b538      	push	{r3, r4, r5, lr}
 8009caa:	4604      	mov	r4, r0
 8009cac:	f000 fde6 	bl	800a87c <__ieee754_asinf>
 8009cb0:	4621      	mov	r1, r4
 8009cb2:	4605      	mov	r5, r0
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	f7f7 fa23 	bl	8001100 <__aeabi_fcmpun>
 8009cba:	b980      	cbnz	r0, 8009cde <asinf+0x36>
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	f001 f9b9 	bl	800b034 <fabsf>
 8009cc2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009cc6:	f7f7 fa11 	bl	80010ec <__aeabi_fcmpgt>
 8009cca:	b140      	cbz	r0, 8009cde <asinf+0x36>
 8009ccc:	f7ff ff2e 	bl	8009b2c <__errno>
 8009cd0:	2321      	movs	r3, #33	; 0x21
 8009cd2:	6003      	str	r3, [r0, #0]
 8009cd4:	4803      	ldr	r0, [pc, #12]	; (8009ce4 <asinf+0x3c>)
 8009cd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cda:	f001 b9af 	b.w	800b03c <nanf>
 8009cde:	4628      	mov	r0, r5
 8009ce0:	bd38      	pop	{r3, r4, r5, pc}
 8009ce2:	bf00      	nop
 8009ce4:	0800b0ae 	.word	0x0800b0ae

08009ce8 <atan2f>:
 8009ce8:	f000 bf0c 	b.w	800ab04 <__ieee754_atan2f>
 8009cec:	0000      	movs	r0, r0
	...

08009cf0 <__ieee754_pow>:
 8009cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf4:	b093      	sub	sp, #76	; 0x4c
 8009cf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009cfa:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8009cfe:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8009d02:	4689      	mov	r9, r1
 8009d04:	ea56 0102 	orrs.w	r1, r6, r2
 8009d08:	4680      	mov	r8, r0
 8009d0a:	d111      	bne.n	8009d30 <__ieee754_pow+0x40>
 8009d0c:	1803      	adds	r3, r0, r0
 8009d0e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8009d12:	4152      	adcs	r2, r2
 8009d14:	4299      	cmp	r1, r3
 8009d16:	4b82      	ldr	r3, [pc, #520]	; (8009f20 <__ieee754_pow+0x230>)
 8009d18:	4193      	sbcs	r3, r2
 8009d1a:	f080 84b9 	bcs.w	800a690 <__ieee754_pow+0x9a0>
 8009d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d22:	4640      	mov	r0, r8
 8009d24:	4649      	mov	r1, r9
 8009d26:	f7f6 fa19 	bl	800015c <__adddf3>
 8009d2a:	4683      	mov	fp, r0
 8009d2c:	468c      	mov	ip, r1
 8009d2e:	e06f      	b.n	8009e10 <__ieee754_pow+0x120>
 8009d30:	4b7c      	ldr	r3, [pc, #496]	; (8009f24 <__ieee754_pow+0x234>)
 8009d32:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8009d36:	429c      	cmp	r4, r3
 8009d38:	464d      	mov	r5, r9
 8009d3a:	4682      	mov	sl, r0
 8009d3c:	dc06      	bgt.n	8009d4c <__ieee754_pow+0x5c>
 8009d3e:	d101      	bne.n	8009d44 <__ieee754_pow+0x54>
 8009d40:	2800      	cmp	r0, #0
 8009d42:	d1ec      	bne.n	8009d1e <__ieee754_pow+0x2e>
 8009d44:	429e      	cmp	r6, r3
 8009d46:	dc01      	bgt.n	8009d4c <__ieee754_pow+0x5c>
 8009d48:	d10f      	bne.n	8009d6a <__ieee754_pow+0x7a>
 8009d4a:	b172      	cbz	r2, 8009d6a <__ieee754_pow+0x7a>
 8009d4c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009d50:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009d54:	ea55 050a 	orrs.w	r5, r5, sl
 8009d58:	d1e1      	bne.n	8009d1e <__ieee754_pow+0x2e>
 8009d5a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009d5e:	18db      	adds	r3, r3, r3
 8009d60:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009d64:	4152      	adcs	r2, r2
 8009d66:	429d      	cmp	r5, r3
 8009d68:	e7d5      	b.n	8009d16 <__ieee754_pow+0x26>
 8009d6a:	2d00      	cmp	r5, #0
 8009d6c:	da39      	bge.n	8009de2 <__ieee754_pow+0xf2>
 8009d6e:	4b6e      	ldr	r3, [pc, #440]	; (8009f28 <__ieee754_pow+0x238>)
 8009d70:	429e      	cmp	r6, r3
 8009d72:	dc52      	bgt.n	8009e1a <__ieee754_pow+0x12a>
 8009d74:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009d78:	429e      	cmp	r6, r3
 8009d7a:	f340 849c 	ble.w	800a6b6 <__ieee754_pow+0x9c6>
 8009d7e:	1533      	asrs	r3, r6, #20
 8009d80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009d84:	2b14      	cmp	r3, #20
 8009d86:	dd0f      	ble.n	8009da8 <__ieee754_pow+0xb8>
 8009d88:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009d8c:	fa22 f103 	lsr.w	r1, r2, r3
 8009d90:	fa01 f303 	lsl.w	r3, r1, r3
 8009d94:	4293      	cmp	r3, r2
 8009d96:	f040 848e 	bne.w	800a6b6 <__ieee754_pow+0x9c6>
 8009d9a:	f001 0101 	and.w	r1, r1, #1
 8009d9e:	f1c1 0302 	rsb	r3, r1, #2
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	b182      	cbz	r2, 8009dc8 <__ieee754_pow+0xd8>
 8009da6:	e05d      	b.n	8009e64 <__ieee754_pow+0x174>
 8009da8:	2a00      	cmp	r2, #0
 8009daa:	d159      	bne.n	8009e60 <__ieee754_pow+0x170>
 8009dac:	f1c3 0314 	rsb	r3, r3, #20
 8009db0:	fa46 f103 	asr.w	r1, r6, r3
 8009db4:	fa01 f303 	lsl.w	r3, r1, r3
 8009db8:	42b3      	cmp	r3, r6
 8009dba:	f040 8479 	bne.w	800a6b0 <__ieee754_pow+0x9c0>
 8009dbe:	f001 0101 	and.w	r1, r1, #1
 8009dc2:	f1c1 0302 	rsb	r3, r1, #2
 8009dc6:	9300      	str	r3, [sp, #0]
 8009dc8:	4b58      	ldr	r3, [pc, #352]	; (8009f2c <__ieee754_pow+0x23c>)
 8009dca:	429e      	cmp	r6, r3
 8009dcc:	d132      	bne.n	8009e34 <__ieee754_pow+0x144>
 8009dce:	2f00      	cmp	r7, #0
 8009dd0:	f280 846a 	bge.w	800a6a8 <__ieee754_pow+0x9b8>
 8009dd4:	4642      	mov	r2, r8
 8009dd6:	464b      	mov	r3, r9
 8009dd8:	2000      	movs	r0, #0
 8009dda:	4954      	ldr	r1, [pc, #336]	; (8009f2c <__ieee754_pow+0x23c>)
 8009ddc:	f7f6 fc9e 	bl	800071c <__aeabi_ddiv>
 8009de0:	e7a3      	b.n	8009d2a <__ieee754_pow+0x3a>
 8009de2:	2300      	movs	r3, #0
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	2a00      	cmp	r2, #0
 8009de8:	d13c      	bne.n	8009e64 <__ieee754_pow+0x174>
 8009dea:	4b4e      	ldr	r3, [pc, #312]	; (8009f24 <__ieee754_pow+0x234>)
 8009dec:	429e      	cmp	r6, r3
 8009dee:	d1eb      	bne.n	8009dc8 <__ieee754_pow+0xd8>
 8009df0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009df4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009df8:	ea53 030a 	orrs.w	r3, r3, sl
 8009dfc:	f000 8448 	beq.w	800a690 <__ieee754_pow+0x9a0>
 8009e00:	4b4b      	ldr	r3, [pc, #300]	; (8009f30 <__ieee754_pow+0x240>)
 8009e02:	429c      	cmp	r4, r3
 8009e04:	dd0b      	ble.n	8009e1e <__ieee754_pow+0x12e>
 8009e06:	2f00      	cmp	r7, #0
 8009e08:	f2c0 8448 	blt.w	800a69c <__ieee754_pow+0x9ac>
 8009e0c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8009e10:	4658      	mov	r0, fp
 8009e12:	4661      	mov	r1, ip
 8009e14:	b013      	add	sp, #76	; 0x4c
 8009e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e1a:	2302      	movs	r3, #2
 8009e1c:	e7e2      	b.n	8009de4 <__ieee754_pow+0xf4>
 8009e1e:	2f00      	cmp	r7, #0
 8009e20:	f04f 0b00 	mov.w	fp, #0
 8009e24:	f04f 0c00 	mov.w	ip, #0
 8009e28:	daf2      	bge.n	8009e10 <__ieee754_pow+0x120>
 8009e2a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8009e2e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8009e32:	e7ed      	b.n	8009e10 <__ieee754_pow+0x120>
 8009e34:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8009e38:	d106      	bne.n	8009e48 <__ieee754_pow+0x158>
 8009e3a:	4642      	mov	r2, r8
 8009e3c:	464b      	mov	r3, r9
 8009e3e:	4640      	mov	r0, r8
 8009e40:	4649      	mov	r1, r9
 8009e42:	f7f6 fb41 	bl	80004c8 <__aeabi_dmul>
 8009e46:	e770      	b.n	8009d2a <__ieee754_pow+0x3a>
 8009e48:	4b3a      	ldr	r3, [pc, #232]	; (8009f34 <__ieee754_pow+0x244>)
 8009e4a:	429f      	cmp	r7, r3
 8009e4c:	d10a      	bne.n	8009e64 <__ieee754_pow+0x174>
 8009e4e:	2d00      	cmp	r5, #0
 8009e50:	db08      	blt.n	8009e64 <__ieee754_pow+0x174>
 8009e52:	4640      	mov	r0, r8
 8009e54:	4649      	mov	r1, r9
 8009e56:	b013      	add	sp, #76	; 0x4c
 8009e58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e5c:	f000 bc5e 	b.w	800a71c <__ieee754_sqrt>
 8009e60:	2300      	movs	r3, #0
 8009e62:	9300      	str	r3, [sp, #0]
 8009e64:	4640      	mov	r0, r8
 8009e66:	4649      	mov	r1, r9
 8009e68:	f000 ff4f 	bl	800ad0a <fabs>
 8009e6c:	4683      	mov	fp, r0
 8009e6e:	468c      	mov	ip, r1
 8009e70:	f1ba 0f00 	cmp.w	sl, #0
 8009e74:	d128      	bne.n	8009ec8 <__ieee754_pow+0x1d8>
 8009e76:	b124      	cbz	r4, 8009e82 <__ieee754_pow+0x192>
 8009e78:	4b2c      	ldr	r3, [pc, #176]	; (8009f2c <__ieee754_pow+0x23c>)
 8009e7a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d122      	bne.n	8009ec8 <__ieee754_pow+0x1d8>
 8009e82:	2f00      	cmp	r7, #0
 8009e84:	da07      	bge.n	8009e96 <__ieee754_pow+0x1a6>
 8009e86:	465a      	mov	r2, fp
 8009e88:	4663      	mov	r3, ip
 8009e8a:	2000      	movs	r0, #0
 8009e8c:	4927      	ldr	r1, [pc, #156]	; (8009f2c <__ieee754_pow+0x23c>)
 8009e8e:	f7f6 fc45 	bl	800071c <__aeabi_ddiv>
 8009e92:	4683      	mov	fp, r0
 8009e94:	468c      	mov	ip, r1
 8009e96:	2d00      	cmp	r5, #0
 8009e98:	daba      	bge.n	8009e10 <__ieee754_pow+0x120>
 8009e9a:	9b00      	ldr	r3, [sp, #0]
 8009e9c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009ea0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009ea4:	4323      	orrs	r3, r4
 8009ea6:	d108      	bne.n	8009eba <__ieee754_pow+0x1ca>
 8009ea8:	465a      	mov	r2, fp
 8009eaa:	4663      	mov	r3, ip
 8009eac:	4658      	mov	r0, fp
 8009eae:	4661      	mov	r1, ip
 8009eb0:	f7f6 f952 	bl	8000158 <__aeabi_dsub>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	e790      	b.n	8009ddc <__ieee754_pow+0xec>
 8009eba:	9b00      	ldr	r3, [sp, #0]
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d1a7      	bne.n	8009e10 <__ieee754_pow+0x120>
 8009ec0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8009ec4:	469c      	mov	ip, r3
 8009ec6:	e7a3      	b.n	8009e10 <__ieee754_pow+0x120>
 8009ec8:	0feb      	lsrs	r3, r5, #31
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	930c      	str	r3, [sp, #48]	; 0x30
 8009ece:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ed0:	9b00      	ldr	r3, [sp, #0]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	d104      	bne.n	8009ee0 <__ieee754_pow+0x1f0>
 8009ed6:	4642      	mov	r2, r8
 8009ed8:	464b      	mov	r3, r9
 8009eda:	4640      	mov	r0, r8
 8009edc:	4649      	mov	r1, r9
 8009ede:	e7e7      	b.n	8009eb0 <__ieee754_pow+0x1c0>
 8009ee0:	4b15      	ldr	r3, [pc, #84]	; (8009f38 <__ieee754_pow+0x248>)
 8009ee2:	429e      	cmp	r6, r3
 8009ee4:	f340 80f6 	ble.w	800a0d4 <__ieee754_pow+0x3e4>
 8009ee8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009eec:	429e      	cmp	r6, r3
 8009eee:	4b10      	ldr	r3, [pc, #64]	; (8009f30 <__ieee754_pow+0x240>)
 8009ef0:	dd09      	ble.n	8009f06 <__ieee754_pow+0x216>
 8009ef2:	429c      	cmp	r4, r3
 8009ef4:	dc0c      	bgt.n	8009f10 <__ieee754_pow+0x220>
 8009ef6:	2f00      	cmp	r7, #0
 8009ef8:	da0c      	bge.n	8009f14 <__ieee754_pow+0x224>
 8009efa:	2000      	movs	r0, #0
 8009efc:	b013      	add	sp, #76	; 0x4c
 8009efe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f02:	f000 befd 	b.w	800ad00 <__math_oflow>
 8009f06:	429c      	cmp	r4, r3
 8009f08:	dbf5      	blt.n	8009ef6 <__ieee754_pow+0x206>
 8009f0a:	4b08      	ldr	r3, [pc, #32]	; (8009f2c <__ieee754_pow+0x23c>)
 8009f0c:	429c      	cmp	r4, r3
 8009f0e:	dd15      	ble.n	8009f3c <__ieee754_pow+0x24c>
 8009f10:	2f00      	cmp	r7, #0
 8009f12:	dcf2      	bgt.n	8009efa <__ieee754_pow+0x20a>
 8009f14:	2000      	movs	r0, #0
 8009f16:	b013      	add	sp, #76	; 0x4c
 8009f18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f1c:	f000 beeb 	b.w	800acf6 <__math_uflow>
 8009f20:	fff00000 	.word	0xfff00000
 8009f24:	7ff00000 	.word	0x7ff00000
 8009f28:	433fffff 	.word	0x433fffff
 8009f2c:	3ff00000 	.word	0x3ff00000
 8009f30:	3fefffff 	.word	0x3fefffff
 8009f34:	3fe00000 	.word	0x3fe00000
 8009f38:	41e00000 	.word	0x41e00000
 8009f3c:	4661      	mov	r1, ip
 8009f3e:	2200      	movs	r2, #0
 8009f40:	4658      	mov	r0, fp
 8009f42:	4b5f      	ldr	r3, [pc, #380]	; (800a0c0 <__ieee754_pow+0x3d0>)
 8009f44:	f7f6 f908 	bl	8000158 <__aeabi_dsub>
 8009f48:	a355      	add	r3, pc, #340	; (adr r3, 800a0a0 <__ieee754_pow+0x3b0>)
 8009f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4e:	4604      	mov	r4, r0
 8009f50:	460d      	mov	r5, r1
 8009f52:	f7f6 fab9 	bl	80004c8 <__aeabi_dmul>
 8009f56:	a354      	add	r3, pc, #336	; (adr r3, 800a0a8 <__ieee754_pow+0x3b8>)
 8009f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5c:	4606      	mov	r6, r0
 8009f5e:	460f      	mov	r7, r1
 8009f60:	4620      	mov	r0, r4
 8009f62:	4629      	mov	r1, r5
 8009f64:	f7f6 fab0 	bl	80004c8 <__aeabi_dmul>
 8009f68:	2200      	movs	r2, #0
 8009f6a:	4682      	mov	sl, r0
 8009f6c:	468b      	mov	fp, r1
 8009f6e:	4620      	mov	r0, r4
 8009f70:	4629      	mov	r1, r5
 8009f72:	4b54      	ldr	r3, [pc, #336]	; (800a0c4 <__ieee754_pow+0x3d4>)
 8009f74:	f7f6 faa8 	bl	80004c8 <__aeabi_dmul>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	a14c      	add	r1, pc, #304	; (adr r1, 800a0b0 <__ieee754_pow+0x3c0>)
 8009f7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f82:	f7f6 f8e9 	bl	8000158 <__aeabi_dsub>
 8009f86:	4622      	mov	r2, r4
 8009f88:	462b      	mov	r3, r5
 8009f8a:	f7f6 fa9d 	bl	80004c8 <__aeabi_dmul>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	460b      	mov	r3, r1
 8009f92:	2000      	movs	r0, #0
 8009f94:	494c      	ldr	r1, [pc, #304]	; (800a0c8 <__ieee754_pow+0x3d8>)
 8009f96:	f7f6 f8df 	bl	8000158 <__aeabi_dsub>
 8009f9a:	4622      	mov	r2, r4
 8009f9c:	462b      	mov	r3, r5
 8009f9e:	4680      	mov	r8, r0
 8009fa0:	4689      	mov	r9, r1
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	4629      	mov	r1, r5
 8009fa6:	f7f6 fa8f 	bl	80004c8 <__aeabi_dmul>
 8009faa:	4602      	mov	r2, r0
 8009fac:	460b      	mov	r3, r1
 8009fae:	4640      	mov	r0, r8
 8009fb0:	4649      	mov	r1, r9
 8009fb2:	f7f6 fa89 	bl	80004c8 <__aeabi_dmul>
 8009fb6:	a340      	add	r3, pc, #256	; (adr r3, 800a0b8 <__ieee754_pow+0x3c8>)
 8009fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbc:	f7f6 fa84 	bl	80004c8 <__aeabi_dmul>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	4650      	mov	r0, sl
 8009fc6:	4659      	mov	r1, fp
 8009fc8:	f7f6 f8c6 	bl	8000158 <__aeabi_dsub>
 8009fcc:	f04f 0a00 	mov.w	sl, #0
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	4604      	mov	r4, r0
 8009fd6:	460d      	mov	r5, r1
 8009fd8:	4630      	mov	r0, r6
 8009fda:	4639      	mov	r1, r7
 8009fdc:	f7f6 f8be 	bl	800015c <__adddf3>
 8009fe0:	4632      	mov	r2, r6
 8009fe2:	463b      	mov	r3, r7
 8009fe4:	4650      	mov	r0, sl
 8009fe6:	468b      	mov	fp, r1
 8009fe8:	f7f6 f8b6 	bl	8000158 <__aeabi_dsub>
 8009fec:	4602      	mov	r2, r0
 8009fee:	460b      	mov	r3, r1
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	4629      	mov	r1, r5
 8009ff4:	f7f6 f8b0 	bl	8000158 <__aeabi_dsub>
 8009ff8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009ffc:	9b00      	ldr	r3, [sp, #0]
 8009ffe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a000:	3b01      	subs	r3, #1
 800a002:	4313      	orrs	r3, r2
 800a004:	f04f 0600 	mov.w	r6, #0
 800a008:	f04f 0200 	mov.w	r2, #0
 800a00c:	bf0c      	ite	eq
 800a00e:	4b2f      	ldreq	r3, [pc, #188]	; (800a0cc <__ieee754_pow+0x3dc>)
 800a010:	4b2b      	ldrne	r3, [pc, #172]	; (800a0c0 <__ieee754_pow+0x3d0>)
 800a012:	4604      	mov	r4, r0
 800a014:	460d      	mov	r5, r1
 800a016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a01a:	e9cd 2300 	strd	r2, r3, [sp]
 800a01e:	4632      	mov	r2, r6
 800a020:	463b      	mov	r3, r7
 800a022:	f7f6 f899 	bl	8000158 <__aeabi_dsub>
 800a026:	4652      	mov	r2, sl
 800a028:	465b      	mov	r3, fp
 800a02a:	f7f6 fa4d 	bl	80004c8 <__aeabi_dmul>
 800a02e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a032:	4680      	mov	r8, r0
 800a034:	4689      	mov	r9, r1
 800a036:	4620      	mov	r0, r4
 800a038:	4629      	mov	r1, r5
 800a03a:	f7f6 fa45 	bl	80004c8 <__aeabi_dmul>
 800a03e:	4602      	mov	r2, r0
 800a040:	460b      	mov	r3, r1
 800a042:	4640      	mov	r0, r8
 800a044:	4649      	mov	r1, r9
 800a046:	f7f6 f889 	bl	800015c <__adddf3>
 800a04a:	4632      	mov	r2, r6
 800a04c:	463b      	mov	r3, r7
 800a04e:	4680      	mov	r8, r0
 800a050:	4689      	mov	r9, r1
 800a052:	4650      	mov	r0, sl
 800a054:	4659      	mov	r1, fp
 800a056:	f7f6 fa37 	bl	80004c8 <__aeabi_dmul>
 800a05a:	4604      	mov	r4, r0
 800a05c:	460d      	mov	r5, r1
 800a05e:	460b      	mov	r3, r1
 800a060:	4602      	mov	r2, r0
 800a062:	4649      	mov	r1, r9
 800a064:	4640      	mov	r0, r8
 800a066:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a06a:	f7f6 f877 	bl	800015c <__adddf3>
 800a06e:	4b18      	ldr	r3, [pc, #96]	; (800a0d0 <__ieee754_pow+0x3e0>)
 800a070:	4682      	mov	sl, r0
 800a072:	4299      	cmp	r1, r3
 800a074:	460f      	mov	r7, r1
 800a076:	460e      	mov	r6, r1
 800a078:	f340 82e5 	ble.w	800a646 <__ieee754_pow+0x956>
 800a07c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a080:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a084:	4303      	orrs	r3, r0
 800a086:	f000 81df 	beq.w	800a448 <__ieee754_pow+0x758>
 800a08a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a08e:	2200      	movs	r2, #0
 800a090:	2300      	movs	r3, #0
 800a092:	f7f6 fc8b 	bl	80009ac <__aeabi_dcmplt>
 800a096:	3800      	subs	r0, #0
 800a098:	bf18      	it	ne
 800a09a:	2001      	movne	r0, #1
 800a09c:	e72e      	b.n	8009efc <__ieee754_pow+0x20c>
 800a09e:	bf00      	nop
 800a0a0:	60000000 	.word	0x60000000
 800a0a4:	3ff71547 	.word	0x3ff71547
 800a0a8:	f85ddf44 	.word	0xf85ddf44
 800a0ac:	3e54ae0b 	.word	0x3e54ae0b
 800a0b0:	55555555 	.word	0x55555555
 800a0b4:	3fd55555 	.word	0x3fd55555
 800a0b8:	652b82fe 	.word	0x652b82fe
 800a0bc:	3ff71547 	.word	0x3ff71547
 800a0c0:	3ff00000 	.word	0x3ff00000
 800a0c4:	3fd00000 	.word	0x3fd00000
 800a0c8:	3fe00000 	.word	0x3fe00000
 800a0cc:	bff00000 	.word	0xbff00000
 800a0d0:	408fffff 	.word	0x408fffff
 800a0d4:	4bd2      	ldr	r3, [pc, #840]	; (800a420 <__ieee754_pow+0x730>)
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	402b      	ands	r3, r5
 800a0da:	b943      	cbnz	r3, 800a0ee <__ieee754_pow+0x3fe>
 800a0dc:	4658      	mov	r0, fp
 800a0de:	4661      	mov	r1, ip
 800a0e0:	4bd0      	ldr	r3, [pc, #832]	; (800a424 <__ieee754_pow+0x734>)
 800a0e2:	f7f6 f9f1 	bl	80004c8 <__aeabi_dmul>
 800a0e6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a0ea:	4683      	mov	fp, r0
 800a0ec:	460c      	mov	r4, r1
 800a0ee:	1523      	asrs	r3, r4, #20
 800a0f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a0f4:	4413      	add	r3, r2
 800a0f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0f8:	4bcb      	ldr	r3, [pc, #812]	; (800a428 <__ieee754_pow+0x738>)
 800a0fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a0fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a102:	429c      	cmp	r4, r3
 800a104:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a108:	dd08      	ble.n	800a11c <__ieee754_pow+0x42c>
 800a10a:	4bc8      	ldr	r3, [pc, #800]	; (800a42c <__ieee754_pow+0x73c>)
 800a10c:	429c      	cmp	r4, r3
 800a10e:	f340 8199 	ble.w	800a444 <__ieee754_pow+0x754>
 800a112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a114:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a118:	3301      	adds	r3, #1
 800a11a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a11c:	2600      	movs	r6, #0
 800a11e:	00f3      	lsls	r3, r6, #3
 800a120:	930d      	str	r3, [sp, #52]	; 0x34
 800a122:	4bc3      	ldr	r3, [pc, #780]	; (800a430 <__ieee754_pow+0x740>)
 800a124:	4658      	mov	r0, fp
 800a126:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a12a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a12e:	4629      	mov	r1, r5
 800a130:	461a      	mov	r2, r3
 800a132:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a136:	4623      	mov	r3, r4
 800a138:	f7f6 f80e 	bl	8000158 <__aeabi_dsub>
 800a13c:	46da      	mov	sl, fp
 800a13e:	462b      	mov	r3, r5
 800a140:	4652      	mov	r2, sl
 800a142:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a146:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a14a:	f7f6 f807 	bl	800015c <__adddf3>
 800a14e:	4602      	mov	r2, r0
 800a150:	460b      	mov	r3, r1
 800a152:	2000      	movs	r0, #0
 800a154:	49b7      	ldr	r1, [pc, #732]	; (800a434 <__ieee754_pow+0x744>)
 800a156:	f7f6 fae1 	bl	800071c <__aeabi_ddiv>
 800a15a:	4602      	mov	r2, r0
 800a15c:	460b      	mov	r3, r1
 800a15e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a162:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a166:	f7f6 f9af 	bl	80004c8 <__aeabi_dmul>
 800a16a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a16e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a172:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a176:	2300      	movs	r3, #0
 800a178:	2200      	movs	r2, #0
 800a17a:	46ab      	mov	fp, r5
 800a17c:	106d      	asrs	r5, r5, #1
 800a17e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a182:	9304      	str	r3, [sp, #16]
 800a184:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a188:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a18c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a190:	4640      	mov	r0, r8
 800a192:	4649      	mov	r1, r9
 800a194:	4614      	mov	r4, r2
 800a196:	461d      	mov	r5, r3
 800a198:	f7f6 f996 	bl	80004c8 <__aeabi_dmul>
 800a19c:	4602      	mov	r2, r0
 800a19e:	460b      	mov	r3, r1
 800a1a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a1a4:	f7f5 ffd8 	bl	8000158 <__aeabi_dsub>
 800a1a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a1ac:	4606      	mov	r6, r0
 800a1ae:	460f      	mov	r7, r1
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	4629      	mov	r1, r5
 800a1b4:	f7f5 ffd0 	bl	8000158 <__aeabi_dsub>
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	460b      	mov	r3, r1
 800a1bc:	4650      	mov	r0, sl
 800a1be:	4659      	mov	r1, fp
 800a1c0:	f7f5 ffca 	bl	8000158 <__aeabi_dsub>
 800a1c4:	4642      	mov	r2, r8
 800a1c6:	464b      	mov	r3, r9
 800a1c8:	f7f6 f97e 	bl	80004c8 <__aeabi_dmul>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	4630      	mov	r0, r6
 800a1d2:	4639      	mov	r1, r7
 800a1d4:	f7f5 ffc0 	bl	8000158 <__aeabi_dsub>
 800a1d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a1dc:	f7f6 f974 	bl	80004c8 <__aeabi_dmul>
 800a1e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1e4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a1e8:	4610      	mov	r0, r2
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	f7f6 f96c 	bl	80004c8 <__aeabi_dmul>
 800a1f0:	a379      	add	r3, pc, #484	; (adr r3, 800a3d8 <__ieee754_pow+0x6e8>)
 800a1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f6:	4604      	mov	r4, r0
 800a1f8:	460d      	mov	r5, r1
 800a1fa:	f7f6 f965 	bl	80004c8 <__aeabi_dmul>
 800a1fe:	a378      	add	r3, pc, #480	; (adr r3, 800a3e0 <__ieee754_pow+0x6f0>)
 800a200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a204:	f7f5 ffaa 	bl	800015c <__adddf3>
 800a208:	4622      	mov	r2, r4
 800a20a:	462b      	mov	r3, r5
 800a20c:	f7f6 f95c 	bl	80004c8 <__aeabi_dmul>
 800a210:	a375      	add	r3, pc, #468	; (adr r3, 800a3e8 <__ieee754_pow+0x6f8>)
 800a212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a216:	f7f5 ffa1 	bl	800015c <__adddf3>
 800a21a:	4622      	mov	r2, r4
 800a21c:	462b      	mov	r3, r5
 800a21e:	f7f6 f953 	bl	80004c8 <__aeabi_dmul>
 800a222:	a373      	add	r3, pc, #460	; (adr r3, 800a3f0 <__ieee754_pow+0x700>)
 800a224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a228:	f7f5 ff98 	bl	800015c <__adddf3>
 800a22c:	4622      	mov	r2, r4
 800a22e:	462b      	mov	r3, r5
 800a230:	f7f6 f94a 	bl	80004c8 <__aeabi_dmul>
 800a234:	a370      	add	r3, pc, #448	; (adr r3, 800a3f8 <__ieee754_pow+0x708>)
 800a236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23a:	f7f5 ff8f 	bl	800015c <__adddf3>
 800a23e:	4622      	mov	r2, r4
 800a240:	462b      	mov	r3, r5
 800a242:	f7f6 f941 	bl	80004c8 <__aeabi_dmul>
 800a246:	a36e      	add	r3, pc, #440	; (adr r3, 800a400 <__ieee754_pow+0x710>)
 800a248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24c:	f7f5 ff86 	bl	800015c <__adddf3>
 800a250:	4622      	mov	r2, r4
 800a252:	4606      	mov	r6, r0
 800a254:	460f      	mov	r7, r1
 800a256:	462b      	mov	r3, r5
 800a258:	4620      	mov	r0, r4
 800a25a:	4629      	mov	r1, r5
 800a25c:	f7f6 f934 	bl	80004c8 <__aeabi_dmul>
 800a260:	4602      	mov	r2, r0
 800a262:	460b      	mov	r3, r1
 800a264:	4630      	mov	r0, r6
 800a266:	4639      	mov	r1, r7
 800a268:	f7f6 f92e 	bl	80004c8 <__aeabi_dmul>
 800a26c:	4604      	mov	r4, r0
 800a26e:	460d      	mov	r5, r1
 800a270:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a274:	4642      	mov	r2, r8
 800a276:	464b      	mov	r3, r9
 800a278:	f7f5 ff70 	bl	800015c <__adddf3>
 800a27c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a280:	f7f6 f922 	bl	80004c8 <__aeabi_dmul>
 800a284:	4622      	mov	r2, r4
 800a286:	462b      	mov	r3, r5
 800a288:	f7f5 ff68 	bl	800015c <__adddf3>
 800a28c:	4642      	mov	r2, r8
 800a28e:	4606      	mov	r6, r0
 800a290:	460f      	mov	r7, r1
 800a292:	464b      	mov	r3, r9
 800a294:	4640      	mov	r0, r8
 800a296:	4649      	mov	r1, r9
 800a298:	f7f6 f916 	bl	80004c8 <__aeabi_dmul>
 800a29c:	2200      	movs	r2, #0
 800a29e:	4b66      	ldr	r3, [pc, #408]	; (800a438 <__ieee754_pow+0x748>)
 800a2a0:	4682      	mov	sl, r0
 800a2a2:	468b      	mov	fp, r1
 800a2a4:	f7f5 ff5a 	bl	800015c <__adddf3>
 800a2a8:	4632      	mov	r2, r6
 800a2aa:	463b      	mov	r3, r7
 800a2ac:	f7f5 ff56 	bl	800015c <__adddf3>
 800a2b0:	2400      	movs	r4, #0
 800a2b2:	460d      	mov	r5, r1
 800a2b4:	4622      	mov	r2, r4
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	4640      	mov	r0, r8
 800a2ba:	4649      	mov	r1, r9
 800a2bc:	f7f6 f904 	bl	80004c8 <__aeabi_dmul>
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	4680      	mov	r8, r0
 800a2c4:	4689      	mov	r9, r1
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	4629      	mov	r1, r5
 800a2ca:	4b5b      	ldr	r3, [pc, #364]	; (800a438 <__ieee754_pow+0x748>)
 800a2cc:	f7f5 ff44 	bl	8000158 <__aeabi_dsub>
 800a2d0:	4652      	mov	r2, sl
 800a2d2:	465b      	mov	r3, fp
 800a2d4:	f7f5 ff40 	bl	8000158 <__aeabi_dsub>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4630      	mov	r0, r6
 800a2de:	4639      	mov	r1, r7
 800a2e0:	f7f5 ff3a 	bl	8000158 <__aeabi_dsub>
 800a2e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2e8:	f7f6 f8ee 	bl	80004c8 <__aeabi_dmul>
 800a2ec:	4622      	mov	r2, r4
 800a2ee:	4606      	mov	r6, r0
 800a2f0:	460f      	mov	r7, r1
 800a2f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a2f6:	462b      	mov	r3, r5
 800a2f8:	f7f6 f8e6 	bl	80004c8 <__aeabi_dmul>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	460b      	mov	r3, r1
 800a300:	4630      	mov	r0, r6
 800a302:	4639      	mov	r1, r7
 800a304:	f7f5 ff2a 	bl	800015c <__adddf3>
 800a308:	2400      	movs	r4, #0
 800a30a:	4606      	mov	r6, r0
 800a30c:	460f      	mov	r7, r1
 800a30e:	4602      	mov	r2, r0
 800a310:	460b      	mov	r3, r1
 800a312:	4640      	mov	r0, r8
 800a314:	4649      	mov	r1, r9
 800a316:	f7f5 ff21 	bl	800015c <__adddf3>
 800a31a:	a33b      	add	r3, pc, #236	; (adr r3, 800a408 <__ieee754_pow+0x718>)
 800a31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a320:	4620      	mov	r0, r4
 800a322:	460d      	mov	r5, r1
 800a324:	f7f6 f8d0 	bl	80004c8 <__aeabi_dmul>
 800a328:	4642      	mov	r2, r8
 800a32a:	464b      	mov	r3, r9
 800a32c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a330:	4620      	mov	r0, r4
 800a332:	4629      	mov	r1, r5
 800a334:	f7f5 ff10 	bl	8000158 <__aeabi_dsub>
 800a338:	4602      	mov	r2, r0
 800a33a:	460b      	mov	r3, r1
 800a33c:	4630      	mov	r0, r6
 800a33e:	4639      	mov	r1, r7
 800a340:	f7f5 ff0a 	bl	8000158 <__aeabi_dsub>
 800a344:	a332      	add	r3, pc, #200	; (adr r3, 800a410 <__ieee754_pow+0x720>)
 800a346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34a:	f7f6 f8bd 	bl	80004c8 <__aeabi_dmul>
 800a34e:	a332      	add	r3, pc, #200	; (adr r3, 800a418 <__ieee754_pow+0x728>)
 800a350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a354:	4606      	mov	r6, r0
 800a356:	460f      	mov	r7, r1
 800a358:	4620      	mov	r0, r4
 800a35a:	4629      	mov	r1, r5
 800a35c:	f7f6 f8b4 	bl	80004c8 <__aeabi_dmul>
 800a360:	4602      	mov	r2, r0
 800a362:	460b      	mov	r3, r1
 800a364:	4630      	mov	r0, r6
 800a366:	4639      	mov	r1, r7
 800a368:	f7f5 fef8 	bl	800015c <__adddf3>
 800a36c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a36e:	4b33      	ldr	r3, [pc, #204]	; (800a43c <__ieee754_pow+0x74c>)
 800a370:	f04f 0a00 	mov.w	sl, #0
 800a374:	4413      	add	r3, r2
 800a376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37a:	f7f5 feef 	bl	800015c <__adddf3>
 800a37e:	4680      	mov	r8, r0
 800a380:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a382:	4689      	mov	r9, r1
 800a384:	f7f6 f836 	bl	80003f4 <__aeabi_i2d>
 800a388:	4604      	mov	r4, r0
 800a38a:	460d      	mov	r5, r1
 800a38c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a38e:	4b2c      	ldr	r3, [pc, #176]	; (800a440 <__ieee754_pow+0x750>)
 800a390:	4413      	add	r3, r2
 800a392:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a396:	4642      	mov	r2, r8
 800a398:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a39c:	464b      	mov	r3, r9
 800a39e:	f7f5 fedd 	bl	800015c <__adddf3>
 800a3a2:	4632      	mov	r2, r6
 800a3a4:	463b      	mov	r3, r7
 800a3a6:	f7f5 fed9 	bl	800015c <__adddf3>
 800a3aa:	4622      	mov	r2, r4
 800a3ac:	462b      	mov	r3, r5
 800a3ae:	f7f5 fed5 	bl	800015c <__adddf3>
 800a3b2:	4622      	mov	r2, r4
 800a3b4:	462b      	mov	r3, r5
 800a3b6:	4650      	mov	r0, sl
 800a3b8:	468b      	mov	fp, r1
 800a3ba:	f7f5 fecd 	bl	8000158 <__aeabi_dsub>
 800a3be:	4632      	mov	r2, r6
 800a3c0:	463b      	mov	r3, r7
 800a3c2:	f7f5 fec9 	bl	8000158 <__aeabi_dsub>
 800a3c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3ca:	f7f5 fec5 	bl	8000158 <__aeabi_dsub>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	4640      	mov	r0, r8
 800a3d4:	4649      	mov	r1, r9
 800a3d6:	e60d      	b.n	8009ff4 <__ieee754_pow+0x304>
 800a3d8:	4a454eef 	.word	0x4a454eef
 800a3dc:	3fca7e28 	.word	0x3fca7e28
 800a3e0:	93c9db65 	.word	0x93c9db65
 800a3e4:	3fcd864a 	.word	0x3fcd864a
 800a3e8:	a91d4101 	.word	0xa91d4101
 800a3ec:	3fd17460 	.word	0x3fd17460
 800a3f0:	518f264d 	.word	0x518f264d
 800a3f4:	3fd55555 	.word	0x3fd55555
 800a3f8:	db6fabff 	.word	0xdb6fabff
 800a3fc:	3fdb6db6 	.word	0x3fdb6db6
 800a400:	33333303 	.word	0x33333303
 800a404:	3fe33333 	.word	0x3fe33333
 800a408:	e0000000 	.word	0xe0000000
 800a40c:	3feec709 	.word	0x3feec709
 800a410:	dc3a03fd 	.word	0xdc3a03fd
 800a414:	3feec709 	.word	0x3feec709
 800a418:	145b01f5 	.word	0x145b01f5
 800a41c:	be3e2fe0 	.word	0xbe3e2fe0
 800a420:	7ff00000 	.word	0x7ff00000
 800a424:	43400000 	.word	0x43400000
 800a428:	0003988e 	.word	0x0003988e
 800a42c:	000bb679 	.word	0x000bb679
 800a430:	0800b0b0 	.word	0x0800b0b0
 800a434:	3ff00000 	.word	0x3ff00000
 800a438:	40080000 	.word	0x40080000
 800a43c:	0800b0d0 	.word	0x0800b0d0
 800a440:	0800b0c0 	.word	0x0800b0c0
 800a444:	2601      	movs	r6, #1
 800a446:	e66a      	b.n	800a11e <__ieee754_pow+0x42e>
 800a448:	a39d      	add	r3, pc, #628	; (adr r3, 800a6c0 <__ieee754_pow+0x9d0>)
 800a44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44e:	4640      	mov	r0, r8
 800a450:	4649      	mov	r1, r9
 800a452:	f7f5 fe83 	bl	800015c <__adddf3>
 800a456:	4622      	mov	r2, r4
 800a458:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a45c:	462b      	mov	r3, r5
 800a45e:	4650      	mov	r0, sl
 800a460:	4639      	mov	r1, r7
 800a462:	f7f5 fe79 	bl	8000158 <__aeabi_dsub>
 800a466:	4602      	mov	r2, r0
 800a468:	460b      	mov	r3, r1
 800a46a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a46e:	f7f6 fabb 	bl	80009e8 <__aeabi_dcmpgt>
 800a472:	2800      	cmp	r0, #0
 800a474:	f47f ae09 	bne.w	800a08a <__ieee754_pow+0x39a>
 800a478:	4aa3      	ldr	r2, [pc, #652]	; (800a708 <__ieee754_pow+0xa18>)
 800a47a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800a47e:	4293      	cmp	r3, r2
 800a480:	f340 8101 	ble.w	800a686 <__ieee754_pow+0x996>
 800a484:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a488:	2000      	movs	r0, #0
 800a48a:	151b      	asrs	r3, r3, #20
 800a48c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a490:	fa4a f303 	asr.w	r3, sl, r3
 800a494:	4433      	add	r3, r6
 800a496:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a49a:	4f9c      	ldr	r7, [pc, #624]	; (800a70c <__ieee754_pow+0xa1c>)
 800a49c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a4a0:	4117      	asrs	r7, r2
 800a4a2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a4a6:	ea23 0107 	bic.w	r1, r3, r7
 800a4aa:	f1c2 0214 	rsb	r2, r2, #20
 800a4ae:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	fa4a fa02 	asr.w	sl, sl, r2
 800a4b8:	2e00      	cmp	r6, #0
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	4629      	mov	r1, r5
 800a4be:	4620      	mov	r0, r4
 800a4c0:	bfb8      	it	lt
 800a4c2:	f1ca 0a00 	rsblt	sl, sl, #0
 800a4c6:	f7f5 fe47 	bl	8000158 <__aeabi_dsub>
 800a4ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4d2:	2400      	movs	r4, #0
 800a4d4:	4642      	mov	r2, r8
 800a4d6:	464b      	mov	r3, r9
 800a4d8:	f7f5 fe40 	bl	800015c <__adddf3>
 800a4dc:	a37a      	add	r3, pc, #488	; (adr r3, 800a6c8 <__ieee754_pow+0x9d8>)
 800a4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	460d      	mov	r5, r1
 800a4e6:	f7f5 ffef 	bl	80004c8 <__aeabi_dmul>
 800a4ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4ee:	4606      	mov	r6, r0
 800a4f0:	460f      	mov	r7, r1
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	4629      	mov	r1, r5
 800a4f6:	f7f5 fe2f 	bl	8000158 <__aeabi_dsub>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	4640      	mov	r0, r8
 800a500:	4649      	mov	r1, r9
 800a502:	f7f5 fe29 	bl	8000158 <__aeabi_dsub>
 800a506:	a372      	add	r3, pc, #456	; (adr r3, 800a6d0 <__ieee754_pow+0x9e0>)
 800a508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50c:	f7f5 ffdc 	bl	80004c8 <__aeabi_dmul>
 800a510:	a371      	add	r3, pc, #452	; (adr r3, 800a6d8 <__ieee754_pow+0x9e8>)
 800a512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a516:	4680      	mov	r8, r0
 800a518:	4689      	mov	r9, r1
 800a51a:	4620      	mov	r0, r4
 800a51c:	4629      	mov	r1, r5
 800a51e:	f7f5 ffd3 	bl	80004c8 <__aeabi_dmul>
 800a522:	4602      	mov	r2, r0
 800a524:	460b      	mov	r3, r1
 800a526:	4640      	mov	r0, r8
 800a528:	4649      	mov	r1, r9
 800a52a:	f7f5 fe17 	bl	800015c <__adddf3>
 800a52e:	4604      	mov	r4, r0
 800a530:	460d      	mov	r5, r1
 800a532:	4602      	mov	r2, r0
 800a534:	460b      	mov	r3, r1
 800a536:	4630      	mov	r0, r6
 800a538:	4639      	mov	r1, r7
 800a53a:	f7f5 fe0f 	bl	800015c <__adddf3>
 800a53e:	4632      	mov	r2, r6
 800a540:	463b      	mov	r3, r7
 800a542:	4680      	mov	r8, r0
 800a544:	4689      	mov	r9, r1
 800a546:	f7f5 fe07 	bl	8000158 <__aeabi_dsub>
 800a54a:	4602      	mov	r2, r0
 800a54c:	460b      	mov	r3, r1
 800a54e:	4620      	mov	r0, r4
 800a550:	4629      	mov	r1, r5
 800a552:	f7f5 fe01 	bl	8000158 <__aeabi_dsub>
 800a556:	4642      	mov	r2, r8
 800a558:	4606      	mov	r6, r0
 800a55a:	460f      	mov	r7, r1
 800a55c:	464b      	mov	r3, r9
 800a55e:	4640      	mov	r0, r8
 800a560:	4649      	mov	r1, r9
 800a562:	f7f5 ffb1 	bl	80004c8 <__aeabi_dmul>
 800a566:	a35e      	add	r3, pc, #376	; (adr r3, 800a6e0 <__ieee754_pow+0x9f0>)
 800a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56c:	4604      	mov	r4, r0
 800a56e:	460d      	mov	r5, r1
 800a570:	f7f5 ffaa 	bl	80004c8 <__aeabi_dmul>
 800a574:	a35c      	add	r3, pc, #368	; (adr r3, 800a6e8 <__ieee754_pow+0x9f8>)
 800a576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57a:	f7f5 fded 	bl	8000158 <__aeabi_dsub>
 800a57e:	4622      	mov	r2, r4
 800a580:	462b      	mov	r3, r5
 800a582:	f7f5 ffa1 	bl	80004c8 <__aeabi_dmul>
 800a586:	a35a      	add	r3, pc, #360	; (adr r3, 800a6f0 <__ieee754_pow+0xa00>)
 800a588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58c:	f7f5 fde6 	bl	800015c <__adddf3>
 800a590:	4622      	mov	r2, r4
 800a592:	462b      	mov	r3, r5
 800a594:	f7f5 ff98 	bl	80004c8 <__aeabi_dmul>
 800a598:	a357      	add	r3, pc, #348	; (adr r3, 800a6f8 <__ieee754_pow+0xa08>)
 800a59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59e:	f7f5 fddb 	bl	8000158 <__aeabi_dsub>
 800a5a2:	4622      	mov	r2, r4
 800a5a4:	462b      	mov	r3, r5
 800a5a6:	f7f5 ff8f 	bl	80004c8 <__aeabi_dmul>
 800a5aa:	a355      	add	r3, pc, #340	; (adr r3, 800a700 <__ieee754_pow+0xa10>)
 800a5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b0:	f7f5 fdd4 	bl	800015c <__adddf3>
 800a5b4:	4622      	mov	r2, r4
 800a5b6:	462b      	mov	r3, r5
 800a5b8:	f7f5 ff86 	bl	80004c8 <__aeabi_dmul>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4640      	mov	r0, r8
 800a5c2:	4649      	mov	r1, r9
 800a5c4:	f7f5 fdc8 	bl	8000158 <__aeabi_dsub>
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	460d      	mov	r5, r1
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	460b      	mov	r3, r1
 800a5d0:	4640      	mov	r0, r8
 800a5d2:	4649      	mov	r1, r9
 800a5d4:	f7f5 ff78 	bl	80004c8 <__aeabi_dmul>
 800a5d8:	2200      	movs	r2, #0
 800a5da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	4629      	mov	r1, r5
 800a5e6:	f7f5 fdb7 	bl	8000158 <__aeabi_dsub>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5f2:	f7f6 f893 	bl	800071c <__aeabi_ddiv>
 800a5f6:	4632      	mov	r2, r6
 800a5f8:	4604      	mov	r4, r0
 800a5fa:	460d      	mov	r5, r1
 800a5fc:	463b      	mov	r3, r7
 800a5fe:	4640      	mov	r0, r8
 800a600:	4649      	mov	r1, r9
 800a602:	f7f5 ff61 	bl	80004c8 <__aeabi_dmul>
 800a606:	4632      	mov	r2, r6
 800a608:	463b      	mov	r3, r7
 800a60a:	f7f5 fda7 	bl	800015c <__adddf3>
 800a60e:	4602      	mov	r2, r0
 800a610:	460b      	mov	r3, r1
 800a612:	4620      	mov	r0, r4
 800a614:	4629      	mov	r1, r5
 800a616:	f7f5 fd9f 	bl	8000158 <__aeabi_dsub>
 800a61a:	4642      	mov	r2, r8
 800a61c:	464b      	mov	r3, r9
 800a61e:	f7f5 fd9b 	bl	8000158 <__aeabi_dsub>
 800a622:	4602      	mov	r2, r0
 800a624:	460b      	mov	r3, r1
 800a626:	2000      	movs	r0, #0
 800a628:	4939      	ldr	r1, [pc, #228]	; (800a710 <__ieee754_pow+0xa20>)
 800a62a:	f7f5 fd95 	bl	8000158 <__aeabi_dsub>
 800a62e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a632:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a636:	da29      	bge.n	800a68c <__ieee754_pow+0x99c>
 800a638:	4652      	mov	r2, sl
 800a63a:	f000 fb71 	bl	800ad20 <scalbn>
 800a63e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a642:	f7ff bbfe 	b.w	8009e42 <__ieee754_pow+0x152>
 800a646:	4b33      	ldr	r3, [pc, #204]	; (800a714 <__ieee754_pow+0xa24>)
 800a648:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a64c:	429f      	cmp	r7, r3
 800a64e:	f77f af13 	ble.w	800a478 <__ieee754_pow+0x788>
 800a652:	4b31      	ldr	r3, [pc, #196]	; (800a718 <__ieee754_pow+0xa28>)
 800a654:	440b      	add	r3, r1
 800a656:	4303      	orrs	r3, r0
 800a658:	d009      	beq.n	800a66e <__ieee754_pow+0x97e>
 800a65a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a65e:	2200      	movs	r2, #0
 800a660:	2300      	movs	r3, #0
 800a662:	f7f6 f9a3 	bl	80009ac <__aeabi_dcmplt>
 800a666:	3800      	subs	r0, #0
 800a668:	bf18      	it	ne
 800a66a:	2001      	movne	r0, #1
 800a66c:	e453      	b.n	8009f16 <__ieee754_pow+0x226>
 800a66e:	4622      	mov	r2, r4
 800a670:	462b      	mov	r3, r5
 800a672:	f7f5 fd71 	bl	8000158 <__aeabi_dsub>
 800a676:	4642      	mov	r2, r8
 800a678:	464b      	mov	r3, r9
 800a67a:	f7f6 f9ab 	bl	80009d4 <__aeabi_dcmpge>
 800a67e:	2800      	cmp	r0, #0
 800a680:	f43f aefa 	beq.w	800a478 <__ieee754_pow+0x788>
 800a684:	e7e9      	b.n	800a65a <__ieee754_pow+0x96a>
 800a686:	f04f 0a00 	mov.w	sl, #0
 800a68a:	e720      	b.n	800a4ce <__ieee754_pow+0x7de>
 800a68c:	4621      	mov	r1, r4
 800a68e:	e7d6      	b.n	800a63e <__ieee754_pow+0x94e>
 800a690:	f04f 0b00 	mov.w	fp, #0
 800a694:	f8df c078 	ldr.w	ip, [pc, #120]	; 800a710 <__ieee754_pow+0xa20>
 800a698:	f7ff bbba 	b.w	8009e10 <__ieee754_pow+0x120>
 800a69c:	f04f 0b00 	mov.w	fp, #0
 800a6a0:	f04f 0c00 	mov.w	ip, #0
 800a6a4:	f7ff bbb4 	b.w	8009e10 <__ieee754_pow+0x120>
 800a6a8:	4640      	mov	r0, r8
 800a6aa:	4649      	mov	r1, r9
 800a6ac:	f7ff bb3d 	b.w	8009d2a <__ieee754_pow+0x3a>
 800a6b0:	9200      	str	r2, [sp, #0]
 800a6b2:	f7ff bb89 	b.w	8009dc8 <__ieee754_pow+0xd8>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	f7ff bb73 	b.w	8009da2 <__ieee754_pow+0xb2>
 800a6bc:	f3af 8000 	nop.w
 800a6c0:	652b82fe 	.word	0x652b82fe
 800a6c4:	3c971547 	.word	0x3c971547
 800a6c8:	00000000 	.word	0x00000000
 800a6cc:	3fe62e43 	.word	0x3fe62e43
 800a6d0:	fefa39ef 	.word	0xfefa39ef
 800a6d4:	3fe62e42 	.word	0x3fe62e42
 800a6d8:	0ca86c39 	.word	0x0ca86c39
 800a6dc:	be205c61 	.word	0xbe205c61
 800a6e0:	72bea4d0 	.word	0x72bea4d0
 800a6e4:	3e663769 	.word	0x3e663769
 800a6e8:	c5d26bf1 	.word	0xc5d26bf1
 800a6ec:	3ebbbd41 	.word	0x3ebbbd41
 800a6f0:	af25de2c 	.word	0xaf25de2c
 800a6f4:	3f11566a 	.word	0x3f11566a
 800a6f8:	16bebd93 	.word	0x16bebd93
 800a6fc:	3f66c16c 	.word	0x3f66c16c
 800a700:	5555553e 	.word	0x5555553e
 800a704:	3fc55555 	.word	0x3fc55555
 800a708:	3fe00000 	.word	0x3fe00000
 800a70c:	000fffff 	.word	0x000fffff
 800a710:	3ff00000 	.word	0x3ff00000
 800a714:	4090cbff 	.word	0x4090cbff
 800a718:	3f6f3400 	.word	0x3f6f3400

0800a71c <__ieee754_sqrt>:
 800a71c:	f8df c158 	ldr.w	ip, [pc, #344]	; 800a878 <__ieee754_sqrt+0x15c>
 800a720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a724:	ea3c 0c01 	bics.w	ip, ip, r1
 800a728:	4606      	mov	r6, r0
 800a72a:	460d      	mov	r5, r1
 800a72c:	460c      	mov	r4, r1
 800a72e:	460a      	mov	r2, r1
 800a730:	4607      	mov	r7, r0
 800a732:	4603      	mov	r3, r0
 800a734:	d10f      	bne.n	800a756 <__ieee754_sqrt+0x3a>
 800a736:	4602      	mov	r2, r0
 800a738:	460b      	mov	r3, r1
 800a73a:	f7f5 fec5 	bl	80004c8 <__aeabi_dmul>
 800a73e:	4602      	mov	r2, r0
 800a740:	460b      	mov	r3, r1
 800a742:	4630      	mov	r0, r6
 800a744:	4629      	mov	r1, r5
 800a746:	f7f5 fd09 	bl	800015c <__adddf3>
 800a74a:	4606      	mov	r6, r0
 800a74c:	460d      	mov	r5, r1
 800a74e:	4630      	mov	r0, r6
 800a750:	4629      	mov	r1, r5
 800a752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a756:	2900      	cmp	r1, #0
 800a758:	dc0e      	bgt.n	800a778 <__ieee754_sqrt+0x5c>
 800a75a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a75e:	ea5c 0707 	orrs.w	r7, ip, r7
 800a762:	d0f4      	beq.n	800a74e <__ieee754_sqrt+0x32>
 800a764:	b141      	cbz	r1, 800a778 <__ieee754_sqrt+0x5c>
 800a766:	4602      	mov	r2, r0
 800a768:	460b      	mov	r3, r1
 800a76a:	f7f5 fcf5 	bl	8000158 <__aeabi_dsub>
 800a76e:	4602      	mov	r2, r0
 800a770:	460b      	mov	r3, r1
 800a772:	f7f5 ffd3 	bl	800071c <__aeabi_ddiv>
 800a776:	e7e8      	b.n	800a74a <__ieee754_sqrt+0x2e>
 800a778:	1521      	asrs	r1, r4, #20
 800a77a:	d075      	beq.n	800a868 <__ieee754_sqrt+0x14c>
 800a77c:	07cc      	lsls	r4, r1, #31
 800a77e:	f04f 0400 	mov.w	r4, #0
 800a782:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a786:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800a78a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a78e:	bf5e      	ittt	pl
 800a790:	0fd9      	lsrpl	r1, r3, #31
 800a792:	005b      	lslpl	r3, r3, #1
 800a794:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800a798:	0fd9      	lsrs	r1, r3, #31
 800a79a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800a79e:	2516      	movs	r5, #22
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a7a6:	107f      	asrs	r7, r7, #1
 800a7a8:	005b      	lsls	r3, r3, #1
 800a7aa:	1846      	adds	r6, r0, r1
 800a7ac:	4296      	cmp	r6, r2
 800a7ae:	bfde      	ittt	le
 800a7b0:	1b92      	suble	r2, r2, r6
 800a7b2:	1870      	addle	r0, r6, r1
 800a7b4:	1864      	addle	r4, r4, r1
 800a7b6:	0052      	lsls	r2, r2, #1
 800a7b8:	3d01      	subs	r5, #1
 800a7ba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a7be:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a7c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a7c6:	d1f0      	bne.n	800a7aa <__ieee754_sqrt+0x8e>
 800a7c8:	4629      	mov	r1, r5
 800a7ca:	f04f 0e20 	mov.w	lr, #32
 800a7ce:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a7d2:	4282      	cmp	r2, r0
 800a7d4:	eb06 0c05 	add.w	ip, r6, r5
 800a7d8:	dc02      	bgt.n	800a7e0 <__ieee754_sqrt+0xc4>
 800a7da:	d113      	bne.n	800a804 <__ieee754_sqrt+0xe8>
 800a7dc:	459c      	cmp	ip, r3
 800a7de:	d811      	bhi.n	800a804 <__ieee754_sqrt+0xe8>
 800a7e0:	f1bc 0f00 	cmp.w	ip, #0
 800a7e4:	eb0c 0506 	add.w	r5, ip, r6
 800a7e8:	da43      	bge.n	800a872 <__ieee754_sqrt+0x156>
 800a7ea:	2d00      	cmp	r5, #0
 800a7ec:	db41      	blt.n	800a872 <__ieee754_sqrt+0x156>
 800a7ee:	f100 0801 	add.w	r8, r0, #1
 800a7f2:	1a12      	subs	r2, r2, r0
 800a7f4:	4640      	mov	r0, r8
 800a7f6:	459c      	cmp	ip, r3
 800a7f8:	bf88      	it	hi
 800a7fa:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a7fe:	eba3 030c 	sub.w	r3, r3, ip
 800a802:	4431      	add	r1, r6
 800a804:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a808:	f1be 0e01 	subs.w	lr, lr, #1
 800a80c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800a810:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a814:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a818:	d1db      	bne.n	800a7d2 <__ieee754_sqrt+0xb6>
 800a81a:	4313      	orrs	r3, r2
 800a81c:	d006      	beq.n	800a82c <__ieee754_sqrt+0x110>
 800a81e:	1c48      	adds	r0, r1, #1
 800a820:	bf0b      	itete	eq
 800a822:	4671      	moveq	r1, lr
 800a824:	3101      	addne	r1, #1
 800a826:	3401      	addeq	r4, #1
 800a828:	f021 0101 	bicne.w	r1, r1, #1
 800a82c:	1063      	asrs	r3, r4, #1
 800a82e:	0849      	lsrs	r1, r1, #1
 800a830:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a834:	07e2      	lsls	r2, r4, #31
 800a836:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a83a:	bf48      	it	mi
 800a83c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a840:	460e      	mov	r6, r1
 800a842:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a846:	e782      	b.n	800a74e <__ieee754_sqrt+0x32>
 800a848:	0ada      	lsrs	r2, r3, #11
 800a84a:	3815      	subs	r0, #21
 800a84c:	055b      	lsls	r3, r3, #21
 800a84e:	2a00      	cmp	r2, #0
 800a850:	d0fa      	beq.n	800a848 <__ieee754_sqrt+0x12c>
 800a852:	02d5      	lsls	r5, r2, #11
 800a854:	d50a      	bpl.n	800a86c <__ieee754_sqrt+0x150>
 800a856:	f1c1 0420 	rsb	r4, r1, #32
 800a85a:	fa23 f404 	lsr.w	r4, r3, r4
 800a85e:	1e4d      	subs	r5, r1, #1
 800a860:	408b      	lsls	r3, r1
 800a862:	4322      	orrs	r2, r4
 800a864:	1b41      	subs	r1, r0, r5
 800a866:	e789      	b.n	800a77c <__ieee754_sqrt+0x60>
 800a868:	4608      	mov	r0, r1
 800a86a:	e7f0      	b.n	800a84e <__ieee754_sqrt+0x132>
 800a86c:	0052      	lsls	r2, r2, #1
 800a86e:	3101      	adds	r1, #1
 800a870:	e7ef      	b.n	800a852 <__ieee754_sqrt+0x136>
 800a872:	4680      	mov	r8, r0
 800a874:	e7bd      	b.n	800a7f2 <__ieee754_sqrt+0xd6>
 800a876:	bf00      	nop
 800a878:	7ff00000 	.word	0x7ff00000

0800a87c <__ieee754_asinf>:
 800a87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a880:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800a884:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800a888:	4604      	mov	r4, r0
 800a88a:	4605      	mov	r5, r0
 800a88c:	d10c      	bne.n	800a8a8 <__ieee754_asinf+0x2c>
 800a88e:	498d      	ldr	r1, [pc, #564]	; (800aac4 <__ieee754_asinf+0x248>)
 800a890:	f7f6 fa70 	bl	8000d74 <__aeabi_fmul>
 800a894:	498c      	ldr	r1, [pc, #560]	; (800aac8 <__ieee754_asinf+0x24c>)
 800a896:	4605      	mov	r5, r0
 800a898:	4620      	mov	r0, r4
 800a89a:	f7f6 fa6b 	bl	8000d74 <__aeabi_fmul>
 800a89e:	4601      	mov	r1, r0
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	f7f6 f95f 	bl	8000b64 <__addsf3>
 800a8a6:	e006      	b.n	800a8b6 <__ieee754_asinf+0x3a>
 800a8a8:	dd07      	ble.n	800a8ba <__ieee754_asinf+0x3e>
 800a8aa:	4601      	mov	r1, r0
 800a8ac:	f7f6 f958 	bl	8000b60 <__aeabi_fsub>
 800a8b0:	4601      	mov	r1, r0
 800a8b2:	f7f6 fb13 	bl	8000edc <__aeabi_fdiv>
 800a8b6:	4604      	mov	r4, r0
 800a8b8:	e00e      	b.n	800a8d8 <__ieee754_asinf+0x5c>
 800a8ba:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800a8be:	da58      	bge.n	800a972 <__ieee754_asinf+0xf6>
 800a8c0:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800a8c4:	da0b      	bge.n	800a8de <__ieee754_asinf+0x62>
 800a8c6:	4981      	ldr	r1, [pc, #516]	; (800aacc <__ieee754_asinf+0x250>)
 800a8c8:	f7f6 f94c 	bl	8000b64 <__addsf3>
 800a8cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a8d0:	f7f6 fc0c 	bl	80010ec <__aeabi_fcmpgt>
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	d04c      	beq.n	800a972 <__ieee754_asinf+0xf6>
 800a8d8:	4620      	mov	r0, r4
 800a8da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8de:	4601      	mov	r1, r0
 800a8e0:	f7f6 fa48 	bl	8000d74 <__aeabi_fmul>
 800a8e4:	4605      	mov	r5, r0
 800a8e6:	497a      	ldr	r1, [pc, #488]	; (800aad0 <__ieee754_asinf+0x254>)
 800a8e8:	f7f6 fa44 	bl	8000d74 <__aeabi_fmul>
 800a8ec:	4979      	ldr	r1, [pc, #484]	; (800aad4 <__ieee754_asinf+0x258>)
 800a8ee:	f7f6 f939 	bl	8000b64 <__addsf3>
 800a8f2:	4629      	mov	r1, r5
 800a8f4:	f7f6 fa3e 	bl	8000d74 <__aeabi_fmul>
 800a8f8:	4977      	ldr	r1, [pc, #476]	; (800aad8 <__ieee754_asinf+0x25c>)
 800a8fa:	f7f6 f931 	bl	8000b60 <__aeabi_fsub>
 800a8fe:	4629      	mov	r1, r5
 800a900:	f7f6 fa38 	bl	8000d74 <__aeabi_fmul>
 800a904:	4975      	ldr	r1, [pc, #468]	; (800aadc <__ieee754_asinf+0x260>)
 800a906:	f7f6 f92d 	bl	8000b64 <__addsf3>
 800a90a:	4629      	mov	r1, r5
 800a90c:	f7f6 fa32 	bl	8000d74 <__aeabi_fmul>
 800a910:	4973      	ldr	r1, [pc, #460]	; (800aae0 <__ieee754_asinf+0x264>)
 800a912:	f7f6 f925 	bl	8000b60 <__aeabi_fsub>
 800a916:	4629      	mov	r1, r5
 800a918:	f7f6 fa2c 	bl	8000d74 <__aeabi_fmul>
 800a91c:	4971      	ldr	r1, [pc, #452]	; (800aae4 <__ieee754_asinf+0x268>)
 800a91e:	f7f6 f921 	bl	8000b64 <__addsf3>
 800a922:	4629      	mov	r1, r5
 800a924:	f7f6 fa26 	bl	8000d74 <__aeabi_fmul>
 800a928:	496f      	ldr	r1, [pc, #444]	; (800aae8 <__ieee754_asinf+0x26c>)
 800a92a:	4606      	mov	r6, r0
 800a92c:	4628      	mov	r0, r5
 800a92e:	f7f6 fa21 	bl	8000d74 <__aeabi_fmul>
 800a932:	496e      	ldr	r1, [pc, #440]	; (800aaec <__ieee754_asinf+0x270>)
 800a934:	f7f6 f914 	bl	8000b60 <__aeabi_fsub>
 800a938:	4629      	mov	r1, r5
 800a93a:	f7f6 fa1b 	bl	8000d74 <__aeabi_fmul>
 800a93e:	496c      	ldr	r1, [pc, #432]	; (800aaf0 <__ieee754_asinf+0x274>)
 800a940:	f7f6 f910 	bl	8000b64 <__addsf3>
 800a944:	4629      	mov	r1, r5
 800a946:	f7f6 fa15 	bl	8000d74 <__aeabi_fmul>
 800a94a:	496a      	ldr	r1, [pc, #424]	; (800aaf4 <__ieee754_asinf+0x278>)
 800a94c:	f7f6 f908 	bl	8000b60 <__aeabi_fsub>
 800a950:	4629      	mov	r1, r5
 800a952:	f7f6 fa0f 	bl	8000d74 <__aeabi_fmul>
 800a956:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a95a:	f7f6 f903 	bl	8000b64 <__addsf3>
 800a95e:	4601      	mov	r1, r0
 800a960:	4630      	mov	r0, r6
 800a962:	f7f6 fabb 	bl	8000edc <__aeabi_fdiv>
 800a966:	4621      	mov	r1, r4
 800a968:	f7f6 fa04 	bl	8000d74 <__aeabi_fmul>
 800a96c:	4601      	mov	r1, r0
 800a96e:	4620      	mov	r0, r4
 800a970:	e797      	b.n	800a8a2 <__ieee754_asinf+0x26>
 800a972:	4620      	mov	r0, r4
 800a974:	f000 fb5e 	bl	800b034 <fabsf>
 800a978:	4601      	mov	r1, r0
 800a97a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a97e:	f7f6 f8ef 	bl	8000b60 <__aeabi_fsub>
 800a982:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a986:	f7f6 f9f5 	bl	8000d74 <__aeabi_fmul>
 800a98a:	4606      	mov	r6, r0
 800a98c:	4950      	ldr	r1, [pc, #320]	; (800aad0 <__ieee754_asinf+0x254>)
 800a98e:	f7f6 f9f1 	bl	8000d74 <__aeabi_fmul>
 800a992:	4950      	ldr	r1, [pc, #320]	; (800aad4 <__ieee754_asinf+0x258>)
 800a994:	f7f6 f8e6 	bl	8000b64 <__addsf3>
 800a998:	4631      	mov	r1, r6
 800a99a:	f7f6 f9eb 	bl	8000d74 <__aeabi_fmul>
 800a99e:	494e      	ldr	r1, [pc, #312]	; (800aad8 <__ieee754_asinf+0x25c>)
 800a9a0:	f7f6 f8de 	bl	8000b60 <__aeabi_fsub>
 800a9a4:	4631      	mov	r1, r6
 800a9a6:	f7f6 f9e5 	bl	8000d74 <__aeabi_fmul>
 800a9aa:	494c      	ldr	r1, [pc, #304]	; (800aadc <__ieee754_asinf+0x260>)
 800a9ac:	f7f6 f8da 	bl	8000b64 <__addsf3>
 800a9b0:	4631      	mov	r1, r6
 800a9b2:	f7f6 f9df 	bl	8000d74 <__aeabi_fmul>
 800a9b6:	494a      	ldr	r1, [pc, #296]	; (800aae0 <__ieee754_asinf+0x264>)
 800a9b8:	f7f6 f8d2 	bl	8000b60 <__aeabi_fsub>
 800a9bc:	4631      	mov	r1, r6
 800a9be:	f7f6 f9d9 	bl	8000d74 <__aeabi_fmul>
 800a9c2:	4948      	ldr	r1, [pc, #288]	; (800aae4 <__ieee754_asinf+0x268>)
 800a9c4:	f7f6 f8ce 	bl	8000b64 <__addsf3>
 800a9c8:	4631      	mov	r1, r6
 800a9ca:	f7f6 f9d3 	bl	8000d74 <__aeabi_fmul>
 800a9ce:	4946      	ldr	r1, [pc, #280]	; (800aae8 <__ieee754_asinf+0x26c>)
 800a9d0:	4681      	mov	r9, r0
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	f7f6 f9ce 	bl	8000d74 <__aeabi_fmul>
 800a9d8:	4944      	ldr	r1, [pc, #272]	; (800aaec <__ieee754_asinf+0x270>)
 800a9da:	f7f6 f8c1 	bl	8000b60 <__aeabi_fsub>
 800a9de:	4631      	mov	r1, r6
 800a9e0:	f7f6 f9c8 	bl	8000d74 <__aeabi_fmul>
 800a9e4:	4942      	ldr	r1, [pc, #264]	; (800aaf0 <__ieee754_asinf+0x274>)
 800a9e6:	f7f6 f8bd 	bl	8000b64 <__addsf3>
 800a9ea:	4631      	mov	r1, r6
 800a9ec:	f7f6 f9c2 	bl	8000d74 <__aeabi_fmul>
 800a9f0:	4940      	ldr	r1, [pc, #256]	; (800aaf4 <__ieee754_asinf+0x278>)
 800a9f2:	f7f6 f8b5 	bl	8000b60 <__aeabi_fsub>
 800a9f6:	4631      	mov	r1, r6
 800a9f8:	f7f6 f9bc 	bl	8000d74 <__aeabi_fmul>
 800a9fc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800aa00:	f7f6 f8b0 	bl	8000b64 <__addsf3>
 800aa04:	4682      	mov	sl, r0
 800aa06:	4630      	mov	r0, r6
 800aa08:	f000 f902 	bl	800ac10 <__ieee754_sqrtf>
 800aa0c:	4b3a      	ldr	r3, [pc, #232]	; (800aaf8 <__ieee754_asinf+0x27c>)
 800aa0e:	4607      	mov	r7, r0
 800aa10:	4598      	cmp	r8, r3
 800aa12:	dd1a      	ble.n	800aa4a <__ieee754_asinf+0x1ce>
 800aa14:	4651      	mov	r1, sl
 800aa16:	4648      	mov	r0, r9
 800aa18:	f7f6 fa60 	bl	8000edc <__aeabi_fdiv>
 800aa1c:	4639      	mov	r1, r7
 800aa1e:	f7f6 f9a9 	bl	8000d74 <__aeabi_fmul>
 800aa22:	4639      	mov	r1, r7
 800aa24:	f7f6 f89e 	bl	8000b64 <__addsf3>
 800aa28:	4601      	mov	r1, r0
 800aa2a:	f7f6 f89b 	bl	8000b64 <__addsf3>
 800aa2e:	4933      	ldr	r1, [pc, #204]	; (800aafc <__ieee754_asinf+0x280>)
 800aa30:	f7f6 f898 	bl	8000b64 <__addsf3>
 800aa34:	4601      	mov	r1, r0
 800aa36:	4823      	ldr	r0, [pc, #140]	; (800aac4 <__ieee754_asinf+0x248>)
 800aa38:	f7f6 f892 	bl	8000b60 <__aeabi_fsub>
 800aa3c:	2d00      	cmp	r5, #0
 800aa3e:	4604      	mov	r4, r0
 800aa40:	f73f af4a 	bgt.w	800a8d8 <__ieee754_asinf+0x5c>
 800aa44:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800aa48:	e735      	b.n	800a8b6 <__ieee754_asinf+0x3a>
 800aa4a:	4601      	mov	r1, r0
 800aa4c:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800aa50:	f7f6 f888 	bl	8000b64 <__addsf3>
 800aa54:	4651      	mov	r1, sl
 800aa56:	4604      	mov	r4, r0
 800aa58:	4648      	mov	r0, r9
 800aa5a:	f7f6 fa3f 	bl	8000edc <__aeabi_fdiv>
 800aa5e:	4601      	mov	r1, r0
 800aa60:	4620      	mov	r0, r4
 800aa62:	f7f6 f987 	bl	8000d74 <__aeabi_fmul>
 800aa66:	f028 080f 	bic.w	r8, r8, #15
 800aa6a:	4681      	mov	r9, r0
 800aa6c:	4641      	mov	r1, r8
 800aa6e:	4640      	mov	r0, r8
 800aa70:	f7f6 f980 	bl	8000d74 <__aeabi_fmul>
 800aa74:	4601      	mov	r1, r0
 800aa76:	4630      	mov	r0, r6
 800aa78:	f7f6 f872 	bl	8000b60 <__aeabi_fsub>
 800aa7c:	4641      	mov	r1, r8
 800aa7e:	4604      	mov	r4, r0
 800aa80:	4638      	mov	r0, r7
 800aa82:	f7f6 f86f 	bl	8000b64 <__addsf3>
 800aa86:	4601      	mov	r1, r0
 800aa88:	4620      	mov	r0, r4
 800aa8a:	f7f6 fa27 	bl	8000edc <__aeabi_fdiv>
 800aa8e:	4601      	mov	r1, r0
 800aa90:	f7f6 f868 	bl	8000b64 <__addsf3>
 800aa94:	4601      	mov	r1, r0
 800aa96:	480c      	ldr	r0, [pc, #48]	; (800aac8 <__ieee754_asinf+0x24c>)
 800aa98:	f7f6 f862 	bl	8000b60 <__aeabi_fsub>
 800aa9c:	4601      	mov	r1, r0
 800aa9e:	4648      	mov	r0, r9
 800aaa0:	f7f6 f85e 	bl	8000b60 <__aeabi_fsub>
 800aaa4:	4641      	mov	r1, r8
 800aaa6:	4604      	mov	r4, r0
 800aaa8:	4640      	mov	r0, r8
 800aaaa:	f7f6 f85b 	bl	8000b64 <__addsf3>
 800aaae:	4601      	mov	r1, r0
 800aab0:	4813      	ldr	r0, [pc, #76]	; (800ab00 <__ieee754_asinf+0x284>)
 800aab2:	f7f6 f855 	bl	8000b60 <__aeabi_fsub>
 800aab6:	4601      	mov	r1, r0
 800aab8:	4620      	mov	r0, r4
 800aaba:	f7f6 f851 	bl	8000b60 <__aeabi_fsub>
 800aabe:	4601      	mov	r1, r0
 800aac0:	480f      	ldr	r0, [pc, #60]	; (800ab00 <__ieee754_asinf+0x284>)
 800aac2:	e7b9      	b.n	800aa38 <__ieee754_asinf+0x1bc>
 800aac4:	3fc90fdb 	.word	0x3fc90fdb
 800aac8:	b33bbd2e 	.word	0xb33bbd2e
 800aacc:	7149f2ca 	.word	0x7149f2ca
 800aad0:	3811ef08 	.word	0x3811ef08
 800aad4:	3a4f7f04 	.word	0x3a4f7f04
 800aad8:	3d241146 	.word	0x3d241146
 800aadc:	3e4e0aa8 	.word	0x3e4e0aa8
 800aae0:	3ea6b090 	.word	0x3ea6b090
 800aae4:	3e2aaaab 	.word	0x3e2aaaab
 800aae8:	3d9dc62e 	.word	0x3d9dc62e
 800aaec:	3f303361 	.word	0x3f303361
 800aaf0:	4001572d 	.word	0x4001572d
 800aaf4:	4019d139 	.word	0x4019d139
 800aaf8:	3f799999 	.word	0x3f799999
 800aafc:	333bbd2e 	.word	0x333bbd2e
 800ab00:	3f490fdb 	.word	0x3f490fdb

0800ab04 <__ieee754_atan2f>:
 800ab04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab06:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ab0a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800ab0e:	4603      	mov	r3, r0
 800ab10:	dc05      	bgt.n	800ab1e <__ieee754_atan2f+0x1a>
 800ab12:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800ab16:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ab1a:	4607      	mov	r7, r0
 800ab1c:	dd04      	ble.n	800ab28 <__ieee754_atan2f+0x24>
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7f6 f820 	bl	8000b64 <__addsf3>
 800ab24:	4603      	mov	r3, r0
 800ab26:	e011      	b.n	800ab4c <__ieee754_atan2f+0x48>
 800ab28:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800ab2c:	d103      	bne.n	800ab36 <__ieee754_atan2f+0x32>
 800ab2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ab32:	f000 b973 	b.w	800ae1c <atanf>
 800ab36:	178c      	asrs	r4, r1, #30
 800ab38:	f004 0402 	and.w	r4, r4, #2
 800ab3c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ab40:	b932      	cbnz	r2, 800ab50 <__ieee754_atan2f+0x4c>
 800ab42:	2c02      	cmp	r4, #2
 800ab44:	d04c      	beq.n	800abe0 <__ieee754_atan2f+0xdc>
 800ab46:	2c03      	cmp	r4, #3
 800ab48:	d100      	bne.n	800ab4c <__ieee754_atan2f+0x48>
 800ab4a:	4b29      	ldr	r3, [pc, #164]	; (800abf0 <__ieee754_atan2f+0xec>)
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab50:	b91e      	cbnz	r6, 800ab5a <__ieee754_atan2f+0x56>
 800ab52:	2f00      	cmp	r7, #0
 800ab54:	da4a      	bge.n	800abec <__ieee754_atan2f+0xe8>
 800ab56:	4b27      	ldr	r3, [pc, #156]	; (800abf4 <__ieee754_atan2f+0xf0>)
 800ab58:	e7f8      	b.n	800ab4c <__ieee754_atan2f+0x48>
 800ab5a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800ab5e:	d10e      	bne.n	800ab7e <__ieee754_atan2f+0x7a>
 800ab60:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ab64:	f104 34ff 	add.w	r4, r4, #4294967295
 800ab68:	d105      	bne.n	800ab76 <__ieee754_atan2f+0x72>
 800ab6a:	2c02      	cmp	r4, #2
 800ab6c:	d83a      	bhi.n	800abe4 <__ieee754_atan2f+0xe0>
 800ab6e:	4b22      	ldr	r3, [pc, #136]	; (800abf8 <__ieee754_atan2f+0xf4>)
 800ab70:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ab74:	e7ea      	b.n	800ab4c <__ieee754_atan2f+0x48>
 800ab76:	2c02      	cmp	r4, #2
 800ab78:	d836      	bhi.n	800abe8 <__ieee754_atan2f+0xe4>
 800ab7a:	4b20      	ldr	r3, [pc, #128]	; (800abfc <__ieee754_atan2f+0xf8>)
 800ab7c:	e7f8      	b.n	800ab70 <__ieee754_atan2f+0x6c>
 800ab7e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ab82:	d0e6      	beq.n	800ab52 <__ieee754_atan2f+0x4e>
 800ab84:	1b92      	subs	r2, r2, r6
 800ab86:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 800ab8a:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800ab8e:	da17      	bge.n	800abc0 <__ieee754_atan2f+0xbc>
 800ab90:	2900      	cmp	r1, #0
 800ab92:	da01      	bge.n	800ab98 <__ieee754_atan2f+0x94>
 800ab94:	303c      	adds	r0, #60	; 0x3c
 800ab96:	db15      	blt.n	800abc4 <__ieee754_atan2f+0xc0>
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7f6 f99f 	bl	8000edc <__aeabi_fdiv>
 800ab9e:	f000 fa49 	bl	800b034 <fabsf>
 800aba2:	f000 f93b 	bl	800ae1c <atanf>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2c01      	cmp	r4, #1
 800abaa:	d00d      	beq.n	800abc8 <__ieee754_atan2f+0xc4>
 800abac:	2c02      	cmp	r4, #2
 800abae:	d00e      	beq.n	800abce <__ieee754_atan2f+0xca>
 800abb0:	2c00      	cmp	r4, #0
 800abb2:	d0cb      	beq.n	800ab4c <__ieee754_atan2f+0x48>
 800abb4:	4912      	ldr	r1, [pc, #72]	; (800ac00 <__ieee754_atan2f+0xfc>)
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7f5 ffd4 	bl	8000b64 <__addsf3>
 800abbc:	4911      	ldr	r1, [pc, #68]	; (800ac04 <__ieee754_atan2f+0x100>)
 800abbe:	e00c      	b.n	800abda <__ieee754_atan2f+0xd6>
 800abc0:	4b11      	ldr	r3, [pc, #68]	; (800ac08 <__ieee754_atan2f+0x104>)
 800abc2:	e7f1      	b.n	800aba8 <__ieee754_atan2f+0xa4>
 800abc4:	2300      	movs	r3, #0
 800abc6:	e7ef      	b.n	800aba8 <__ieee754_atan2f+0xa4>
 800abc8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800abcc:	e7be      	b.n	800ab4c <__ieee754_atan2f+0x48>
 800abce:	490c      	ldr	r1, [pc, #48]	; (800ac00 <__ieee754_atan2f+0xfc>)
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7f5 ffc7 	bl	8000b64 <__addsf3>
 800abd6:	4601      	mov	r1, r0
 800abd8:	480a      	ldr	r0, [pc, #40]	; (800ac04 <__ieee754_atan2f+0x100>)
 800abda:	f7f5 ffc1 	bl	8000b60 <__aeabi_fsub>
 800abde:	e7a1      	b.n	800ab24 <__ieee754_atan2f+0x20>
 800abe0:	4b08      	ldr	r3, [pc, #32]	; (800ac04 <__ieee754_atan2f+0x100>)
 800abe2:	e7b3      	b.n	800ab4c <__ieee754_atan2f+0x48>
 800abe4:	4b09      	ldr	r3, [pc, #36]	; (800ac0c <__ieee754_atan2f+0x108>)
 800abe6:	e7b1      	b.n	800ab4c <__ieee754_atan2f+0x48>
 800abe8:	2300      	movs	r3, #0
 800abea:	e7af      	b.n	800ab4c <__ieee754_atan2f+0x48>
 800abec:	4b06      	ldr	r3, [pc, #24]	; (800ac08 <__ieee754_atan2f+0x104>)
 800abee:	e7ad      	b.n	800ab4c <__ieee754_atan2f+0x48>
 800abf0:	c0490fdb 	.word	0xc0490fdb
 800abf4:	bfc90fdb 	.word	0xbfc90fdb
 800abf8:	0800b0e0 	.word	0x0800b0e0
 800abfc:	0800b0ec 	.word	0x0800b0ec
 800ac00:	33bbbd2e 	.word	0x33bbbd2e
 800ac04:	40490fdb 	.word	0x40490fdb
 800ac08:	3fc90fdb 	.word	0x3fc90fdb
 800ac0c:	3f490fdb 	.word	0x3f490fdb

0800ac10 <__ieee754_sqrtf>:
 800ac10:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800ac14:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ac18:	b570      	push	{r4, r5, r6, lr}
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	4604      	mov	r4, r0
 800ac1e:	d309      	bcc.n	800ac34 <__ieee754_sqrtf+0x24>
 800ac20:	4601      	mov	r1, r0
 800ac22:	f7f6 f8a7 	bl	8000d74 <__aeabi_fmul>
 800ac26:	4601      	mov	r1, r0
 800ac28:	4620      	mov	r0, r4
 800ac2a:	f7f5 ff9b 	bl	8000b64 <__addsf3>
 800ac2e:	4604      	mov	r4, r0
 800ac30:	4620      	mov	r0, r4
 800ac32:	bd70      	pop	{r4, r5, r6, pc}
 800ac34:	2a00      	cmp	r2, #0
 800ac36:	d0fb      	beq.n	800ac30 <__ieee754_sqrtf+0x20>
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	da06      	bge.n	800ac4a <__ieee754_sqrtf+0x3a>
 800ac3c:	4601      	mov	r1, r0
 800ac3e:	f7f5 ff8f 	bl	8000b60 <__aeabi_fsub>
 800ac42:	4601      	mov	r1, r0
 800ac44:	f7f6 f94a 	bl	8000edc <__aeabi_fdiv>
 800ac48:	e7f1      	b.n	800ac2e <__ieee754_sqrtf+0x1e>
 800ac4a:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800ac4e:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800ac52:	d029      	beq.n	800aca8 <__ieee754_sqrtf+0x98>
 800ac54:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800ac58:	07cb      	lsls	r3, r1, #31
 800ac5a:	f04f 0300 	mov.w	r3, #0
 800ac5e:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800ac62:	f04f 0419 	mov.w	r4, #25
 800ac66:	461e      	mov	r6, r3
 800ac68:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800ac6c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800ac70:	bf58      	it	pl
 800ac72:	0052      	lslpl	r2, r2, #1
 800ac74:	1040      	asrs	r0, r0, #1
 800ac76:	0052      	lsls	r2, r2, #1
 800ac78:	1875      	adds	r5, r6, r1
 800ac7a:	4295      	cmp	r5, r2
 800ac7c:	bfde      	ittt	le
 800ac7e:	186e      	addle	r6, r5, r1
 800ac80:	1b52      	suble	r2, r2, r5
 800ac82:	185b      	addle	r3, r3, r1
 800ac84:	3c01      	subs	r4, #1
 800ac86:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ac8a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ac8e:	d1f3      	bne.n	800ac78 <__ieee754_sqrtf+0x68>
 800ac90:	b112      	cbz	r2, 800ac98 <__ieee754_sqrtf+0x88>
 800ac92:	3301      	adds	r3, #1
 800ac94:	f023 0301 	bic.w	r3, r3, #1
 800ac98:	105c      	asrs	r4, r3, #1
 800ac9a:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800ac9e:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800aca2:	e7c5      	b.n	800ac30 <__ieee754_sqrtf+0x20>
 800aca4:	005b      	lsls	r3, r3, #1
 800aca6:	3201      	adds	r2, #1
 800aca8:	0218      	lsls	r0, r3, #8
 800acaa:	d5fb      	bpl.n	800aca4 <__ieee754_sqrtf+0x94>
 800acac:	3a01      	subs	r2, #1
 800acae:	1a89      	subs	r1, r1, r2
 800acb0:	e7d0      	b.n	800ac54 <__ieee754_sqrtf+0x44>

0800acb2 <with_errno>:
 800acb2:	b570      	push	{r4, r5, r6, lr}
 800acb4:	4604      	mov	r4, r0
 800acb6:	460d      	mov	r5, r1
 800acb8:	4616      	mov	r6, r2
 800acba:	f7fe ff37 	bl	8009b2c <__errno>
 800acbe:	4629      	mov	r1, r5
 800acc0:	6006      	str	r6, [r0, #0]
 800acc2:	4620      	mov	r0, r4
 800acc4:	bd70      	pop	{r4, r5, r6, pc}

0800acc6 <xflow>:
 800acc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acc8:	4615      	mov	r5, r2
 800acca:	461c      	mov	r4, r3
 800accc:	b180      	cbz	r0, 800acf0 <xflow+0x2a>
 800acce:	4610      	mov	r0, r2
 800acd0:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800acd4:	e9cd 0100 	strd	r0, r1, [sp]
 800acd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acdc:	4628      	mov	r0, r5
 800acde:	4621      	mov	r1, r4
 800ace0:	f7f5 fbf2 	bl	80004c8 <__aeabi_dmul>
 800ace4:	2222      	movs	r2, #34	; 0x22
 800ace6:	b003      	add	sp, #12
 800ace8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acec:	f7ff bfe1 	b.w	800acb2 <with_errno>
 800acf0:	4610      	mov	r0, r2
 800acf2:	4619      	mov	r1, r3
 800acf4:	e7ee      	b.n	800acd4 <xflow+0xe>

0800acf6 <__math_uflow>:
 800acf6:	2200      	movs	r2, #0
 800acf8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800acfc:	f7ff bfe3 	b.w	800acc6 <xflow>

0800ad00 <__math_oflow>:
 800ad00:	2200      	movs	r2, #0
 800ad02:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ad06:	f7ff bfde 	b.w	800acc6 <xflow>

0800ad0a <fabs>:
 800ad0a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ad0e:	4770      	bx	lr

0800ad10 <finite>:
 800ad10:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800ad14:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ad18:	0fc0      	lsrs	r0, r0, #31
 800ad1a:	4770      	bx	lr
 800ad1c:	0000      	movs	r0, r0
	...

0800ad20 <scalbn>:
 800ad20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad22:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800ad26:	4604      	mov	r4, r0
 800ad28:	460d      	mov	r5, r1
 800ad2a:	4617      	mov	r7, r2
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	b996      	cbnz	r6, 800ad56 <scalbn+0x36>
 800ad30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad34:	4303      	orrs	r3, r0
 800ad36:	d039      	beq.n	800adac <scalbn+0x8c>
 800ad38:	4b33      	ldr	r3, [pc, #204]	; (800ae08 <scalbn+0xe8>)
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f7f5 fbc4 	bl	80004c8 <__aeabi_dmul>
 800ad40:	4b32      	ldr	r3, [pc, #200]	; (800ae0c <scalbn+0xec>)
 800ad42:	4604      	mov	r4, r0
 800ad44:	429f      	cmp	r7, r3
 800ad46:	460d      	mov	r5, r1
 800ad48:	da0f      	bge.n	800ad6a <scalbn+0x4a>
 800ad4a:	a32b      	add	r3, pc, #172	; (adr r3, 800adf8 <scalbn+0xd8>)
 800ad4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad50:	f7f5 fbba 	bl	80004c8 <__aeabi_dmul>
 800ad54:	e006      	b.n	800ad64 <scalbn+0x44>
 800ad56:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ad5a:	4296      	cmp	r6, r2
 800ad5c:	d10a      	bne.n	800ad74 <scalbn+0x54>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	f7f5 f9fc 	bl	800015c <__adddf3>
 800ad64:	4604      	mov	r4, r0
 800ad66:	460d      	mov	r5, r1
 800ad68:	e020      	b.n	800adac <scalbn+0x8c>
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ad70:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800ad74:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800ad78:	19b9      	adds	r1, r7, r6
 800ad7a:	4291      	cmp	r1, r2
 800ad7c:	dd0e      	ble.n	800ad9c <scalbn+0x7c>
 800ad7e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ad82:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800ad86:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800ad8a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800ad8e:	4820      	ldr	r0, [pc, #128]	; (800ae10 <scalbn+0xf0>)
 800ad90:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800ad94:	a31a      	add	r3, pc, #104	; (adr r3, 800ae00 <scalbn+0xe0>)
 800ad96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9a:	e7d9      	b.n	800ad50 <scalbn+0x30>
 800ad9c:	2900      	cmp	r1, #0
 800ad9e:	dd08      	ble.n	800adb2 <scalbn+0x92>
 800ada0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ada4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ada8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800adac:	4620      	mov	r0, r4
 800adae:	4629      	mov	r1, r5
 800adb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adb2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800adb6:	da12      	bge.n	800adde <scalbn+0xbe>
 800adb8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800adbc:	429f      	cmp	r7, r3
 800adbe:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800adc2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800adc6:	dcdc      	bgt.n	800ad82 <scalbn+0x62>
 800adc8:	a30b      	add	r3, pc, #44	; (adr r3, 800adf8 <scalbn+0xd8>)
 800adca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adce:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800add2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800add6:	480f      	ldr	r0, [pc, #60]	; (800ae14 <scalbn+0xf4>)
 800add8:	f041 011f 	orr.w	r1, r1, #31
 800addc:	e7b8      	b.n	800ad50 <scalbn+0x30>
 800adde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ade2:	3136      	adds	r1, #54	; 0x36
 800ade4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ade8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800adec:	4620      	mov	r0, r4
 800adee:	4629      	mov	r1, r5
 800adf0:	2200      	movs	r2, #0
 800adf2:	4b09      	ldr	r3, [pc, #36]	; (800ae18 <scalbn+0xf8>)
 800adf4:	e7ac      	b.n	800ad50 <scalbn+0x30>
 800adf6:	bf00      	nop
 800adf8:	c2f8f359 	.word	0xc2f8f359
 800adfc:	01a56e1f 	.word	0x01a56e1f
 800ae00:	8800759c 	.word	0x8800759c
 800ae04:	7e37e43c 	.word	0x7e37e43c
 800ae08:	43500000 	.word	0x43500000
 800ae0c:	ffff3cb0 	.word	0xffff3cb0
 800ae10:	8800759c 	.word	0x8800759c
 800ae14:	c2f8f359 	.word	0xc2f8f359
 800ae18:	3c900000 	.word	0x3c900000

0800ae1c <atanf>:
 800ae1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae20:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800ae24:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800ae28:	4604      	mov	r4, r0
 800ae2a:	4680      	mov	r8, r0
 800ae2c:	db0e      	blt.n	800ae4c <atanf+0x30>
 800ae2e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800ae32:	dd04      	ble.n	800ae3e <atanf+0x22>
 800ae34:	4601      	mov	r1, r0
 800ae36:	f7f5 fe95 	bl	8000b64 <__addsf3>
 800ae3a:	4604      	mov	r4, r0
 800ae3c:	e003      	b.n	800ae46 <atanf+0x2a>
 800ae3e:	2800      	cmp	r0, #0
 800ae40:	f300 80ce 	bgt.w	800afe0 <atanf+0x1c4>
 800ae44:	4c67      	ldr	r4, [pc, #412]	; (800afe4 <atanf+0x1c8>)
 800ae46:	4620      	mov	r0, r4
 800ae48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae4c:	4b66      	ldr	r3, [pc, #408]	; (800afe8 <atanf+0x1cc>)
 800ae4e:	429d      	cmp	r5, r3
 800ae50:	dc0e      	bgt.n	800ae70 <atanf+0x54>
 800ae52:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800ae56:	da08      	bge.n	800ae6a <atanf+0x4e>
 800ae58:	4964      	ldr	r1, [pc, #400]	; (800afec <atanf+0x1d0>)
 800ae5a:	f7f5 fe83 	bl	8000b64 <__addsf3>
 800ae5e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ae62:	f7f6 f943 	bl	80010ec <__aeabi_fcmpgt>
 800ae66:	2800      	cmp	r0, #0
 800ae68:	d1ed      	bne.n	800ae46 <atanf+0x2a>
 800ae6a:	f04f 36ff 	mov.w	r6, #4294967295
 800ae6e:	e01c      	b.n	800aeaa <atanf+0x8e>
 800ae70:	f000 f8e0 	bl	800b034 <fabsf>
 800ae74:	4b5e      	ldr	r3, [pc, #376]	; (800aff0 <atanf+0x1d4>)
 800ae76:	4604      	mov	r4, r0
 800ae78:	429d      	cmp	r5, r3
 800ae7a:	dc7c      	bgt.n	800af76 <atanf+0x15a>
 800ae7c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800ae80:	429d      	cmp	r5, r3
 800ae82:	dc67      	bgt.n	800af54 <atanf+0x138>
 800ae84:	4601      	mov	r1, r0
 800ae86:	f7f5 fe6d 	bl	8000b64 <__addsf3>
 800ae8a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ae8e:	f7f5 fe67 	bl	8000b60 <__aeabi_fsub>
 800ae92:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ae96:	4605      	mov	r5, r0
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f7f5 fe63 	bl	8000b64 <__addsf3>
 800ae9e:	4601      	mov	r1, r0
 800aea0:	4628      	mov	r0, r5
 800aea2:	f7f6 f81b 	bl	8000edc <__aeabi_fdiv>
 800aea6:	2600      	movs	r6, #0
 800aea8:	4604      	mov	r4, r0
 800aeaa:	4621      	mov	r1, r4
 800aeac:	4620      	mov	r0, r4
 800aeae:	f7f5 ff61 	bl	8000d74 <__aeabi_fmul>
 800aeb2:	4601      	mov	r1, r0
 800aeb4:	4607      	mov	r7, r0
 800aeb6:	f7f5 ff5d 	bl	8000d74 <__aeabi_fmul>
 800aeba:	4605      	mov	r5, r0
 800aebc:	494d      	ldr	r1, [pc, #308]	; (800aff4 <atanf+0x1d8>)
 800aebe:	f7f5 ff59 	bl	8000d74 <__aeabi_fmul>
 800aec2:	494d      	ldr	r1, [pc, #308]	; (800aff8 <atanf+0x1dc>)
 800aec4:	f7f5 fe4e 	bl	8000b64 <__addsf3>
 800aec8:	4629      	mov	r1, r5
 800aeca:	f7f5 ff53 	bl	8000d74 <__aeabi_fmul>
 800aece:	494b      	ldr	r1, [pc, #300]	; (800affc <atanf+0x1e0>)
 800aed0:	f7f5 fe48 	bl	8000b64 <__addsf3>
 800aed4:	4629      	mov	r1, r5
 800aed6:	f7f5 ff4d 	bl	8000d74 <__aeabi_fmul>
 800aeda:	4949      	ldr	r1, [pc, #292]	; (800b000 <atanf+0x1e4>)
 800aedc:	f7f5 fe42 	bl	8000b64 <__addsf3>
 800aee0:	4629      	mov	r1, r5
 800aee2:	f7f5 ff47 	bl	8000d74 <__aeabi_fmul>
 800aee6:	4947      	ldr	r1, [pc, #284]	; (800b004 <atanf+0x1e8>)
 800aee8:	f7f5 fe3c 	bl	8000b64 <__addsf3>
 800aeec:	4629      	mov	r1, r5
 800aeee:	f7f5 ff41 	bl	8000d74 <__aeabi_fmul>
 800aef2:	4945      	ldr	r1, [pc, #276]	; (800b008 <atanf+0x1ec>)
 800aef4:	f7f5 fe36 	bl	8000b64 <__addsf3>
 800aef8:	4639      	mov	r1, r7
 800aefa:	f7f5 ff3b 	bl	8000d74 <__aeabi_fmul>
 800aefe:	4943      	ldr	r1, [pc, #268]	; (800b00c <atanf+0x1f0>)
 800af00:	4607      	mov	r7, r0
 800af02:	4628      	mov	r0, r5
 800af04:	f7f5 ff36 	bl	8000d74 <__aeabi_fmul>
 800af08:	4941      	ldr	r1, [pc, #260]	; (800b010 <atanf+0x1f4>)
 800af0a:	f7f5 fe29 	bl	8000b60 <__aeabi_fsub>
 800af0e:	4629      	mov	r1, r5
 800af10:	f7f5 ff30 	bl	8000d74 <__aeabi_fmul>
 800af14:	493f      	ldr	r1, [pc, #252]	; (800b014 <atanf+0x1f8>)
 800af16:	f7f5 fe23 	bl	8000b60 <__aeabi_fsub>
 800af1a:	4629      	mov	r1, r5
 800af1c:	f7f5 ff2a 	bl	8000d74 <__aeabi_fmul>
 800af20:	493d      	ldr	r1, [pc, #244]	; (800b018 <atanf+0x1fc>)
 800af22:	f7f5 fe1d 	bl	8000b60 <__aeabi_fsub>
 800af26:	4629      	mov	r1, r5
 800af28:	f7f5 ff24 	bl	8000d74 <__aeabi_fmul>
 800af2c:	493b      	ldr	r1, [pc, #236]	; (800b01c <atanf+0x200>)
 800af2e:	f7f5 fe17 	bl	8000b60 <__aeabi_fsub>
 800af32:	4629      	mov	r1, r5
 800af34:	f7f5 ff1e 	bl	8000d74 <__aeabi_fmul>
 800af38:	4601      	mov	r1, r0
 800af3a:	4638      	mov	r0, r7
 800af3c:	f7f5 fe12 	bl	8000b64 <__addsf3>
 800af40:	4621      	mov	r1, r4
 800af42:	f7f5 ff17 	bl	8000d74 <__aeabi_fmul>
 800af46:	1c73      	adds	r3, r6, #1
 800af48:	4601      	mov	r1, r0
 800af4a:	d133      	bne.n	800afb4 <atanf+0x198>
 800af4c:	4620      	mov	r0, r4
 800af4e:	f7f5 fe07 	bl	8000b60 <__aeabi_fsub>
 800af52:	e772      	b.n	800ae3a <atanf+0x1e>
 800af54:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800af58:	f7f5 fe02 	bl	8000b60 <__aeabi_fsub>
 800af5c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800af60:	4605      	mov	r5, r0
 800af62:	4620      	mov	r0, r4
 800af64:	f7f5 fdfe 	bl	8000b64 <__addsf3>
 800af68:	4601      	mov	r1, r0
 800af6a:	4628      	mov	r0, r5
 800af6c:	f7f5 ffb6 	bl	8000edc <__aeabi_fdiv>
 800af70:	2601      	movs	r6, #1
 800af72:	4604      	mov	r4, r0
 800af74:	e799      	b.n	800aeaa <atanf+0x8e>
 800af76:	4b2a      	ldr	r3, [pc, #168]	; (800b020 <atanf+0x204>)
 800af78:	429d      	cmp	r5, r3
 800af7a:	dc14      	bgt.n	800afa6 <atanf+0x18a>
 800af7c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800af80:	f7f5 fdee 	bl	8000b60 <__aeabi_fsub>
 800af84:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800af88:	4605      	mov	r5, r0
 800af8a:	4620      	mov	r0, r4
 800af8c:	f7f5 fef2 	bl	8000d74 <__aeabi_fmul>
 800af90:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800af94:	f7f5 fde6 	bl	8000b64 <__addsf3>
 800af98:	4601      	mov	r1, r0
 800af9a:	4628      	mov	r0, r5
 800af9c:	f7f5 ff9e 	bl	8000edc <__aeabi_fdiv>
 800afa0:	2602      	movs	r6, #2
 800afa2:	4604      	mov	r4, r0
 800afa4:	e781      	b.n	800aeaa <atanf+0x8e>
 800afa6:	4601      	mov	r1, r0
 800afa8:	481e      	ldr	r0, [pc, #120]	; (800b024 <atanf+0x208>)
 800afaa:	f7f5 ff97 	bl	8000edc <__aeabi_fdiv>
 800afae:	2603      	movs	r6, #3
 800afb0:	4604      	mov	r4, r0
 800afb2:	e77a      	b.n	800aeaa <atanf+0x8e>
 800afb4:	4b1c      	ldr	r3, [pc, #112]	; (800b028 <atanf+0x20c>)
 800afb6:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800afba:	f7f5 fdd1 	bl	8000b60 <__aeabi_fsub>
 800afbe:	4621      	mov	r1, r4
 800afc0:	f7f5 fdce 	bl	8000b60 <__aeabi_fsub>
 800afc4:	4b19      	ldr	r3, [pc, #100]	; (800b02c <atanf+0x210>)
 800afc6:	4601      	mov	r1, r0
 800afc8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800afcc:	f7f5 fdc8 	bl	8000b60 <__aeabi_fsub>
 800afd0:	f1b8 0f00 	cmp.w	r8, #0
 800afd4:	4604      	mov	r4, r0
 800afd6:	f6bf af36 	bge.w	800ae46 <atanf+0x2a>
 800afda:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800afde:	e72c      	b.n	800ae3a <atanf+0x1e>
 800afe0:	4c13      	ldr	r4, [pc, #76]	; (800b030 <atanf+0x214>)
 800afe2:	e730      	b.n	800ae46 <atanf+0x2a>
 800afe4:	bfc90fdb 	.word	0xbfc90fdb
 800afe8:	3edfffff 	.word	0x3edfffff
 800afec:	7149f2ca 	.word	0x7149f2ca
 800aff0:	3f97ffff 	.word	0x3f97ffff
 800aff4:	3c8569d7 	.word	0x3c8569d7
 800aff8:	3d4bda59 	.word	0x3d4bda59
 800affc:	3d886b35 	.word	0x3d886b35
 800b000:	3dba2e6e 	.word	0x3dba2e6e
 800b004:	3e124925 	.word	0x3e124925
 800b008:	3eaaaaab 	.word	0x3eaaaaab
 800b00c:	bd15a221 	.word	0xbd15a221
 800b010:	3d6ef16b 	.word	0x3d6ef16b
 800b014:	3d9d8795 	.word	0x3d9d8795
 800b018:	3de38e38 	.word	0x3de38e38
 800b01c:	3e4ccccd 	.word	0x3e4ccccd
 800b020:	401bffff 	.word	0x401bffff
 800b024:	bf800000 	.word	0xbf800000
 800b028:	0800b108 	.word	0x0800b108
 800b02c:	0800b0f8 	.word	0x0800b0f8
 800b030:	3fc90fdb 	.word	0x3fc90fdb

0800b034 <fabsf>:
 800b034:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b038:	4770      	bx	lr
	...

0800b03c <nanf>:
 800b03c:	4800      	ldr	r0, [pc, #0]	; (800b040 <nanf+0x4>)
 800b03e:	4770      	bx	lr
 800b040:	7fc00000 	.word	0x7fc00000

0800b044 <_init>:
 800b044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b046:	bf00      	nop
 800b048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b04a:	bc08      	pop	{r3}
 800b04c:	469e      	mov	lr, r3
 800b04e:	4770      	bx	lr

0800b050 <_fini>:
 800b050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b052:	bf00      	nop
 800b054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b056:	bc08      	pop	{r3}
 800b058:	469e      	mov	lr, r3
 800b05a:	4770      	bx	lr
