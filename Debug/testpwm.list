
testpwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fe8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080090f8  080090f8  000190f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800915c  0800915c  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800915c  0800915c  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800915c  0800915c  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800915c  0800915c  0001915c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009160  08009160  00019160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08009164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  200000d8  08009238  000200d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  08009238  00020444  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc96  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b75  00000000  00000000  0002dd93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  0002f908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  000307f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001804f  00000000  00000000  00031638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103f7  00000000  00000000  00049687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c5e0  00000000  00000000  00059a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e605e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000469c  00000000  00000000  000e60b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000d8 	.word	0x200000d8
 800012c:	00000000 	.word	0x00000000
 8000130:	080090e0 	.word	0x080090e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000dc 	.word	0x200000dc
 800014c:	080090e0 	.word	0x080090e0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmpun>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010cc:	d102      	bne.n	80010d4 <__aeabi_fcmpun+0x14>
 80010ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010d2:	d108      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010d8:	d102      	bne.n	80010e0 <__aeabi_fcmpun+0x20>
 80010da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010de:	d102      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010e0:	f04f 0000 	mov.w	r0, #0
 80010e4:	4770      	bx	lr
 80010e6:	f04f 0001 	mov.w	r0, #1
 80010ea:	4770      	bx	lr

080010ec <__aeabi_f2iz>:
 80010ec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010f4:	d30f      	bcc.n	8001116 <__aeabi_f2iz+0x2a>
 80010f6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010fa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010fe:	d90d      	bls.n	800111c <__aeabi_f2iz+0x30>
 8001100:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001104:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001108:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800110c:	fa23 f002 	lsr.w	r0, r3, r2
 8001110:	bf18      	it	ne
 8001112:	4240      	negne	r0, r0
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr
 800111c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001120:	d101      	bne.n	8001126 <__aeabi_f2iz+0x3a>
 8001122:	0242      	lsls	r2, r0, #9
 8001124:	d105      	bne.n	8001132 <__aeabi_f2iz+0x46>
 8001126:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800112a:	bf08      	it	eq
 800112c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr

08001138 <setupMPU>:
float zeta = sqrt(3.0f / 4.0f) * PI * (0.0 / 180.0);
double deltaT = 0.0;
uint32_t newTime = 0;
uint32_t oldTime = 0;

uint8_t setupMPU(MPU9250_t *MPU9250, uint8_t addr) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	70fb      	strb	r3, [r7, #3]
        // addr should be valid for MPU
//	char badmpu1[] = "CHECK SETUP\n\r";
//	HAL_UART_Transmit(&huart6, badmpu1, strlen((char *)badmpu1), 0xFFFF);
        if ((addr>>1 < MPU9250_DEFAULT_ADDRESS) || (addr>>1 > MPU9250_DEFAULT_ADDRESS + 7)) {
 8001144:	78fb      	ldrb	r3, [r7, #3]
 8001146:	085b      	lsrs	r3, r3, #1
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b67      	cmp	r3, #103	; 0x67
 800114c:	d904      	bls.n	8001158 <setupMPU+0x20>
 800114e:	78fb      	ldrb	r3, [r7, #3]
 8001150:	085b      	lsrs	r3, r3, #1
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b6f      	cmp	r3, #111	; 0x6f
 8001156:	d901      	bls.n	800115c <setupMPU+0x24>
//        	char badmpu[] = "Bad Address\n\r";
//        	HAL_UART_Transmit(&huart6, badmpu, strlen((char *)badmpu), 0xFFFF);
            return 0;
 8001158:	2300      	movs	r3, #0
 800115a:	e022      	b.n	80011a2 <setupMPU+0x6a>
        //mpu_i2c_addr = addr;
       // MPU9250SelfTest(&hi2c1, SelfTest);
       // calibrateMPU9250(&hi2c1, gyroBias, accelBias);
   	//	HAL_Delay(1000);

        if (isConnectedMPU9250(MPU9250)==1) {
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 f824 	bl	80011aa <isConnectedMPU9250>
 8001162:	4603      	mov	r3, r0
 8001164:	2b01      	cmp	r3, #1
 8001166:	d117      	bne.n	8001198 <setupMPU+0x60>
        	MPU9250_Init(MPU9250);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 fd0f 	bl	8001b8c <MPU9250_Init>
            if (isConnectedAK8963(MPU9250)==1)
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f848 	bl	8001204 <isConnectedAK8963>
 8001174:	4603      	mov	r3, r0
 8001176:	2b01      	cmp	r3, #1
 8001178:	d108      	bne.n	800118c <setupMPU+0x54>
                initAK8963(MPU9250);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f000 fc8a 	bl	8001a94 <initAK8963>
//        	char badmpu[] = "Check MPU ADDRESS\n\r";
//        	HAL_UART_Transmit(&huart6, badmpu, strlen((char *)badmpu), 0xFFFF);
        	MPU9250->has_connected = 0;
            return 0;
        }
        MPU9250->has_connected = 1;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2201      	movs	r2, #1
 8001184:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        return 1;
 8001188:	2301      	movs	r3, #1
 800118a:	e00a      	b.n	80011a2 <setupMPU+0x6a>
            	MPU9250->has_connected = 0;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
                return 0;
 8001194:	2300      	movs	r3, #0
 8001196:	e004      	b.n	80011a2 <setupMPU+0x6a>
        	MPU9250->has_connected = 0;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
            return 0;
 80011a0:	2300      	movs	r3, #0
    }
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <isConnectedMPU9250>:
	            c = c & 0xBF;  // mask 1011111 keeps all the previous bits
	        }
	        writeByte(MPU9250_ADDRESS, PWR_MGMT_1, c);
}

uint8_t isConnectedMPU9250(){
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
	uint8_t c = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
 80011b0:	2175      	movs	r1, #117	; 0x75
 80011b2:	20d0      	movs	r0, #208	; 0xd0
 80011b4:	f000 fdf8 	bl	8001da8 <readByte>
 80011b8:	4603      	mov	r3, r0
 80011ba:	71fb      	strb	r3, [r7, #7]
	uint8_t b = (c == MPU9250_WHOAMI_DEFAULT_VALUE);
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	2b71      	cmp	r3, #113	; 0x71
 80011c0:	bf0c      	ite	eq
 80011c2:	2301      	moveq	r3, #1
 80011c4:	2300      	movne	r3, #0
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	71bb      	strb	r3, [r7, #6]
	b |= (c == MPU9255_WHOAMI_DEFAULT_VALUE);
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b73      	cmp	r3, #115	; 0x73
 80011ce:	bf0c      	ite	eq
 80011d0:	2301      	moveq	r3, #1
 80011d2:	2300      	movne	r3, #0
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	b25a      	sxtb	r2, r3
 80011d8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011dc:	4313      	orrs	r3, r2
 80011de:	b25b      	sxtb	r3, r3
 80011e0:	71bb      	strb	r3, [r7, #6]
	b |= (c == MPU6500_WHOAMI_DEFAULT_VALUE);
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	2b70      	cmp	r3, #112	; 0x70
 80011e6:	bf0c      	ite	eq
 80011e8:	2301      	moveq	r3, #1
 80011ea:	2300      	movne	r3, #0
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	b25a      	sxtb	r2, r3
 80011f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b25b      	sxtb	r3, r3
 80011f8:	71bb      	strb	r3, [r7, #6]
	return b;
 80011fa:	79bb      	ldrb	r3, [r7, #6]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <isConnectedAK8963>:
uint8_t isConnectedAK8963(){
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
	uint8_t c = readByte(AK8963_ADDRESS, WHO_AM_I_AK8963);
 800120a:	2100      	movs	r1, #0
 800120c:	2018      	movs	r0, #24
 800120e:	f000 fdcb 	bl	8001da8 <readByte>
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
	return (c == AK8963_WHOAMI_DEFAULT_VALUE);
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	2b48      	cmp	r3, #72	; 0x48
 800121a:	bf0c      	ite	eq
 800121c:	2301      	moveq	r3, #1
 800121e:	2300      	movne	r3, #0
 8001220:	b2db      	uxtb	r3, r3
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <MPUavailable>:

uint8_t MPUisSleeping(){
	uint8_t c = readByte(MPU9250_ADDRESS, PWR_MGMT_1);
	return (c & 0x40) == 0x40;
}
uint8_t MPUavailable(MPU9250_t *MPU9250){
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
	return MPU9250 -> has_connected && (readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8001238:	2b00      	cmp	r3, #0
 800123a:	d00a      	beq.n	8001252 <MPUavailable+0x28>
 800123c:	213a      	movs	r1, #58	; 0x3a
 800123e:	20d0      	movs	r0, #208	; 0xd0
 8001240:	f000 fdb2 	bl	8001da8 <readByte>
 8001244:	4603      	mov	r3, r0
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MPUavailable+0x28>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <MPUavailable+0x2a>
 8001252:	2300      	movs	r3, #0
 8001254:	b2db      	uxtb	r3, r3
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <updateMPU>:

uint8_t updateMPU(MPU9250_t *MPU9250){
 8001260:	b580      	push	{r7, lr}
 8001262:	b092      	sub	sp, #72	; 0x48
 8001264:	af06      	add	r7, sp, #24
 8001266:	6078      	str	r0, [r7, #4]
	if (!(MPUavailable(MPU9250)==1)) return 0;
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ffde 	bl	800122a <MPUavailable>
 800126e:	4603      	mov	r3, r0
 8001270:	2b01      	cmp	r3, #1
 8001272:	d001      	beq.n	8001278 <updateMPU+0x18>
 8001274:	2300      	movs	r3, #0
 8001276:	e0a5      	b.n	80013c4 <updateMPU+0x164>

	        update_accel_gyro(MPU9250);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 fa0d 	bl	8001698 <update_accel_gyro>
	        update_mag(MPU9250);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f000 faa6 	bl	80017d0 <update_mag>
	        // get quaternion based on aircraft coordinate (Right-Hand, X-Forward, Z-Down)
	        // acc[mg], gyro[deg/s], mag [mG]
	        // gyro will be convert from [deg/s] to [rad/s] inside of this function
	        // quat_filter.update(-a[0], a[1], a[2], g[0] * DEG_TO_RAD, -g[1] * DEG_TO_RAD, -g[2] * DEG_TO_RAD, m[1], -m[0], m[2], q);

	        float an = -MPU9250->a[0];
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800128c:	62bb      	str	r3, [r7, #40]	; 0x28
	        float ae = +MPU9250->a[1];
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
	        float ad = +MPU9250->a[2];
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001298:	623b      	str	r3, [r7, #32]
	        float gn = +MPU9250->g[0] * DEG_TO_RAD;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f8ba 	bl	8000418 <__aeabi_f2d>
 80012a4:	a34a      	add	r3, pc, #296	; (adr r3, 80013d0 <updateMPU+0x170>)
 80012a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012aa:	f7ff f90d 	bl	80004c8 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	4b47      	ldr	r3, [pc, #284]	; (80013d8 <updateMPU+0x178>)
 80012bc:	f7ff fa2e 	bl	800071c <__aeabi_ddiv>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fbd6 	bl	8000a78 <__aeabi_d2f>
 80012cc:	4603      	mov	r3, r0
 80012ce:	61fb      	str	r3, [r7, #28]
	        float ge = -MPU9250->g[1] * DEG_TO_RAD;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80012d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f89d 	bl	8000418 <__aeabi_f2d>
 80012de:	a33c      	add	r3, pc, #240	; (adr r3, 80013d0 <updateMPU+0x170>)
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	f7ff f8f0 	bl	80004c8 <__aeabi_dmul>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	4b38      	ldr	r3, [pc, #224]	; (80013d8 <updateMPU+0x178>)
 80012f6:	f7ff fa11 	bl	800071c <__aeabi_ddiv>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4610      	mov	r0, r2
 8001300:	4619      	mov	r1, r3
 8001302:	f7ff fbb9 	bl	8000a78 <__aeabi_d2f>
 8001306:	4603      	mov	r3, r0
 8001308:	61bb      	str	r3, [r7, #24]
	        float gd = -MPU9250->g[2] * DEG_TO_RAD;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001310:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f87f 	bl	8000418 <__aeabi_f2d>
 800131a:	a32d      	add	r3, pc, #180	; (adr r3, 80013d0 <updateMPU+0x170>)
 800131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001320:	f7ff f8d2 	bl	80004c8 <__aeabi_dmul>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <updateMPU+0x178>)
 8001332:	f7ff f9f3 	bl	800071c <__aeabi_ddiv>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fb9b 	bl	8000a78 <__aeabi_d2f>
 8001342:	4603      	mov	r3, r0
 8001344:	617b      	str	r3, [r7, #20]
	        float mn = +MPU9250->m[1];
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800134c:	613b      	str	r3, [r7, #16]
	        float me = -MPU9250->m[0];
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001354:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001358:	60fb      	str	r3, [r7, #12]
	        float md = +MPU9250->m[2];
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001360:	60bb      	str	r3, [r7, #8]

	        for (size_t i = 0; i < MPU9250->n_filter_iter; ++i) {
 8001362:	2300      	movs	r3, #0
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001366:	e015      	b.n	8001394 <updateMPU+0x134>

	        	update_madgwick(an, ae, ad, gn, ge, gd, mn, me, md, MPU9250->q);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3390      	adds	r3, #144	; 0x90
 800136c:	9305      	str	r3, [sp, #20]
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	9304      	str	r3, [sp, #16]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	9303      	str	r3, [sp, #12]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	9302      	str	r3, [sp, #8]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	6a3a      	ldr	r2, [r7, #32]
 8001386:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800138a:	f000 fe65 	bl	8002058 <update_madgwick>
	        for (size_t i = 0; i < MPU9250->n_filter_iter; ++i) {
 800138e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001390:	3301      	adds	r3, #1
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800139a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800139c:	429a      	cmp	r2, r3
 800139e:	d3e3      	bcc.n	8001368 <updateMPU+0x108>
	        }


	        update_rpy(MPU9250, MPU9250->q[0], MPU9250->q[1], MPU9250->q[2], MPU9250->q[3]);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	4603      	mov	r3, r0
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 f80f 	bl	80013e0 <update_rpy>

	        return 1;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3730      	adds	r7, #48	; 0x30
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	f3af 8000 	nop.w
 80013d0:	54442d18 	.word	0x54442d18
 80013d4:	400921fb 	.word	0x400921fb
 80013d8:	40668000 	.word	0x40668000
 80013dc:	00000000 	.word	0x00000000

080013e0 <update_rpy>:

void setMagneticDeclination(MPU9250_t *MPU9250, const float d) {
	MPU9250->magnetic_declination = d;
}

void update_rpy(MPU9250_t *MPU9250, float qw, float qx, float qy, float qz){
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b08b      	sub	sp, #44	; 0x2c
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	603b      	str	r3, [r7, #0]
	        // These arise from the definition of the homogeneous rotation matrix constructed from quaternions.
	        // Tait-Bryan angles as well as Euler angles are non-commutative; that is, the get the correct orientation the rotations must be
	        // applied in the correct order which for this configuration is yaw, pitch, and then roll.
	        // For more see http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles which has additional links.
	        float a12, a22, a31, a32, a33;  // rotation matrix coefficients for Euler angles and gravity components
	        a12 = 2.0f * (qx * qy + qw * qz);
 80013ee:	6839      	ldr	r1, [r7, #0]
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff fc9f 	bl	8000d34 <__aeabi_fmul>
 80013f6:	4603      	mov	r3, r0
 80013f8:	461c      	mov	r4, r3
 80013fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80013fc:	68b8      	ldr	r0, [r7, #8]
 80013fe:	f7ff fc99 	bl	8000d34 <__aeabi_fmul>
 8001402:	4603      	mov	r3, r0
 8001404:	4619      	mov	r1, r3
 8001406:	4620      	mov	r0, r4
 8001408:	f7ff fb8c 	bl	8000b24 <__addsf3>
 800140c:	4603      	mov	r3, r0
 800140e:	4619      	mov	r1, r3
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fb87 	bl	8000b24 <__addsf3>
 8001416:	4603      	mov	r3, r0
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
	        a22 = qw * qw + qx * qx - qy * qy - qz * qz;
 800141a:	68b9      	ldr	r1, [r7, #8]
 800141c:	68b8      	ldr	r0, [r7, #8]
 800141e:	f7ff fc89 	bl	8000d34 <__aeabi_fmul>
 8001422:	4603      	mov	r3, r0
 8001424:	461c      	mov	r4, r3
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff fc83 	bl	8000d34 <__aeabi_fmul>
 800142e:	4603      	mov	r3, r0
 8001430:	4619      	mov	r1, r3
 8001432:	4620      	mov	r0, r4
 8001434:	f7ff fb76 	bl	8000b24 <__addsf3>
 8001438:	4603      	mov	r3, r0
 800143a:	461c      	mov	r4, r3
 800143c:	6839      	ldr	r1, [r7, #0]
 800143e:	6838      	ldr	r0, [r7, #0]
 8001440:	f7ff fc78 	bl	8000d34 <__aeabi_fmul>
 8001444:	4603      	mov	r3, r0
 8001446:	4619      	mov	r1, r3
 8001448:	4620      	mov	r0, r4
 800144a:	f7ff fb69 	bl	8000b20 <__aeabi_fsub>
 800144e:	4603      	mov	r3, r0
 8001450:	461c      	mov	r4, r3
 8001452:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001454:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001456:	f7ff fc6d 	bl	8000d34 <__aeabi_fmul>
 800145a:	4603      	mov	r3, r0
 800145c:	4619      	mov	r1, r3
 800145e:	4620      	mov	r0, r4
 8001460:	f7ff fb5e 	bl	8000b20 <__aeabi_fsub>
 8001464:	4603      	mov	r3, r0
 8001466:	623b      	str	r3, [r7, #32]
	        a31 = 2.0f * (qw * qx + qy * qz);
 8001468:	6879      	ldr	r1, [r7, #4]
 800146a:	68b8      	ldr	r0, [r7, #8]
 800146c:	f7ff fc62 	bl	8000d34 <__aeabi_fmul>
 8001470:	4603      	mov	r3, r0
 8001472:	461c      	mov	r4, r3
 8001474:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001476:	6838      	ldr	r0, [r7, #0]
 8001478:	f7ff fc5c 	bl	8000d34 <__aeabi_fmul>
 800147c:	4603      	mov	r3, r0
 800147e:	4619      	mov	r1, r3
 8001480:	4620      	mov	r0, r4
 8001482:	f7ff fb4f 	bl	8000b24 <__addsf3>
 8001486:	4603      	mov	r3, r0
 8001488:	4619      	mov	r1, r3
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fb4a 	bl	8000b24 <__addsf3>
 8001490:	4603      	mov	r3, r0
 8001492:	61fb      	str	r3, [r7, #28]
	        a32 = 2.0f * (qx * qz - qw * qy);
 8001494:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff fc4c 	bl	8000d34 <__aeabi_fmul>
 800149c:	4603      	mov	r3, r0
 800149e:	461c      	mov	r4, r3
 80014a0:	6839      	ldr	r1, [r7, #0]
 80014a2:	68b8      	ldr	r0, [r7, #8]
 80014a4:	f7ff fc46 	bl	8000d34 <__aeabi_fmul>
 80014a8:	4603      	mov	r3, r0
 80014aa:	4619      	mov	r1, r3
 80014ac:	4620      	mov	r0, r4
 80014ae:	f7ff fb37 	bl	8000b20 <__aeabi_fsub>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4619      	mov	r1, r3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fb34 	bl	8000b24 <__addsf3>
 80014bc:	4603      	mov	r3, r0
 80014be:	61bb      	str	r3, [r7, #24]
	        a33 = qw * qw - qx * qx - qy * qy + qz * qz;
 80014c0:	68b9      	ldr	r1, [r7, #8]
 80014c2:	68b8      	ldr	r0, [r7, #8]
 80014c4:	f7ff fc36 	bl	8000d34 <__aeabi_fmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	461c      	mov	r4, r3
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fc30 	bl	8000d34 <__aeabi_fmul>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4619      	mov	r1, r3
 80014d8:	4620      	mov	r0, r4
 80014da:	f7ff fb21 	bl	8000b20 <__aeabi_fsub>
 80014de:	4603      	mov	r3, r0
 80014e0:	461c      	mov	r4, r3
 80014e2:	6839      	ldr	r1, [r7, #0]
 80014e4:	6838      	ldr	r0, [r7, #0]
 80014e6:	f7ff fc25 	bl	8000d34 <__aeabi_fmul>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4619      	mov	r1, r3
 80014ee:	4620      	mov	r0, r4
 80014f0:	f7ff fb16 	bl	8000b20 <__aeabi_fsub>
 80014f4:	4603      	mov	r3, r0
 80014f6:	461c      	mov	r4, r3
 80014f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80014fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80014fc:	f7ff fc1a 	bl	8000d34 <__aeabi_fmul>
 8001500:	4603      	mov	r3, r0
 8001502:	4619      	mov	r1, r3
 8001504:	4620      	mov	r0, r4
 8001506:	f7ff fb0d 	bl	8000b24 <__addsf3>
 800150a:	4603      	mov	r3, r0
 800150c:	617b      	str	r3, [r7, #20]
	        MPU9250->rpy[0] = atan2f(a31, a33);
 800150e:	6979      	ldr	r1, [r7, #20]
 8001510:	69f8      	ldr	r0, [r7, #28]
 8001512:	f007 fa03 	bl	800891c <atan2f>
 8001516:	4602      	mov	r2, r0
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	        MPU9250->rpy[1] = -asinf(a32);
 800151e:	69b8      	ldr	r0, [r7, #24]
 8001520:	f007 f9dc 	bl	80088dc <asinf>
 8001524:	4603      	mov	r3, r0
 8001526:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	        MPU9250->rpy[2] = atan2f(a12, a22);
 8001530:	6a39      	ldr	r1, [r7, #32]
 8001532:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001534:	f007 f9f2 	bl	800891c <atan2f>
 8001538:	4602      	mov	r2, r0
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	        MPU9250->rpy[0] *= 180.0f / PI;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe ff66 	bl	8000418 <__aeabi_f2d>
 800154c:	a34c      	add	r3, pc, #304	; (adr r3, 8001680 <update_rpy+0x2a0>)
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	f7fe ffb9 	bl	80004c8 <__aeabi_dmul>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f7ff fa8b 	bl	8000a78 <__aeabi_d2f>
 8001562:	4602      	mov	r2, r0
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	        MPU9250->rpy[1] *= 180.0f / PI;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe ff51 	bl	8000418 <__aeabi_f2d>
 8001576:	a342      	add	r3, pc, #264	; (adr r3, 8001680 <update_rpy+0x2a0>)
 8001578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157c:	f7fe ffa4 	bl	80004c8 <__aeabi_dmul>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	f7ff fa76 	bl	8000a78 <__aeabi_d2f>
 800158c:	4602      	mov	r2, r0
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	        MPU9250->rpy[2] *= 180.0f / PI;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe ff3c 	bl	8000418 <__aeabi_f2d>
 80015a0:	a337      	add	r3, pc, #220	; (adr r3, 8001680 <update_rpy+0x2a0>)
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	f7fe ff8f 	bl	80004c8 <__aeabi_dmul>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4610      	mov	r0, r2
 80015b0:	4619      	mov	r1, r3
 80015b2:	f7ff fa61 	bl	8000a78 <__aeabi_d2f>
 80015b6:	4602      	mov	r2, r0
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	        MPU9250->rpy[2] += MPU9250->magnetic_declination;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c8:	4619      	mov	r1, r3
 80015ca:	4610      	mov	r0, r2
 80015cc:	f7ff faaa 	bl	8000b24 <__addsf3>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461a      	mov	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	        if (MPU9250->rpy[2] >= +180.f)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80015e0:	4929      	ldr	r1, [pc, #164]	; (8001688 <update_rpy+0x2a8>)
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fd58 	bl	8001098 <__aeabi_fcmpge>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00c      	beq.n	8001608 <update_rpy+0x228>
	        	MPU9250->rpy[2] -= 360.f;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80015f4:	4925      	ldr	r1, [pc, #148]	; (800168c <update_rpy+0x2ac>)
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fa92 	bl	8000b20 <__aeabi_fsub>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461a      	mov	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001606:	e015      	b.n	8001634 <update_rpy+0x254>
	        else if (MPU9250->rpy[2] < -180.f)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800160e:	4920      	ldr	r1, [pc, #128]	; (8001690 <update_rpy+0x2b0>)
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fd2d 	bl	8001070 <__aeabi_fcmplt>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00b      	beq.n	8001634 <update_rpy+0x254>
	        	MPU9250->rpy[2] += 360.f;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001622:	491a      	ldr	r1, [pc, #104]	; (800168c <update_rpy+0x2ac>)
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fa7d 	bl	8000b24 <__addsf3>
 800162a:	4603      	mov	r3, r0
 800162c:	461a      	mov	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

	        MPU9250->lin_acc[0] = MPU9250->a[0] + a31;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001638:	69f9      	ldr	r1, [r7, #28]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fa72 	bl	8000b24 <__addsf3>
 8001640:	4603      	mov	r3, r0
 8001642:	461a      	mov	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	        MPU9250->lin_acc[1] = MPU9250->a[1] + a32;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164e:	69b9      	ldr	r1, [r7, #24]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fa67 	bl	8000b24 <__addsf3>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	        MPU9250->lin_acc[2] = MPU9250->a[2] - a33;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001664:	6979      	ldr	r1, [r7, #20]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fa5a 	bl	8000b20 <__aeabi_fsub>
 800166c:	4603      	mov	r3, r0
 800166e:	461a      	mov	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	        //char str[] = "IN UPDATE rpy \n\r";
	        //HAL_UART_Transmit(&huart6, str, strlen((char *)str), 0xFFFF);
}
 8001676:	bf00      	nop
 8001678:	372c      	adds	r7, #44	; 0x2c
 800167a:	46bd      	mov	sp, r7
 800167c:	bd90      	pop	{r4, r7, pc}
 800167e:	bf00      	nop
 8001680:	1a63c1f8 	.word	0x1a63c1f8
 8001684:	404ca5dc 	.word	0x404ca5dc
 8001688:	43340000 	.word	0x43340000
 800168c:	43b40000 	.word	0x43b40000
 8001690:	c3340000 	.word	0xc3340000
 8001694:	00000000 	.word	0x00000000

08001698 <update_accel_gyro>:

void update_accel_gyro(MPU9250_t *MPU9250) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
        int16_t raw_acc_gyro_data[7];        // used to read all 14 bytes at once from the MPU9250 accel/gyro
        readAccelGyro(raw_acc_gyro_data);  // INT cleared on any read
 80016a0:	f107 0308 	add.w	r3, r7, #8
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 f94b 	bl	8001940 <readAccelGyro>

        // Now we'll calculate the accleration value into actual g's
        MPU9250->a[0] = (float)raw_acc_gyro_data[0] * MPU9250->acc_resolution ;  // get actual g value, this depends on scale being set
 80016aa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff faec 	bl	8000c8c <__aeabi_i2f>
 80016b4:	4602      	mov	r2, r0
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4619      	mov	r1, r3
 80016bc:	4610      	mov	r0, r2
 80016be:	f7ff fb39 	bl	8000d34 <__aeabi_fmul>
 80016c2:	4603      	mov	r3, r0
 80016c4:	461a      	mov	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	66da      	str	r2, [r3, #108]	; 0x6c
        MPU9250->a[1] = (float)raw_acc_gyro_data[1] * MPU9250->acc_resolution ;
 80016ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fadc 	bl	8000c8c <__aeabi_i2f>
 80016d4:	4602      	mov	r2, r0
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4619      	mov	r1, r3
 80016dc:	4610      	mov	r0, r2
 80016de:	f7ff fb29 	bl	8000d34 <__aeabi_fmul>
 80016e2:	4603      	mov	r3, r0
 80016e4:	461a      	mov	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	671a      	str	r2, [r3, #112]	; 0x70
        MPU9250->a[2] = (float)raw_acc_gyro_data[2] * MPU9250->acc_resolution ;
 80016ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff facc 	bl	8000c8c <__aeabi_i2f>
 80016f4:	4602      	mov	r2, r0
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4619      	mov	r1, r3
 80016fc:	4610      	mov	r0, r2
 80016fe:	f7ff fb19 	bl	8000d34 <__aeabi_fmul>
 8001702:	4603      	mov	r3, r0
 8001704:	461a      	mov	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	675a      	str	r2, [r3, #116]	; 0x74

        MPU9250->temperature_count = raw_acc_gyro_data[3];                  // Read the adc values
 800170a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        MPU9250->temperature = ((float)MPU9250->temperature_count) / 333.87 + 21.0;  // Temperature in degrees Centigrade
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fab6 	bl	8000c8c <__aeabi_i2f>
 8001720:	4603      	mov	r3, r0
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe fe78 	bl	8000418 <__aeabi_f2d>
 8001728:	a325      	add	r3, pc, #148	; (adr r3, 80017c0 <update_accel_gyro+0x128>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	f7fe fff5 	bl	800071c <__aeabi_ddiv>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <update_accel_gyro+0x130>)
 8001740:	f7fe fd0c 	bl	800015c <__adddf3>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4610      	mov	r0, r2
 800174a:	4619      	mov	r1, r3
 800174c:	f7ff f994 	bl	8000a78 <__aeabi_d2f>
 8001750:	4602      	mov	r2, r0
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	651a      	str	r2, [r3, #80]	; 0x50

        // Calculate the gyro value into actual degrees per second
        MPU9250->g[0] = (float)raw_acc_gyro_data[4] * MPU9250->gyro_resolution ;  // get actual gyro value, this depends on scale being set
 8001756:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fa96 	bl	8000c8c <__aeabi_i2f>
 8001760:	4602      	mov	r2, r0
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4619      	mov	r1, r3
 8001768:	4610      	mov	r0, r2
 800176a:	f7ff fae3 	bl	8000d34 <__aeabi_fmul>
 800176e:	4603      	mov	r3, r0
 8001770:	461a      	mov	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	679a      	str	r2, [r3, #120]	; 0x78
        MPU9250->g[1] = (float)raw_acc_gyro_data[5] * MPU9250->gyro_resolution ;
 8001776:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fa86 	bl	8000c8c <__aeabi_i2f>
 8001780:	4602      	mov	r2, r0
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	4619      	mov	r1, r3
 8001788:	4610      	mov	r0, r2
 800178a:	f7ff fad3 	bl	8000d34 <__aeabi_fmul>
 800178e:	4603      	mov	r3, r0
 8001790:	461a      	mov	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	67da      	str	r2, [r3, #124]	; 0x7c
        MPU9250->g[2] = (float)raw_acc_gyro_data[6] * MPU9250->gyro_resolution ;
 8001796:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fa76 	bl	8000c8c <__aeabi_i2f>
 80017a0:	4602      	mov	r2, r0
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4619      	mov	r1, r3
 80017a8:	4610      	mov	r0, r2
 80017aa:	f7ff fac3 	bl	8000d34 <__aeabi_fmul>
 80017ae:	4603      	mov	r3, r0
 80017b0:	461a      	mov	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
 80017b8:	bf00      	nop
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	851eb852 	.word	0x851eb852
 80017c4:	4074ddeb 	.word	0x4074ddeb
 80017c8:	40350000 	.word	0x40350000
 80017cc:	00000000 	.word	0x00000000

080017d0 <update_mag>:

void update_mag(MPU9250_t *MPU9250) {
 80017d0:	b590      	push	{r4, r7, lr}
 80017d2:	b087      	sub	sp, #28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
        int16_t mag_count[3] = {0, 0, 0};  // Stores the 16-bit signed magnetometer sensor output
 80017d8:	2300      	movs	r3, #0
 80017da:	81bb      	strh	r3, [r7, #12]
 80017dc:	2300      	movs	r3, #0
 80017de:	81fb      	strh	r3, [r7, #14]
 80017e0:	2300      	movs	r3, #0
 80017e2:	823b      	strh	r3, [r7, #16]

        // Read the x/y/z adc values
        if (readMag(mag_count)==1) {
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	4618      	mov	r0, r3
 80017ea:	f000 f8fd 	bl	80019e8 <readMag>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	f040 809c 	bne.w	800192e <update_mag+0x15e>
            // Calculate the magnetometer values in milliGauss
            // Include factory calibration per data sheet and user environmental corrections
            // mag_bias is calcurated in 16BITS
            float bias_to_current_bits = MPU9250->mag_resolution / (10.*4912./32760.0);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fe0c 	bl	8000418 <__aeabi_f2d>
 8001800:	a34d      	add	r3, pc, #308	; (adr r3, 8001938 <update_mag+0x168>)
 8001802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001806:	f7fe ff89 	bl	800071c <__aeabi_ddiv>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	f7ff f931 	bl	8000a78 <__aeabi_d2f>
 8001816:	4603      	mov	r3, r0
 8001818:	617b      	str	r3, [r7, #20]
            MPU9250->m[0] = (float)(mag_count[0] * MPU9250->mag_resolution * MPU9250->mag_bias_factory[0] - MPU9250->mag_bias[0] * bias_to_current_bits) * MPU9250->mag_scale[0] ;  // get actual magnetometer value, this depends on scale being set
 800181a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fa34 	bl	8000c8c <__aeabi_i2f>
 8001824:	4602      	mov	r2, r0
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	4619      	mov	r1, r3
 800182c:	4610      	mov	r0, r2
 800182e:	f7ff fa81 	bl	8000d34 <__aeabi_fmul>
 8001832:	4603      	mov	r3, r0
 8001834:	461a      	mov	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	4619      	mov	r1, r3
 800183c:	4610      	mov	r0, r2
 800183e:	f7ff fa79 	bl	8000d34 <__aeabi_fmul>
 8001842:	4603      	mov	r3, r0
 8001844:	461c      	mov	r4, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	6979      	ldr	r1, [r7, #20]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fa71 	bl	8000d34 <__aeabi_fmul>
 8001852:	4603      	mov	r3, r0
 8001854:	4619      	mov	r1, r3
 8001856:	4620      	mov	r0, r4
 8001858:	f7ff f962 	bl	8000b20 <__aeabi_fsub>
 800185c:	4603      	mov	r3, r0
 800185e:	461a      	mov	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001864:	4619      	mov	r1, r3
 8001866:	4610      	mov	r0, r2
 8001868:	f7ff fa64 	bl	8000d34 <__aeabi_fmul>
 800186c:	4603      	mov	r3, r0
 800186e:	461a      	mov	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            MPU9250->m[1] = (float)(mag_count[1] * MPU9250->mag_resolution * MPU9250->mag_bias_factory[1] - MPU9250->mag_bias[1] * bias_to_current_bits) * MPU9250->mag_scale[1];
 8001876:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fa06 	bl	8000c8c <__aeabi_i2f>
 8001880:	4602      	mov	r2, r0
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	4619      	mov	r1, r3
 8001888:	4610      	mov	r0, r2
 800188a:	f7ff fa53 	bl	8000d34 <__aeabi_fmul>
 800188e:	4603      	mov	r3, r0
 8001890:	461a      	mov	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001896:	4619      	mov	r1, r3
 8001898:	4610      	mov	r0, r2
 800189a:	f7ff fa4b 	bl	8000d34 <__aeabi_fmul>
 800189e:	4603      	mov	r3, r0
 80018a0:	461c      	mov	r4, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a6:	6979      	ldr	r1, [r7, #20]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fa43 	bl	8000d34 <__aeabi_fmul>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4619      	mov	r1, r3
 80018b2:	4620      	mov	r0, r4
 80018b4:	f7ff f934 	bl	8000b20 <__aeabi_fsub>
 80018b8:	4603      	mov	r3, r0
 80018ba:	461a      	mov	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	4619      	mov	r1, r3
 80018c2:	4610      	mov	r0, r2
 80018c4:	f7ff fa36 	bl	8000d34 <__aeabi_fmul>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461a      	mov	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            MPU9250->m[2] = (float)(mag_count[2] * MPU9250->mag_resolution * MPU9250->mag_bias_factory[2] - MPU9250->mag_bias[2] * bias_to_current_bits) * MPU9250->mag_scale[2];
 80018d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff f9d8 	bl	8000c8c <__aeabi_i2f>
 80018dc:	4602      	mov	r2, r0
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	4619      	mov	r1, r3
 80018e4:	4610      	mov	r0, r2
 80018e6:	f7ff fa25 	bl	8000d34 <__aeabi_fmul>
 80018ea:	4603      	mov	r3, r0
 80018ec:	461a      	mov	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	4619      	mov	r1, r3
 80018f4:	4610      	mov	r0, r2
 80018f6:	f7ff fa1d 	bl	8000d34 <__aeabi_fmul>
 80018fa:	4603      	mov	r3, r0
 80018fc:	461c      	mov	r4, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001902:	6979      	ldr	r1, [r7, #20]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fa15 	bl	8000d34 <__aeabi_fmul>
 800190a:	4603      	mov	r3, r0
 800190c:	4619      	mov	r1, r3
 800190e:	4620      	mov	r0, r4
 8001910:	f7ff f906 	bl	8000b20 <__aeabi_fsub>
 8001914:	4603      	mov	r3, r0
 8001916:	461a      	mov	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191c:	4619      	mov	r1, r3
 800191e:	4610      	mov	r0, r2
 8001920:	f7ff fa08 	bl	8000d34 <__aeabi_fmul>
 8001924:	4603      	mov	r3, r0
 8001926:	461a      	mov	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
    }
 800192e:	bf00      	nop
 8001930:	371c      	adds	r7, #28
 8001932:	46bd      	mov	sp, r7
 8001934:	bd90      	pop	{r4, r7, pc}
 8001936:	bf00      	nop
 8001938:	d7fd7fd8 	.word	0xd7fd7fd8
 800193c:	3ff7fd7f 	.word	0x3ff7fd7f

08001940 <readAccelGyro>:

void readAccelGyro(int16_t* destination)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

	uint8_t raw_data[14];                                                 // x/y/z accel register data stored here
	readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 14, &raw_data[0]);             // Read the 14 raw data registers into data array
 8001948:	f107 0308 	add.w	r3, r7, #8
 800194c:	220e      	movs	r2, #14
 800194e:	213b      	movs	r1, #59	; 0x3b
 8001950:	20d0      	movs	r0, #208	; 0xd0
 8001952:	f000 fa4f 	bl	8001df4 <readBytes>
	destination[0] = ((int16_t)raw_data[0] << 8) | (int16_t)raw_data[1];  // Turn the MSB and LSB into a signed 16-bit value
 8001956:	7a3b      	ldrb	r3, [r7, #8]
 8001958:	021b      	lsls	r3, r3, #8
 800195a:	b21a      	sxth	r2, r3
 800195c:	7a7b      	ldrb	r3, [r7, #9]
 800195e:	b21b      	sxth	r3, r3
 8001960:	4313      	orrs	r3, r2
 8001962:	b21a      	sxth	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	801a      	strh	r2, [r3, #0]
	destination[1] = ((int16_t)raw_data[2] << 8) | (int16_t)raw_data[3];
 8001968:	7abb      	ldrb	r3, [r7, #10]
 800196a:	021b      	lsls	r3, r3, #8
 800196c:	b219      	sxth	r1, r3
 800196e:	7afb      	ldrb	r3, [r7, #11]
 8001970:	b21a      	sxth	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3302      	adds	r3, #2
 8001976:	430a      	orrs	r2, r1
 8001978:	b212      	sxth	r2, r2
 800197a:	801a      	strh	r2, [r3, #0]
	destination[2] = ((int16_t)raw_data[4] << 8) | (int16_t)raw_data[5];
 800197c:	7b3b      	ldrb	r3, [r7, #12]
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	b219      	sxth	r1, r3
 8001982:	7b7b      	ldrb	r3, [r7, #13]
 8001984:	b21a      	sxth	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3304      	adds	r3, #4
 800198a:	430a      	orrs	r2, r1
 800198c:	b212      	sxth	r2, r2
 800198e:	801a      	strh	r2, [r3, #0]
	destination[3] = ((int16_t)raw_data[6] << 8) | (int16_t)raw_data[7];
 8001990:	7bbb      	ldrb	r3, [r7, #14]
 8001992:	021b      	lsls	r3, r3, #8
 8001994:	b219      	sxth	r1, r3
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	b21a      	sxth	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3306      	adds	r3, #6
 800199e:	430a      	orrs	r2, r1
 80019a0:	b212      	sxth	r2, r2
 80019a2:	801a      	strh	r2, [r3, #0]
	destination[4] = ((int16_t)raw_data[8] << 8) | (int16_t)raw_data[9];
 80019a4:	7c3b      	ldrb	r3, [r7, #16]
 80019a6:	021b      	lsls	r3, r3, #8
 80019a8:	b219      	sxth	r1, r3
 80019aa:	7c7b      	ldrb	r3, [r7, #17]
 80019ac:	b21a      	sxth	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3308      	adds	r3, #8
 80019b2:	430a      	orrs	r2, r1
 80019b4:	b212      	sxth	r2, r2
 80019b6:	801a      	strh	r2, [r3, #0]
	destination[5] = ((int16_t)raw_data[10] << 8) | (int16_t)raw_data[11];
 80019b8:	7cbb      	ldrb	r3, [r7, #18]
 80019ba:	021b      	lsls	r3, r3, #8
 80019bc:	b219      	sxth	r1, r3
 80019be:	7cfb      	ldrb	r3, [r7, #19]
 80019c0:	b21a      	sxth	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	330a      	adds	r3, #10
 80019c6:	430a      	orrs	r2, r1
 80019c8:	b212      	sxth	r2, r2
 80019ca:	801a      	strh	r2, [r3, #0]
	destination[6] = ((int16_t)raw_data[12] << 8) | (int16_t)raw_data[13];
 80019cc:	7d3b      	ldrb	r3, [r7, #20]
 80019ce:	021b      	lsls	r3, r3, #8
 80019d0:	b219      	sxth	r1, r3
 80019d2:	7d7b      	ldrb	r3, [r7, #21]
 80019d4:	b21a      	sxth	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	330c      	adds	r3, #12
 80019da:	430a      	orrs	r2, r1
 80019dc:	b212      	sxth	r2, r2
 80019de:	801a      	strh	r2, [r3, #0]
}
 80019e0:	bf00      	nop
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <readMag>:


uint8_t readMag(int16_t* destination)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	const uint8_t st1 = readByte(AK8963_ADDRESS, AK8963_ST1);
 80019f0:	2102      	movs	r1, #2
 80019f2:	2018      	movs	r0, #24
 80019f4:	f000 f9d8 	bl	8001da8 <readByte>
 80019f8:	4603      	mov	r3, r0
 80019fa:	75fb      	strb	r3, [r7, #23]
	if (st1 & 0x01) {                                                    // wait for magnetometer data ready bit to be set
 80019fc:	7dfb      	ldrb	r3, [r7, #23]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d03f      	beq.n	8001a86 <readMag+0x9e>
	            uint8_t raw_data[7];                                             // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	            readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &raw_data[0]);      // Read the six raw data and ST2 registers sequentially into data array
 8001a06:	f107 030c 	add.w	r3, r7, #12
 8001a0a:	2207      	movs	r2, #7
 8001a0c:	2103      	movs	r1, #3
 8001a0e:	2018      	movs	r0, #24
 8001a10:	f000 f9f0 	bl	8001df4 <readBytes>
	            if (Mmode == 0x02 || Mmode == 0x04 || Mmode == 0x06) {  // continuous or external trigger read mode
 8001a14:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <readMag+0xa8>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d007      	beq.n	8001a2c <readMag+0x44>
 8001a1c:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <readMag+0xa8>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d003      	beq.n	8001a2c <readMag+0x44>
 8001a24:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <readMag+0xa8>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b06      	cmp	r3, #6
 8001a2a:	d106      	bne.n	8001a3a <readMag+0x52>
	                if ((st1 & 0x02) == 0)                                       // check if data is not skipped
 8001a2c:	7dfb      	ldrb	r3, [r7, #23]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <readMag+0x52>
	                    return 0;                                            // this should be after data reading to clear DRDY register
 8001a36:	2300      	movs	r3, #0
 8001a38:	e026      	b.n	8001a88 <readMag+0xa0>
	            }

	            uint8_t c = raw_data[6];                                         // End data read by reading ST2 register
 8001a3a:	7cbb      	ldrb	r3, [r7, #18]
 8001a3c:	75bb      	strb	r3, [r7, #22]
	            if (!(c & 0x08)) {                                               // Check if magnetic sensor overflow set, if not then report data
 8001a3e:	7dbb      	ldrb	r3, [r7, #22]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d11e      	bne.n	8001a86 <readMag+0x9e>
	                destination[0] = ((int16_t)raw_data[1] << 8) | raw_data[0];  // Turn the MSB and LSB into a signed 16-bit value
 8001a48:	7b7b      	ldrb	r3, [r7, #13]
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	b21a      	sxth	r2, r3
 8001a4e:	7b3b      	ldrb	r3, [r7, #12]
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	4313      	orrs	r3, r2
 8001a54:	b21a      	sxth	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	801a      	strh	r2, [r3, #0]
	                destination[1] = ((int16_t)raw_data[3] << 8) | raw_data[2];  // Data stored as little Endian
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	b219      	sxth	r1, r3
 8001a60:	7bbb      	ldrb	r3, [r7, #14]
 8001a62:	b21a      	sxth	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3302      	adds	r3, #2
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	b212      	sxth	r2, r2
 8001a6c:	801a      	strh	r2, [r3, #0]
	                destination[2] = ((int16_t)raw_data[5] << 8) | raw_data[4];
 8001a6e:	7c7b      	ldrb	r3, [r7, #17]
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	b219      	sxth	r1, r3
 8001a74:	7c3b      	ldrb	r3, [r7, #16]
 8001a76:	b21a      	sxth	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	b212      	sxth	r2, r2
 8001a80:	801a      	strh	r2, [r3, #0]
	                return 1;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <readMag+0xa0>
	            }
	        }
	        return 0;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000003 	.word	0x20000003

08001a94 <initAK8963>:
        if (n > 0) MPU9250->n_filter_iter = n;
    }


void initAK8963(MPU9250_t *MPU9250)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  // First extract the factory calibration for each magnetometer axis
  uint8_t rawData[3];  // x/y/z gyro calibration data stored here
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	210a      	movs	r1, #10
 8001aa0:	2018      	movs	r0, #24
 8001aa2:	f000 f9e3 	bl	8001e6c <writeByte>
  HAL_Delay(100);
 8001aa6:	2064      	movs	r0, #100	; 0x64
 8001aa8:	f004 f97a 	bl	8005da0 <HAL_Delay>
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8001aac:	220f      	movs	r2, #15
 8001aae:	210a      	movs	r1, #10
 8001ab0:	2018      	movs	r0, #24
 8001ab2:	f000 f9db 	bl	8001e6c <writeByte>
  HAL_Delay(100);
 8001ab6:	2064      	movs	r0, #100	; 0x64
 8001ab8:	f004 f972 	bl	8005da0 <HAL_Delay>
  readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 8001abc:	f107 030c 	add.w	r3, r7, #12
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	2110      	movs	r1, #16
 8001ac4:	2018      	movs	r0, #24
 8001ac6:	f000 f995 	bl	8001df4 <readBytes>
  MPU9250->mag_bias_factory[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 8001aca:	7b3b      	ldrb	r3, [r7, #12]
 8001acc:	3b80      	subs	r3, #128	; 0x80
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff f8dc 	bl	8000c8c <__aeabi_i2f>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff f9de 	bl	8000e9c <__aeabi_fdiv>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff f81c 	bl	8000b24 <__addsf3>
 8001aec:	4603      	mov	r3, r0
 8001aee:	461a      	mov	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	625a      	str	r2, [r3, #36]	; 0x24
  MPU9250->mag_bias_factory[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 8001af4:	7b7b      	ldrb	r3, [r7, #13]
 8001af6:	3b80      	subs	r3, #128	; 0x80
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff f8c7 	bl	8000c8c <__aeabi_i2f>
 8001afe:	4603      	mov	r3, r0
 8001b00:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff f9c9 	bl	8000e9c <__aeabi_fdiv>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff f807 	bl	8000b24 <__addsf3>
 8001b16:	4603      	mov	r3, r0
 8001b18:	461a      	mov	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	629a      	str	r2, [r3, #40]	; 0x28
  MPU9250->mag_bias_factory[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 8001b1e:	7bbb      	ldrb	r3, [r7, #14]
 8001b20:	3b80      	subs	r3, #128	; 0x80
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff f8b2 	bl	8000c8c <__aeabi_i2f>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff f9b4 	bl	8000e9c <__aeabi_fdiv>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fff2 	bl	8000b24 <__addsf3>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	62da      	str	r2, [r3, #44]	; 0x2c
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8001b48:	2200      	movs	r2, #0
 8001b4a:	210a      	movs	r1, #10
 8001b4c:	2018      	movs	r0, #24
 8001b4e:	f000 f98d 	bl	8001e6c <writeByte>
  HAL_Delay(100);
 8001b52:	2064      	movs	r0, #100	; 0x64
 8001b54:	f004 f924 	bl	8005da0 <HAL_Delay>
  // Configure the magnetometer for continuous read and highest resolution
  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
  writeByte(AK8963_ADDRESS, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <initAK8963+0xf0>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	011b      	lsls	r3, r3, #4
 8001b5e:	b25a      	sxtb	r2, r3
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <initAK8963+0xf4>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	b25b      	sxtb	r3, r3
 8001b66:	4313      	orrs	r3, r2
 8001b68:	b25b      	sxtb	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	210a      	movs	r1, #10
 8001b70:	2018      	movs	r0, #24
 8001b72:	f000 f97b 	bl	8001e6c <writeByte>
  HAL_Delay(100);
 8001b76:	2064      	movs	r0, #100	; 0x64
 8001b78:	f004 f912 	bl	8005da0 <HAL_Delay>
}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000002 	.word	0x20000002
 8001b88:	20000003 	.word	0x20000003

08001b8c <MPU9250_Init>:

void MPU9250_Init(MPU9250_t *MPU9250){
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
	// Initialize MPU9250 device
	 // wake up device
	getAres(MPU9250);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f8d7 	bl	8001d48 <getAres>
	getGres(MPU9250);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f8a0 	bl	8001ce0 <getGres>
	getMres(MPU9250);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f87f 	bl	8001ca4 <getMres>
	// reset device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8001ba6:	2280      	movs	r2, #128	; 0x80
 8001ba8:	216b      	movs	r1, #107	; 0x6b
 8001baa:	20d0      	movs	r0, #208	; 0xd0
 8001bac:	f000 f95e 	bl	8001e6c <writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8001bb0:	2064      	movs	r0, #100	; 0x64
 8001bb2:	f004 f8f5 	bl	8005da0 <HAL_Delay>

	// wake up device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	216b      	movs	r1, #107	; 0x6b
 8001bba:	20d0      	movs	r0, #208	; 0xd0
 8001bbc:	f000 f956 	bl	8001e6c <writeByte>
	HAL_Delay(100);
 8001bc0:	2064      	movs	r0, #100	; 0x64
 8001bc2:	f004 f8ed 	bl	8005da0 <HAL_Delay>

	// get stable time source
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	216b      	movs	r1, #107	; 0x6b
 8001bca:	20d0      	movs	r0, #208	; 0xd0
 8001bcc:	f000 f94e 	bl	8001e6c <writeByte>
	HAL_Delay(100);
 8001bd0:	2064      	movs	r0, #100	; 0x64
 8001bd2:	f004 f8e5 	bl	8005da0 <HAL_Delay>

	 // Configure Gyro and Accelerometer
	 // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
	 // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
	 // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	  writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	211a      	movs	r1, #26
 8001bda:	20d0      	movs	r0, #208	; 0xd0
 8001bdc:	f000 f946 	bl	8001e6c <writeByte>

	 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	  writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 8001be0:	2204      	movs	r2, #4
 8001be2:	2119      	movs	r1, #25
 8001be4:	20d0      	movs	r0, #208	; 0xd0
 8001be6:	f000 f941 	bl	8001e6c <writeByte>

	 // Set gyroscope full scale range
	 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	  uint8_t c =  readByte(MPU9250_ADDRESS, GYRO_CONFIG);
 8001bea:	211b      	movs	r1, #27
 8001bec:	20d0      	movs	r0, #208	; 0xd0
 8001bee:	f000 f8db 	bl	8001da8 <readByte>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	73fb      	strb	r3, [r7, #15]
	 // c = c & ~0xE0;                                     // Clear self-test bits [7:5]
	  c = c & ~0x03;                                     // Clear Fchoice bits [1:0]
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	f023 0303 	bic.w	r3, r3, #3
 8001bfc:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x18;                                     // Clear GYRO_FS_SEL bits [4:3]
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	f023 0318 	bic.w	r3, r3, #24
 8001c04:	73fb      	strb	r3, [r7, #15]
	  c = c | (Gscale << 3);       // Set full scale range for the gyro
 8001c06:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <MPU9250_Init+0x110>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	b25a      	sxtb	r2, r3
 8001c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	b25b      	sxtb	r3, r3
 8001c16:	73fb      	strb	r3, [r7, #15]
	  //c = c | (0x03 & 0x03);   // Set Fchoice for the gyro
	  writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c); // Set full scale range for the gyro
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	211b      	movs	r1, #27
 8001c1e:	20d0      	movs	r0, #208	; 0xd0
 8001c20:	f000 f924 	bl	8001e6c <writeByte>

	 // Set accelerometer configuration
	  c =  readByte(MPU9250_ADDRESS, ACCEL_CONFIG);
 8001c24:	211c      	movs	r1, #28
 8001c26:	20d0      	movs	r0, #208	; 0xd0
 8001c28:	f000 f8be 	bl	8001da8 <readByte>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	73fb      	strb	r3, [r7, #15]
	  //c = c & ~0xE0;                                 // Clear self-test bits [7:5]
	  c = c & ~0x18;                                 // Clear ACCEL_FS_SEL bits [4:3]
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	f023 0318 	bic.w	r3, r3, #24
 8001c36:	73fb      	strb	r3, [r7, #15]
	  c = c | (Ascale << 3);  // Set full scale range for the accelerometer
 8001c38:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <MPU9250_Init+0x114>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	b25a      	sxtb	r2, r3
 8001c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	b25b      	sxtb	r3, r3
 8001c48:	73fb      	strb	r3, [r7, #15]
	  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Set full scale range for the accelerometer
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	211c      	movs	r1, #28
 8001c50:	20d0      	movs	r0, #208	; 0xd0
 8001c52:	f000 f90b 	bl	8001e6c <writeByte>

	 // Set accelerometer sample rate configuration
	 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	  c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG2);
 8001c56:	211d      	movs	r1, #29
 8001c58:	20d0      	movs	r0, #208	; 0xd0
 8001c5a:	f000 f8a5 	bl	8001da8 <readByte>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x0F;                                     // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	f023 030f 	bic.w	r3, r3, #15
 8001c68:	73fb      	strb	r3, [r7, #15]
	  c = c | 0x03;
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	f043 0303 	orr.w	r3, r3, #3
 8001c70:	73fb      	strb	r3, [r7, #15]

//	  c = c | (~(0x01 << 3) & 0x08);    // Set accel_fchoice_b to 1
//	  c = c | (0x03 & 0x07);  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz

	  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	461a      	mov	r2, r3
 8001c76:	211d      	movs	r1, #29
 8001c78:	20d0      	movs	r0, #208	; 0xd0
 8001c7a:	f000 f8f7 	bl	8001e6c <writeByte>
	 // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	  // Configure Interrupts and Bypass Enable
	  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
	  // can join the I2C bus and all can be controlled by the Arduino as master
	   writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
 8001c7e:	2222      	movs	r2, #34	; 0x22
 8001c80:	2137      	movs	r1, #55	; 0x37
 8001c82:	20d0      	movs	r0, #208	; 0xd0
 8001c84:	f000 f8f2 	bl	8001e6c <writeByte>
	   writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01); // Enable data ready (bit 0) interrupt
 8001c88:	2201      	movs	r2, #1
 8001c8a:	2138      	movs	r1, #56	; 0x38
 8001c8c:	20d0      	movs	r0, #208	; 0xd0
 8001c8e:	f000 f8ed 	bl	8001e6c <writeByte>

}
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000001 	.word	0x20000001
 8001ca0:	20000000 	.word	0x20000000

08001ca4 <getMres>:

void getMres(MPU9250_t *MPU9250) {
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  switch (Mscale)
 8001cac:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <getMres+0x30>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d002      	beq.n	8001cba <getMres+0x16>
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d004      	beq.n	8001cc2 <getMres+0x1e>
          break;
    case MFS_16BITS:
    	MPU9250->mag_resolution = 10.*4912./32760.0; // Proper scale to return milliGauss
          break;
  }
}
 8001cb8:	e007      	b.n	8001cca <getMres+0x26>
    	MPU9250->mag_resolution = 10.*4912./8190.; // Proper scale to return milliGauss
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a06      	ldr	r2, [pc, #24]	; (8001cd8 <getMres+0x34>)
 8001cbe:	609a      	str	r2, [r3, #8]
          break;
 8001cc0:	e003      	b.n	8001cca <getMres+0x26>
    	MPU9250->mag_resolution = 10.*4912./32760.0; // Proper scale to return milliGauss
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <getMres+0x38>)
 8001cc6:	609a      	str	r2, [r3, #8]
          break;
 8001cc8:	bf00      	nop
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	20000002 	.word	0x20000002
 8001cd8:	40bfebff 	.word	0x40bfebff
 8001cdc:	3fbfebff 	.word	0x3fbfebff

08001ce0 <getGres>:


void getGres(MPU9250_t *MPU9250) {
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  switch (Gscale)
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <getGres+0x54>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	2b03      	cmp	r3, #3
 8001cf0:	d81a      	bhi.n	8001d28 <getGres+0x48>
 8001cf2:	a201      	add	r2, pc, #4	; (adr r2, 8001cf8 <getGres+0x18>)
 8001cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf8:	08001d09 	.word	0x08001d09
 8001cfc:	08001d11 	.word	0x08001d11
 8001d00:	08001d19 	.word	0x08001d19
 8001d04:	08001d21 	.word	0x08001d21
  {
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          MPU9250->gyro_resolution = 250.0/32768.0;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a0b      	ldr	r2, [pc, #44]	; (8001d38 <getGres+0x58>)
 8001d0c:	605a      	str	r2, [r3, #4]
          break;
 8001d0e:	e00b      	b.n	8001d28 <getGres+0x48>
    case GFS_500DPS:
    	MPU9250->gyro_resolution = 500.0/32768.0;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <getGres+0x5c>)
 8001d14:	605a      	str	r2, [r3, #4]
          break;
 8001d16:	e007      	b.n	8001d28 <getGres+0x48>
    case GFS_1000DPS:
    	MPU9250->gyro_resolution = 1000.0/32768.0;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a09      	ldr	r2, [pc, #36]	; (8001d40 <getGres+0x60>)
 8001d1c:	605a      	str	r2, [r3, #4]
          break;
 8001d1e:	e003      	b.n	8001d28 <getGres+0x48>
    case GFS_2000DPS:
    	MPU9250->gyro_resolution = 2000.0/32768.0;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a08      	ldr	r2, [pc, #32]	; (8001d44 <getGres+0x64>)
 8001d24:	605a      	str	r2, [r3, #4]
          break;
 8001d26:	bf00      	nop
  }
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	20000001 	.word	0x20000001
 8001d38:	3bfa0000 	.word	0x3bfa0000
 8001d3c:	3c7a0000 	.word	0x3c7a0000
 8001d40:	3cfa0000 	.word	0x3cfa0000
 8001d44:	3d7a0000 	.word	0x3d7a0000

08001d48 <getAres>:


void getAres(MPU9250_t *MPU9250) {
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  switch (Ascale)
 8001d50:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <getAres+0x5c>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	d81e      	bhi.n	8001d98 <getAres+0x50>
 8001d5a:	a201      	add	r2, pc, #4	; (adr r2, 8001d60 <getAres+0x18>)
 8001d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d60:	08001d71 	.word	0x08001d71
 8001d64:	08001d7b 	.word	0x08001d7b
 8001d68:	08001d85 	.word	0x08001d85
 8001d6c:	08001d8f 	.word	0x08001d8f
  {
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
    	MPU9250->acc_resolution = 2.0/32768.0;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001d76:	601a      	str	r2, [r3, #0]
          break;
 8001d78:	e00e      	b.n	8001d98 <getAres+0x50>
    case AFS_4G:
    	MPU9250->acc_resolution = 4.0/32768.0;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001d80:	601a      	str	r2, [r3, #0]
          break;
 8001d82:	e009      	b.n	8001d98 <getAres+0x50>
    case AFS_8G:
    	MPU9250->acc_resolution = 8.0/32768.0;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001d8a:	601a      	str	r2, [r3, #0]
          break;
 8001d8c:	e004      	b.n	8001d98 <getAres+0x50>
    case AFS_16G:
    	MPU9250->acc_resolution = 16.0/32768.0;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001d94:	601a      	str	r2, [r3, #0]
          break;
 8001d96:	bf00      	nop
  }
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	20000000 	.word	0x20000000

08001da8 <readByte>:


char readByte(uint8_t I2C_ADDRESS, uint8_t RegAddr){
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	4603      	mov	r3, r0
 8001db0:	460a      	mov	r2, r1
 8001db2:	71fb      	strb	r3, [r7, #7]
 8001db4:	4613      	mov	r3, r2
 8001db6:	71bb      	strb	r3, [r7, #6]
	char data[1];
	char data_write[1];
	data_write[0] = RegAddr;
 8001db8:	79bb      	ldrb	r3, [r7, #6]
 8001dba:	723b      	strb	r3, [r7, #8]

	//Откуда будем считывать данные

	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data_write, 1, 100);
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	b299      	uxth	r1, r3
 8001dc0:	f107 0208 	add.w	r2, r7, #8
 8001dc4:	2364      	movs	r3, #100	; 0x64
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	2301      	movs	r3, #1
 8001dca:	4809      	ldr	r0, [pc, #36]	; (8001df0 <readByte+0x48>)
 8001dcc:	f004 fc2c 	bl	8006628 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)I2C_ADDRESS, data, (uint16_t)1, (uint16_t)100);
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	b299      	uxth	r1, r3
 8001dd4:	f107 020c 	add.w	r2, r7, #12
 8001dd8:	2364      	movs	r3, #100	; 0x64
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	2301      	movs	r3, #1
 8001dde:	4804      	ldr	r0, [pc, #16]	; (8001df0 <readByte+0x48>)
 8001de0:	f004 fd20 	bl	8006824 <HAL_I2C_Master_Receive>

	return data[0];
 8001de4:	7b3b      	ldrb	r3, [r7, #12]

}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000314 	.word	0x20000314

08001df4 <readBytes>:
void readBytes(uint8_t I2C_ADDRESS, uint8_t RegAddr, uint8_t count, uint8_t * dest)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	; 0x28
 8001df8:	af02      	add	r7, sp, #8
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	71fb      	strb	r3, [r7, #7]
 8001e00:	460b      	mov	r3, r1
 8001e02:	71bb      	strb	r3, [r7, #6]
 8001e04:	4613      	mov	r3, r2
 8001e06:	717b      	strb	r3, [r7, #5]
	char data[14];
	char data_write[1];
	data_write[0] = RegAddr;
 8001e08:	79bb      	ldrb	r3, [r7, #6]
 8001e0a:	723b      	strb	r3, [r7, #8]
	//Откуда будем считывать данные

	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data_write, 1, 100);
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	b299      	uxth	r1, r3
 8001e10:	f107 0208 	add.w	r2, r7, #8
 8001e14:	2364      	movs	r3, #100	; 0x64
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	2301      	movs	r3, #1
 8001e1a:	4813      	ldr	r0, [pc, #76]	; (8001e68 <readBytes+0x74>)
 8001e1c:	f004 fc04 	bl	8006628 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(I2C_ADDRESS), data, count, (uint16_t)100);
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	b299      	uxth	r1, r3
 8001e24:	797b      	ldrb	r3, [r7, #5]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	f107 020c 	add.w	r2, r7, #12
 8001e2c:	2064      	movs	r0, #100	; 0x64
 8001e2e:	9000      	str	r0, [sp, #0]
 8001e30:	480d      	ldr	r0, [pc, #52]	; (8001e68 <readBytes+0x74>)
 8001e32:	f004 fcf7 	bl	8006824 <HAL_I2C_Master_Receive>
	for(int ii = 0; ii < count; ii++) {
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	e00b      	b.n	8001e54 <readBytes+0x60>
			dest[ii] = data[ii];
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	4413      	add	r3, r2
 8001e42:	f107 010c 	add.w	r1, r7, #12
 8001e46:	69fa      	ldr	r2, [r7, #28]
 8001e48:	440a      	add	r2, r1
 8001e4a:	7812      	ldrb	r2, [r2, #0]
 8001e4c:	701a      	strb	r2, [r3, #0]
	for(int ii = 0; ii < count; ii++) {
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3301      	adds	r3, #1
 8001e52:	61fb      	str	r3, [r7, #28]
 8001e54:	797b      	ldrb	r3, [r7, #5]
 8001e56:	69fa      	ldr	r2, [r7, #28]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	dbef      	blt.n	8001e3c <readBytes+0x48>
		}

}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	3720      	adds	r7, #32
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000314 	.word	0x20000314

08001e6c <writeByte>:

void writeByte(uint8_t I2C_ADDRESS, uint8_t RegAddr, uint8_t data){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af02      	add	r7, sp, #8
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
 8001e76:	460b      	mov	r3, r1
 8001e78:	71bb      	strb	r3, [r7, #6]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	717b      	strb	r3, [r7, #5]
	char data_write[2];
	data_write[0] = RegAddr;
 8001e7e:	79bb      	ldrb	r3, [r7, #6]
 8001e80:	733b      	strb	r3, [r7, #12]
	data_write[1] = data;
 8001e82:	797b      	ldrb	r3, [r7, #5]
 8001e84:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data_write, 2, 100);
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	b299      	uxth	r1, r3
 8001e8a:	f107 020c 	add.w	r2, r7, #12
 8001e8e:	2364      	movs	r3, #100	; 0x64
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	2302      	movs	r3, #2
 8001e94:	4803      	ldr	r0, [pc, #12]	; (8001ea4 <writeByte+0x38>)
 8001e96:	f004 fbc7 	bl	8006628 <HAL_I2C_Master_Transmit>
}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000314 	.word	0x20000314

08001ea8 <MPU9250SetDefault>:

void MPU9250SetDefault(MPU9250_t *MPU9250){
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	MPU9250 -> acc_resolution = 0.;                // scale resolutions per LSB for the sensors
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
	MPU9250 -> gyro_resolution = 0.;               // scale resolutions per LSB for the sensors
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	605a      	str	r2, [r3, #4]
	MPU9250 -> mag_resolution = 0.;                // scale resolutions per LSB for the sensors
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]

		// Calibration Parameters
	MPU9250 -> acc_bias[0] = 0.;   // acc calibration value in ACCEL_FS_SEL: 2g
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	60da      	str	r2, [r3, #12]
	MPU9250 -> acc_bias[1] = 0.;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
	MPU9250 -> acc_bias[2] = 0.;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	615a      	str	r2, [r3, #20]
	MPU9250 -> gyro_bias[0] = 0.;  // gyro calibration value in GYRO_FS_SEL: 250dps
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	619a      	str	r2, [r3, #24]
	MPU9250 -> gyro_bias[1] = 0.;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	61da      	str	r2, [r3, #28]
	MPU9250 -> gyro_bias[2] = 0.;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	621a      	str	r2, [r3, #32]
	MPU9250 -> mag_bias_factory[0] = 0.;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	625a      	str	r2, [r3, #36]	; 0x24
	MPU9250 -> mag_bias_factory[1] = 0.;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	629a      	str	r2, [r3, #40]	; 0x28
	MPU9250 -> mag_bias_factory[2] = 0.;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	62da      	str	r2, [r3, #44]	; 0x2c

	MPU9250 -> mag_bias[0] = 0.;  // mag calibration value in MAG_OUTPUT_BITS: 16BITS
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	631a      	str	r2, [r3, #48]	; 0x30
	MPU9250 -> mag_bias[1] = 0.;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	635a      	str	r2, [r3, #52]	; 0x34
	MPU9250 -> mag_bias[2] = 0.;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	639a      	str	r2, [r3, #56]	; 0x38
	MPU9250 -> mag_scale[0] = 1.;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f2e:	63da      	str	r2, [r3, #60]	; 0x3c
	MPU9250 -> mag_scale[1] = 1.;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f36:	641a      	str	r2, [r3, #64]	; 0x40
	MPU9250 -> mag_scale[2] = 1.;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f3e:	645a      	str	r2, [r3, #68]	; 0x44
	MPU9250 -> magnetic_declination  = 10.91;  // Moscow, 24th June
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a44      	ldr	r2, [pc, #272]	; (8002054 <MPU9250SetDefault+0x1ac>)
 8001f44:	649a      	str	r2, [r3, #72]	; 0x48

		    // Temperature
	MPU9250 -> temperature_count = 0.;  // temperature raw count output
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	MPU9250 -> temperature = 0.;        // Stores the real internal chip temperature in degrees Celsius
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	651a      	str	r2, [r3, #80]	; 0x50

		// Self Test
	MPU9250 -> self_test_result[0] = 0.;  // holds results of gyro and accelerometer self test
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	655a      	str	r2, [r3, #84]	; 0x54
	MPU9250 -> self_test_result[1] = 0.;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	659a      	str	r2, [r3, #88]	; 0x58
	MPU9250 -> self_test_result[2] = 0.;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	65da      	str	r2, [r3, #92]	; 0x5c
	MPU9250 -> self_test_result[3] = 0.;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	661a      	str	r2, [r3, #96]	; 0x60
	MPU9250 -> self_test_result[4] = 0.;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	665a      	str	r2, [r3, #100]	; 0x64
	MPU9250 -> self_test_result[5] = 0.;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	669a      	str	r2, [r3, #104]	; 0x68

		// IMU Data
	MPU9250 -> a[0] = 0.;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	66da      	str	r2, [r3, #108]	; 0x6c
	MPU9250 -> a[1] = 0.;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	671a      	str	r2, [r3, #112]	; 0x70
	MPU9250 -> a[2] = 0.;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	675a      	str	r2, [r3, #116]	; 0x74
	MPU9250 -> g[0] = 0.;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	679a      	str	r2, [r3, #120]	; 0x78
	MPU9250 -> g[1] = 0.;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	67da      	str	r2, [r3, #124]	; 0x7c
	MPU9250 -> g[2] = 0.;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MPU9250 -> m[0] = 0.;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	MPU9250 -> m[1] = 0.;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	MPU9250 -> m[2] = 0.;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	MPU9250 -> q[0] = 1.;  // vector to hold quaternion
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001fdc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	MPU9250 -> q[1] = 0.;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	MPU9250 -> q[2] = 0.;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	MPU9250 -> q[3] = 0.;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	MPU9250 -> rpy[0] = 0.;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	MPU9250 -> rpy[1] = 0.;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	MPU9250 -> rpy[2] = 0.;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	MPU9250 -> lin_acc[0] = 0.;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	MPU9250 -> lin_acc[1] = 0.;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	MPU9250 -> lin_acc[2] = 0.;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	MPU9250 -> has_connected = 0;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	MPU9250 -> n_filter_iter = 1;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr
 8002054:	412e8f5c 	.word	0x412e8f5c

08002058 <update_madgwick>:

void update_madgwick(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz, float* q){
 8002058:	b5b0      	push	{r4, r5, r7, lr}
 800205a:	b08a      	sub	sp, #40	; 0x28
 800205c:	af06      	add	r7, sp, #24
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	603b      	str	r3, [r7, #0]
	newTime = HAL_GetTick();
 8002066:	f003 fe91 	bl	8005d8c <HAL_GetTick>
 800206a:	4603      	mov	r3, r0
 800206c:	4a1e      	ldr	r2, [pc, #120]	; (80020e8 <update_madgwick+0x90>)
 800206e:	6013      	str	r3, [r2, #0]
	deltaT = newTime - oldTime;
 8002070:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <update_madgwick+0x90>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <update_madgwick+0x94>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe f9aa 	bl	80003d4 <__aeabi_ui2d>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	491a      	ldr	r1, [pc, #104]	; (80020f0 <update_madgwick+0x98>)
 8002086:	e9c1 2300 	strd	r2, r3, [r1]
	oldTime = newTime;
 800208a:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <update_madgwick+0x90>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a17      	ldr	r2, [pc, #92]	; (80020ec <update_madgwick+0x94>)
 8002090:	6013      	str	r3, [r2, #0]
	deltaT = fabs(deltaT * 0.001);
 8002092:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <update_madgwick+0x98>)
 8002094:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002098:	a311      	add	r3, pc, #68	; (adr r3, 80020e0 <update_madgwick+0x88>)
 800209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209e:	f7fe fa13 	bl	80004c8 <__aeabi_dmul>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4614      	mov	r4, r2
 80020a8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80020ac:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <update_madgwick+0x98>)
 80020ae:	e9c3 4500 	strd	r4, r5, [r3]

	madgwick(ax, ay, az, gx, gy, gz, mx, my, mz, q);
 80020b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b4:	9305      	str	r3, [sp, #20]
 80020b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b8:	9304      	str	r3, [sp, #16]
 80020ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020bc:	9303      	str	r3, [sp, #12]
 80020be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c0:	9302      	str	r3, [sp, #8]
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	9301      	str	r3, [sp, #4]
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	68b9      	ldr	r1, [r7, #8]
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 f80f 	bl	80020f4 <madgwick>
}
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bdb0      	pop	{r4, r5, r7, pc}
 80020de:	bf00      	nop
 80020e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80020e4:	3f50624d 	.word	0x3f50624d
 80020e8:	20000100 	.word	0x20000100
 80020ec:	20000104 	.word	0x20000104
 80020f0:	200000f8 	.word	0x200000f8

080020f4 <madgwick>:

void madgwick(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz, float* q){
 80020f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020f8:	b0e5      	sub	sp, #404	; 0x194
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	f507 74c8 	add.w	r4, r7, #400	; 0x190
 8002100:	f5a4 74a6 	sub.w	r4, r4, #332	; 0x14c
 8002104:	6020      	str	r0, [r4, #0]
 8002106:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 800210a:	f5a0 70a8 	sub.w	r0, r0, #336	; 0x150
 800210e:	6001      	str	r1, [r0, #0]
 8002110:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8002114:	f5a1 71aa 	sub.w	r1, r1, #340	; 0x154
 8002118:	600a      	str	r2, [r1, #0]
 800211a:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800211e:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002122:	6013      	str	r3, [r2, #0]
	double q0 = q[0], q1 = q[1], q2 = q[2], q3 = q[3];  // short name local variable for readability
 8002124:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe f974 	bl	8000418 <__aeabi_f2d>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
 8002138:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800213c:	3304      	adds	r3, #4
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe f969 	bl	8000418 <__aeabi_f2d>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
 800214e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002152:	3308      	adds	r3, #8
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe f95e 	bl	8000418 <__aeabi_f2d>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
 8002164:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002168:	330c      	adds	r3, #12
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe f953 	bl	8000418 <__aeabi_f2d>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
	        double qDot1, qDot2, qDot3, qDot4;
	        double hx, hy;
	        double _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	        // Rate of change of quaternion from gyroscope
	        qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800217a:	f8d7 5180 	ldr.w	r5, [r7, #384]	; 0x180
 800217e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002182:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 8002186:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800218a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800218e:	6818      	ldr	r0, [r3, #0]
 8002190:	f7fe f942 	bl	8000418 <__aeabi_f2d>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4628      	mov	r0, r5
 800219a:	4631      	mov	r1, r6
 800219c:	f7fe f994 	bl	80004c8 <__aeabi_dmul>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4614      	mov	r4, r2
 80021a6:	461d      	mov	r5, r3
 80021a8:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 80021ac:	f7fe f934 	bl	8000418 <__aeabi_f2d>
 80021b0:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80021b4:	f7fe f988 	bl	80004c8 <__aeabi_dmul>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4620      	mov	r0, r4
 80021be:	4629      	mov	r1, r5
 80021c0:	f7fd ffca 	bl	8000158 <__aeabi_dsub>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4614      	mov	r4, r2
 80021ca:	461d      	mov	r5, r3
 80021cc:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 80021d0:	f7fe f922 	bl	8000418 <__aeabi_f2d>
 80021d4:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80021d8:	f7fe f976 	bl	80004c8 <__aeabi_dmul>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4620      	mov	r0, r4
 80021e2:	4629      	mov	r1, r5
 80021e4:	f7fd ffb8 	bl	8000158 <__aeabi_dsub>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4610      	mov	r0, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	4bcc      	ldr	r3, [pc, #816]	; (8002528 <madgwick+0x434>)
 80021f6:	f7fe f967 	bl	80004c8 <__aeabi_dmul>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
	        qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002202:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002206:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800220a:	6818      	ldr	r0, [r3, #0]
 800220c:	f7fe f904 	bl	8000418 <__aeabi_f2d>
 8002210:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002214:	f7fe f958 	bl	80004c8 <__aeabi_dmul>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4614      	mov	r4, r2
 800221e:	461d      	mov	r5, r3
 8002220:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8002224:	f7fe f8f8 	bl	8000418 <__aeabi_f2d>
 8002228:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800222c:	f7fe f94c 	bl	80004c8 <__aeabi_dmul>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4620      	mov	r0, r4
 8002236:	4629      	mov	r1, r5
 8002238:	f7fd ff90 	bl	800015c <__adddf3>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4614      	mov	r4, r2
 8002242:	461d      	mov	r5, r3
 8002244:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8002248:	f7fe f8e6 	bl	8000418 <__aeabi_f2d>
 800224c:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8002250:	f7fe f93a 	bl	80004c8 <__aeabi_dmul>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4620      	mov	r0, r4
 800225a:	4629      	mov	r1, r5
 800225c:	f7fd ff7c 	bl	8000158 <__aeabi_dsub>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4610      	mov	r0, r2
 8002266:	4619      	mov	r1, r3
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	4bae      	ldr	r3, [pc, #696]	; (8002528 <madgwick+0x434>)
 800226e:	f7fe f92b 	bl	80004c8 <__aeabi_dmul>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
	        qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800227a:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 800227e:	f7fe f8cb 	bl	8000418 <__aeabi_f2d>
 8002282:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002286:	f7fe f91f 	bl	80004c8 <__aeabi_dmul>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4614      	mov	r4, r2
 8002290:	461d      	mov	r5, r3
 8002292:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8002296:	f7fe f8bf 	bl	8000418 <__aeabi_f2d>
 800229a:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800229e:	f7fe f913 	bl	80004c8 <__aeabi_dmul>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4620      	mov	r0, r4
 80022a8:	4629      	mov	r1, r5
 80022aa:	f7fd ff55 	bl	8000158 <__aeabi_dsub>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	4614      	mov	r4, r2
 80022b4:	461d      	mov	r5, r3
 80022b6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80022ba:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	f7fe f8aa 	bl	8000418 <__aeabi_f2d>
 80022c4:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80022c8:	f7fe f8fe 	bl	80004c8 <__aeabi_dmul>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4620      	mov	r0, r4
 80022d2:	4629      	mov	r1, r5
 80022d4:	f7fd ff42 	bl	800015c <__adddf3>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4610      	mov	r0, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	4b90      	ldr	r3, [pc, #576]	; (8002528 <madgwick+0x434>)
 80022e6:	f7fe f8ef 	bl	80004c8 <__aeabi_dmul>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
	        qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80022f2:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 80022f6:	f7fe f88f 	bl	8000418 <__aeabi_f2d>
 80022fa:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80022fe:	f7fe f8e3 	bl	80004c8 <__aeabi_dmul>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4614      	mov	r4, r2
 8002308:	461d      	mov	r5, r3
 800230a:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 800230e:	f7fe f883 	bl	8000418 <__aeabi_f2d>
 8002312:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8002316:	f7fe f8d7 	bl	80004c8 <__aeabi_dmul>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4620      	mov	r0, r4
 8002320:	4629      	mov	r1, r5
 8002322:	f7fd ff1b 	bl	800015c <__adddf3>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4614      	mov	r4, r2
 800232c:	461d      	mov	r5, r3
 800232e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002332:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	f7fe f86e 	bl	8000418 <__aeabi_f2d>
 800233c:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8002340:	f7fe f8c2 	bl	80004c8 <__aeabi_dmul>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4620      	mov	r0, r4
 800234a:	4629      	mov	r1, r5
 800234c:	f7fd ff04 	bl	8000158 <__aeabi_dsub>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4610      	mov	r0, r2
 8002356:	4619      	mov	r1, r3
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	4b72      	ldr	r3, [pc, #456]	; (8002528 <madgwick+0x434>)
 800235e:	f7fe f8b3 	bl	80004c8 <__aeabi_dmul>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150

	        // Normalise accelerometer measurement
	        double a_norm = ax * ax + ay * ay + az * az;
 800236a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800236e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002372:	6819      	ldr	r1, [r3, #0]
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	f7fe fcdd 	bl	8000d34 <__aeabi_fmul>
 800237a:	4603      	mov	r3, r0
 800237c:	461c      	mov	r4, r3
 800237e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002382:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002386:	6819      	ldr	r1, [r3, #0]
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	f7fe fcd3 	bl	8000d34 <__aeabi_fmul>
 800238e:	4603      	mov	r3, r0
 8002390:	4619      	mov	r1, r3
 8002392:	4620      	mov	r0, r4
 8002394:	f7fe fbc6 	bl	8000b24 <__addsf3>
 8002398:	4603      	mov	r3, r0
 800239a:	461c      	mov	r4, r3
 800239c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80023a0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80023a4:	6819      	ldr	r1, [r3, #0]
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	f7fe fcc4 	bl	8000d34 <__aeabi_fmul>
 80023ac:	4603      	mov	r3, r0
 80023ae:	4619      	mov	r1, r3
 80023b0:	4620      	mov	r0, r4
 80023b2:	f7fe fbb7 	bl	8000b24 <__addsf3>
 80023b6:	4603      	mov	r3, r0
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe f82d 	bl	8000418 <__aeabi_f2d>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	        if (a_norm == 0.) return;  // handle NaN
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80023d2:	f7fe fae1 	bl	8000998 <__aeabi_dcmpeq>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f041 842a 	bne.w	8003c32 <madgwick+0x1b3e>
	        recipNorm = 1.0 / sqrt(a_norm);
 80023de:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80023e2:	f006 fa57 	bl	8008894 <sqrt>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	f04f 0000 	mov.w	r0, #0
 80023ee:	494f      	ldr	r1, [pc, #316]	; (800252c <madgwick+0x438>)
 80023f0:	f7fe f994 	bl	800071c <__aeabi_ddiv>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	        ax *= recipNorm;
 80023fc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002400:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	f7fe f807 	bl	8000418 <__aeabi_f2d>
 800240a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800240e:	f7fe f85b 	bl	80004c8 <__aeabi_dmul>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	4610      	mov	r0, r2
 8002418:	4619      	mov	r1, r3
 800241a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800241e:	f5a3 74a6 	sub.w	r4, r3, #332	; 0x14c
 8002422:	f7fe fb29 	bl	8000a78 <__aeabi_d2f>
 8002426:	4603      	mov	r3, r0
 8002428:	6023      	str	r3, [r4, #0]
	        ay *= recipNorm;
 800242a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800242e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	f7fd fff0 	bl	8000418 <__aeabi_f2d>
 8002438:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800243c:	f7fe f844 	bl	80004c8 <__aeabi_dmul>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4610      	mov	r0, r2
 8002446:	4619      	mov	r1, r3
 8002448:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800244c:	f5a3 74a8 	sub.w	r4, r3, #336	; 0x150
 8002450:	f7fe fb12 	bl	8000a78 <__aeabi_d2f>
 8002454:	4603      	mov	r3, r0
 8002456:	6023      	str	r3, [r4, #0]
	        az *= recipNorm;
 8002458:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800245c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	f7fd ffd9 	bl	8000418 <__aeabi_f2d>
 8002466:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800246a:	f7fe f82d 	bl	80004c8 <__aeabi_dmul>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4610      	mov	r0, r2
 8002474:	4619      	mov	r1, r3
 8002476:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800247a:	f5a3 74aa 	sub.w	r4, r3, #340	; 0x154
 800247e:	f7fe fafb 	bl	8000a78 <__aeabi_d2f>
 8002482:	4603      	mov	r3, r0
 8002484:	6023      	str	r3, [r4, #0]


	        // Normalise magnetometer measurement
	        double m_norm = mx * mx + my * my + mz * mz;
 8002486:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800248a:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 800248e:	f7fe fc51 	bl	8000d34 <__aeabi_fmul>
 8002492:	4603      	mov	r3, r0
 8002494:	461c      	mov	r4, r3
 8002496:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 800249a:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 800249e:	f7fe fc49 	bl	8000d34 <__aeabi_fmul>
 80024a2:	4603      	mov	r3, r0
 80024a4:	4619      	mov	r1, r3
 80024a6:	4620      	mov	r0, r4
 80024a8:	f7fe fb3c 	bl	8000b24 <__addsf3>
 80024ac:	4603      	mov	r3, r0
 80024ae:	461c      	mov	r4, r3
 80024b0:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 80024b4:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80024b8:	f7fe fc3c 	bl	8000d34 <__aeabi_fmul>
 80024bc:	4603      	mov	r3, r0
 80024be:	4619      	mov	r1, r3
 80024c0:	4620      	mov	r0, r4
 80024c2:	f7fe fb2f 	bl	8000b24 <__addsf3>
 80024c6:	4603      	mov	r3, r0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fd ffa5 	bl	8000418 <__aeabi_f2d>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	        if (m_norm == 0.) return;  // handle NaN
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 80024e2:	f7fe fa59 	bl	8000998 <__aeabi_dcmpeq>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f041 83a4 	bne.w	8003c36 <madgwick+0x1b42>
	        recipNorm = 1.0 / sqrt(m_norm);
 80024ee:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 80024f2:	f006 f9cf 	bl	8008894 <sqrt>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	f04f 0000 	mov.w	r0, #0
 80024fe:	490b      	ldr	r1, [pc, #44]	; (800252c <madgwick+0x438>)
 8002500:	f7fe f90c 	bl	800071c <__aeabi_ddiv>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	        mx *= recipNorm;
 800250c:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8002510:	f7fd ff82 	bl	8000418 <__aeabi_f2d>
 8002514:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8002518:	f7fd ffd6 	bl	80004c8 <__aeabi_dmul>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4610      	mov	r0, r2
 8002522:	4619      	mov	r1, r3
 8002524:	e004      	b.n	8002530 <madgwick+0x43c>
 8002526:	bf00      	nop
 8002528:	3fe00000 	.word	0x3fe00000
 800252c:	3ff00000 	.word	0x3ff00000
 8002530:	f7fe faa2 	bl	8000a78 <__aeabi_d2f>
 8002534:	4603      	mov	r3, r0
 8002536:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	        my *= recipNorm;
 800253a:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 800253e:	f7fd ff6b 	bl	8000418 <__aeabi_f2d>
 8002542:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8002546:	f7fd ffbf 	bl	80004c8 <__aeabi_dmul>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4610      	mov	r0, r2
 8002550:	4619      	mov	r1, r3
 8002552:	f7fe fa91 	bl	8000a78 <__aeabi_d2f>
 8002556:	4603      	mov	r3, r0
 8002558:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	        mz *= recipNorm;
 800255c:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8002560:	f7fd ff5a 	bl	8000418 <__aeabi_f2d>
 8002564:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8002568:	f7fd ffae 	bl	80004c8 <__aeabi_dmul>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	f7fe fa80 	bl	8000a78 <__aeabi_d2f>
 8002578:	4603      	mov	r3, r0
 800257a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8

	        // Auxiliary variables to avoid repeated arithmetic
	        _2q0mx = 2.0f * q0 * mx;
 800257e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	f7fd fde9 	bl	800015c <__adddf3>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4614      	mov	r4, r2
 8002590:	461d      	mov	r5, r3
 8002592:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8002596:	f7fd ff3f 	bl	8000418 <__aeabi_f2d>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4620      	mov	r0, r4
 80025a0:	4629      	mov	r1, r5
 80025a2:	f7fd ff91 	bl	80004c8 <__aeabi_dmul>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	        _2q0my = 2.0f * q0 * my;
 80025ae:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	f7fd fdd1 	bl	800015c <__adddf3>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4614      	mov	r4, r2
 80025c0:	461d      	mov	r5, r3
 80025c2:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 80025c6:	f7fd ff27 	bl	8000418 <__aeabi_f2d>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4620      	mov	r0, r4
 80025d0:	4629      	mov	r1, r5
 80025d2:	f7fd ff79 	bl	80004c8 <__aeabi_dmul>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	        _2q0mz = 2.0f * q0 * mz;
 80025de:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	f7fd fdb9 	bl	800015c <__adddf3>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4614      	mov	r4, r2
 80025f0:	461d      	mov	r5, r3
 80025f2:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80025f6:	f7fd ff0f 	bl	8000418 <__aeabi_f2d>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4620      	mov	r0, r4
 8002600:	4629      	mov	r1, r5
 8002602:	f7fd ff61 	bl	80004c8 <__aeabi_dmul>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	        _2q1mx = 2.0f * q1 * mx;
 800260e:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	f7fd fda1 	bl	800015c <__adddf3>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4614      	mov	r4, r2
 8002620:	461d      	mov	r5, r3
 8002622:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8002626:	f7fd fef7 	bl	8000418 <__aeabi_f2d>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4620      	mov	r0, r4
 8002630:	4629      	mov	r1, r5
 8002632:	f7fd ff49 	bl	80004c8 <__aeabi_dmul>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	        _2q0 = 2.0f * q0;
 800263e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	f7fd fd89 	bl	800015c <__adddf3>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	        _2q1 = 2.0f * q1;
 8002652:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	f7fd fd7f 	bl	800015c <__adddf3>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
	        _2q2 = 2.0f * q2;
 8002666:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	f7fd fd75 	bl	800015c <__adddf3>
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
	        _2q3 = 2.0f * q3;
 800267a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	f7fd fd6b 	bl	800015c <__adddf3>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
	        _2q0q2 = 2.0f * q0 * q2;
 800268e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	f7fd fd61 	bl	800015c <__adddf3>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80026a2:	f7fd ff11 	bl	80004c8 <__aeabi_dmul>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	        _2q2q3 = 2.0f * q2 * q3;
 80026ae:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	f7fd fd51 	bl	800015c <__adddf3>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80026c2:	f7fd ff01 	bl	80004c8 <__aeabi_dmul>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
	        q0q0 = q0 * q0;
 80026ce:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80026d2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80026d6:	f7fd fef7 	bl	80004c8 <__aeabi_dmul>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
	        q0q1 = q0 * q1;
 80026e2:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 80026e6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80026ea:	f7fd feed 	bl	80004c8 <__aeabi_dmul>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	        q0q2 = q0 * q2;
 80026f6:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80026fa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80026fe:	f7fd fee3 	bl	80004c8 <__aeabi_dmul>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	        q0q3 = q0 * q3;
 800270a:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800270e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002712:	f7fd fed9 	bl	80004c8 <__aeabi_dmul>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
	        q1q1 = q1 * q1;
 800271e:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8002722:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8002726:	f7fd fecf 	bl	80004c8 <__aeabi_dmul>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	        q1q2 = q1 * q2;
 8002732:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8002736:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 800273a:	f7fd fec5 	bl	80004c8 <__aeabi_dmul>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	        q1q3 = q1 * q3;
 8002746:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800274a:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 800274e:	f7fd febb 	bl	80004c8 <__aeabi_dmul>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	        q2q2 = q2 * q2;
 800275a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800275e:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8002762:	f7fd feb1 	bl	80004c8 <__aeabi_dmul>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	        q2q3 = q2 * q3;
 800276e:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8002772:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8002776:	f7fd fea7 	bl	80004c8 <__aeabi_dmul>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	        q3q3 = q3 * q3;
 8002782:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8002786:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800278a:	f7fd fe9d 	bl	80004c8 <__aeabi_dmul>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98

	        // Reference direction of Earth's magnetic field
	        hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8002796:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 800279a:	f7fd fe3d 	bl	8000418 <__aeabi_f2d>
 800279e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80027a2:	f7fd fe91 	bl	80004c8 <__aeabi_dmul>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4614      	mov	r4, r2
 80027ac:	461d      	mov	r5, r3
 80027ae:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80027b2:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80027b6:	f7fd fe87 	bl	80004c8 <__aeabi_dmul>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4620      	mov	r0, r4
 80027c0:	4629      	mov	r1, r5
 80027c2:	f7fd fcc9 	bl	8000158 <__aeabi_dsub>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4614      	mov	r4, r2
 80027cc:	461d      	mov	r5, r3
 80027ce:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80027d2:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80027d6:	f7fd fe77 	bl	80004c8 <__aeabi_dmul>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4620      	mov	r0, r4
 80027e0:	4629      	mov	r1, r5
 80027e2:	f7fd fcbb 	bl	800015c <__adddf3>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4614      	mov	r4, r2
 80027ec:	461d      	mov	r5, r3
 80027ee:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 80027f2:	f7fd fe11 	bl	8000418 <__aeabi_f2d>
 80027f6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80027fa:	f7fd fe65 	bl	80004c8 <__aeabi_dmul>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4620      	mov	r0, r4
 8002804:	4629      	mov	r1, r5
 8002806:	f7fd fca9 	bl	800015c <__adddf3>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4614      	mov	r4, r2
 8002810:	461d      	mov	r5, r3
 8002812:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 8002816:	f7fd fdff 	bl	8000418 <__aeabi_f2d>
 800281a:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800281e:	f7fd fe53 	bl	80004c8 <__aeabi_dmul>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800282e:	f7fd fe4b 	bl	80004c8 <__aeabi_dmul>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4620      	mov	r0, r4
 8002838:	4629      	mov	r1, r5
 800283a:	f7fd fc8f 	bl	800015c <__adddf3>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	4614      	mov	r4, r2
 8002844:	461d      	mov	r5, r3
 8002846:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 800284a:	f7fd fde5 	bl	8000418 <__aeabi_f2d>
 800284e:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8002852:	f7fd fe39 	bl	80004c8 <__aeabi_dmul>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4610      	mov	r0, r2
 800285c:	4619      	mov	r1, r3
 800285e:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8002862:	f7fd fe31 	bl	80004c8 <__aeabi_dmul>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4620      	mov	r0, r4
 800286c:	4629      	mov	r1, r5
 800286e:	f7fd fc75 	bl	800015c <__adddf3>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4614      	mov	r4, r2
 8002878:	461d      	mov	r5, r3
 800287a:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 800287e:	f7fd fdcb 	bl	8000418 <__aeabi_f2d>
 8002882:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002886:	f7fd fe1f 	bl	80004c8 <__aeabi_dmul>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4620      	mov	r0, r4
 8002890:	4629      	mov	r1, r5
 8002892:	f7fd fc61 	bl	8000158 <__aeabi_dsub>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4614      	mov	r4, r2
 800289c:	461d      	mov	r5, r3
 800289e:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 80028a2:	f7fd fdb9 	bl	8000418 <__aeabi_f2d>
 80028a6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80028aa:	f7fd fe0d 	bl	80004c8 <__aeabi_dmul>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4620      	mov	r0, r4
 80028b4:	4629      	mov	r1, r5
 80028b6:	f7fd fc4f 	bl	8000158 <__aeabi_dsub>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	        hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 80028c2:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80028c6:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 80028ca:	f7fd fdfd 	bl	80004c8 <__aeabi_dmul>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4614      	mov	r4, r2
 80028d4:	461d      	mov	r5, r3
 80028d6:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 80028da:	f7fd fd9d 	bl	8000418 <__aeabi_f2d>
 80028de:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80028e2:	f7fd fdf1 	bl	80004c8 <__aeabi_dmul>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4620      	mov	r0, r4
 80028ec:	4629      	mov	r1, r5
 80028ee:	f7fd fc35 	bl	800015c <__adddf3>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4614      	mov	r4, r2
 80028f8:	461d      	mov	r5, r3
 80028fa:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 80028fe:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8002902:	f7fd fde1 	bl	80004c8 <__aeabi_dmul>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4620      	mov	r0, r4
 800290c:	4629      	mov	r1, r5
 800290e:	f7fd fc23 	bl	8000158 <__aeabi_dsub>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	4614      	mov	r4, r2
 8002918:	461d      	mov	r5, r3
 800291a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800291e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8002922:	f7fd fdd1 	bl	80004c8 <__aeabi_dmul>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	4620      	mov	r0, r4
 800292c:	4629      	mov	r1, r5
 800292e:	f7fd fc15 	bl	800015c <__adddf3>
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4614      	mov	r4, r2
 8002938:	461d      	mov	r5, r3
 800293a:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 800293e:	f7fd fd6b 	bl	8000418 <__aeabi_f2d>
 8002942:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8002946:	f7fd fdbf 	bl	80004c8 <__aeabi_dmul>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4620      	mov	r0, r4
 8002950:	4629      	mov	r1, r5
 8002952:	f7fd fc01 	bl	8000158 <__aeabi_dsub>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4614      	mov	r4, r2
 800295c:	461d      	mov	r5, r3
 800295e:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 8002962:	f7fd fd59 	bl	8000418 <__aeabi_f2d>
 8002966:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800296a:	f7fd fdad 	bl	80004c8 <__aeabi_dmul>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	4620      	mov	r0, r4
 8002974:	4629      	mov	r1, r5
 8002976:	f7fd fbf1 	bl	800015c <__adddf3>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4614      	mov	r4, r2
 8002980:	461d      	mov	r5, r3
 8002982:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8002986:	f7fd fd47 	bl	8000418 <__aeabi_f2d>
 800298a:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 800298e:	f7fd fd9b 	bl	80004c8 <__aeabi_dmul>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4610      	mov	r0, r2
 8002998:	4619      	mov	r1, r3
 800299a:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800299e:	f7fd fd93 	bl	80004c8 <__aeabi_dmul>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4620      	mov	r0, r4
 80029a8:	4629      	mov	r1, r5
 80029aa:	f7fd fbd7 	bl	800015c <__adddf3>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	4614      	mov	r4, r2
 80029b4:	461d      	mov	r5, r3
 80029b6:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 80029ba:	f7fd fd2d 	bl	8000418 <__aeabi_f2d>
 80029be:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80029c2:	f7fd fd81 	bl	80004c8 <__aeabi_dmul>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4620      	mov	r0, r4
 80029cc:	4629      	mov	r1, r5
 80029ce:	f7fd fbc3 	bl	8000158 <__aeabi_dsub>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	        _2bx = sqrt(hx * hx + hy * hy);
 80029da:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80029de:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80029e2:	f7fd fd71 	bl	80004c8 <__aeabi_dmul>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4614      	mov	r4, r2
 80029ec:	461d      	mov	r5, r3
 80029ee:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80029f2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80029f6:	f7fd fd67 	bl	80004c8 <__aeabi_dmul>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4620      	mov	r0, r4
 8002a00:	4629      	mov	r1, r5
 8002a02:	f7fd fbab 	bl	800015c <__adddf3>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f005 ff41 	bl	8008894 <sqrt>
 8002a12:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
	        _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8002a16:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002a1a:	633b      	str	r3, [r7, #48]	; 0x30
 8002a1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002a20:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002a24:	637b      	str	r3, [r7, #52]	; 0x34
 8002a26:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8002a2a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002a2e:	f7fd fd4b 	bl	80004c8 <__aeabi_dmul>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4614      	mov	r4, r2
 8002a38:	461d      	mov	r5, r3
 8002a3a:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8002a3e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8002a42:	f7fd fd41 	bl	80004c8 <__aeabi_dmul>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	4629      	mov	r1, r5
 8002a4e:	f7fd fb85 	bl	800015c <__adddf3>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4614      	mov	r4, r2
 8002a58:	461d      	mov	r5, r3
 8002a5a:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8002a5e:	f7fd fcdb 	bl	8000418 <__aeabi_f2d>
 8002a62:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8002a66:	f7fd fd2f 	bl	80004c8 <__aeabi_dmul>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4620      	mov	r0, r4
 8002a70:	4629      	mov	r1, r5
 8002a72:	f7fd fb73 	bl	800015c <__adddf3>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4614      	mov	r4, r2
 8002a7c:	461d      	mov	r5, r3
 8002a7e:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8002a82:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8002a86:	f7fd fd1f 	bl	80004c8 <__aeabi_dmul>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4620      	mov	r0, r4
 8002a90:	4629      	mov	r1, r5
 8002a92:	f7fd fb63 	bl	800015c <__adddf3>
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4614      	mov	r4, r2
 8002a9c:	461d      	mov	r5, r3
 8002a9e:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8002aa2:	f7fd fcb9 	bl	8000418 <__aeabi_f2d>
 8002aa6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8002aaa:	f7fd fd0d 	bl	80004c8 <__aeabi_dmul>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	f7fd fb4f 	bl	8000158 <__aeabi_dsub>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4614      	mov	r4, r2
 8002ac0:	461d      	mov	r5, r3
 8002ac2:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 8002ac6:	f7fd fca7 	bl	8000418 <__aeabi_f2d>
 8002aca:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8002ace:	f7fd fcfb 	bl	80004c8 <__aeabi_dmul>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	4619      	mov	r1, r3
 8002ada:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8002ade:	f7fd fcf3 	bl	80004c8 <__aeabi_dmul>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	4629      	mov	r1, r5
 8002aea:	f7fd fb37 	bl	800015c <__adddf3>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4614      	mov	r4, r2
 8002af4:	461d      	mov	r5, r3
 8002af6:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8002afa:	f7fd fc8d 	bl	8000418 <__aeabi_f2d>
 8002afe:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002b02:	f7fd fce1 	bl	80004c8 <__aeabi_dmul>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	4629      	mov	r1, r5
 8002b0e:	f7fd fb23 	bl	8000158 <__aeabi_dsub>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4614      	mov	r4, r2
 8002b18:	461d      	mov	r5, r3
 8002b1a:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8002b1e:	f7fd fc7b 	bl	8000418 <__aeabi_f2d>
 8002b22:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8002b26:	f7fd fccf 	bl	80004c8 <__aeabi_dmul>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4620      	mov	r0, r4
 8002b30:	4629      	mov	r1, r5
 8002b32:	f7fd fb13 	bl	800015c <__adddf3>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	        _4bx = 2.0f * _2bx;
 8002b3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	f7fd fb09 	bl	800015c <__adddf3>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	        _4bz = 2.0f * _2bz;
 8002b52:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	f7fd faff 	bl	800015c <__adddf3>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

	        // Gradient decent algorithm corrective step
	        s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8002b66:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002b6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b70:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	f7fd faed 	bl	800015c <__adddf3>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4610      	mov	r0, r2
 8002b88:	4619      	mov	r1, r3
 8002b8a:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8002b8e:	f7fd fae3 	bl	8000158 <__aeabi_dsub>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4614      	mov	r4, r2
 8002b98:	461d      	mov	r5, r3
 8002b9a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002b9e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	f7fd fc38 	bl	8000418 <__aeabi_f2d>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4620      	mov	r0, r4
 8002bae:	4629      	mov	r1, r5
 8002bb0:	f7fd fad2 	bl	8000158 <__aeabi_dsub>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bbc:	f7fd fc84 	bl	80004c8 <__aeabi_dmul>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4690      	mov	r8, r2
 8002bc6:	4699      	mov	r9, r3
 8002bc8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	f7fd fac4 	bl	800015c <__adddf3>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8002be0:	f7fd fabc 	bl	800015c <__adddf3>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4614      	mov	r4, r2
 8002bea:	461d      	mov	r5, r3
 8002bec:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002bf0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002bf4:	6818      	ldr	r0, [r3, #0]
 8002bf6:	f7fd fc0f 	bl	8000418 <__aeabi_f2d>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4620      	mov	r0, r4
 8002c00:	4629      	mov	r1, r5
 8002c02:	f7fd faa9 	bl	8000158 <__aeabi_dsub>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8002c12:	f7fd fc59 	bl	80004c8 <__aeabi_dmul>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4640      	mov	r0, r8
 8002c1c:	4649      	mov	r1, r9
 8002c1e:	f7fd fa9d 	bl	800015c <__adddf3>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4692      	mov	sl, r2
 8002c28:	469b      	mov	fp, r3
 8002c2a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8002c2e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002c32:	f7fd fc49 	bl	80004c8 <__aeabi_dmul>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4690      	mov	r8, r2
 8002c3c:	4699      	mov	r9, r3
 8002c3e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002c42:	f04f 0000 	mov.w	r0, #0
 8002c46:	49d8      	ldr	r1, [pc, #864]	; (8002fa8 <madgwick+0xeb4>)
 8002c48:	f7fd fa86 	bl	8000158 <__aeabi_dsub>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4610      	mov	r0, r2
 8002c52:	4619      	mov	r1, r3
 8002c54:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8002c58:	f7fd fa7e 	bl	8000158 <__aeabi_dsub>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4610      	mov	r0, r2
 8002c62:	4619      	mov	r1, r3
 8002c64:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002c68:	f7fd fc2e 	bl	80004c8 <__aeabi_dmul>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4614      	mov	r4, r2
 8002c72:	461d      	mov	r5, r3
 8002c74:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8002c78:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002c7c:	f7fd fa6c 	bl	8000158 <__aeabi_dsub>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4610      	mov	r0, r2
 8002c86:	4619      	mov	r1, r3
 8002c88:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002c8c:	f7fd fc1c 	bl	80004c8 <__aeabi_dmul>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4620      	mov	r0, r4
 8002c96:	4629      	mov	r1, r5
 8002c98:	f7fd fa60 	bl	800015c <__adddf3>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4614      	mov	r4, r2
 8002ca2:	461d      	mov	r5, r3
 8002ca4:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8002ca8:	f7fd fbb6 	bl	8000418 <__aeabi_f2d>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	f7fd fa50 	bl	8000158 <__aeabi_dsub>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4640      	mov	r0, r8
 8002cbe:	4649      	mov	r1, r9
 8002cc0:	f7fd fc02 	bl	80004c8 <__aeabi_dmul>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4650      	mov	r0, sl
 8002cca:	4659      	mov	r1, fp
 8002ccc:	f7fd fa44 	bl	8000158 <__aeabi_dsub>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4692      	mov	sl, r2
 8002cd6:	469b      	mov	fp, r3
 8002cd8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002cdc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	623b      	str	r3, [r7, #32]
 8002ce4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002ce8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf4:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8002cf8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002cfc:	f7fd fbe4 	bl	80004c8 <__aeabi_dmul>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4614      	mov	r4, r2
 8002d06:	461d      	mov	r5, r3
 8002d08:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8002d0c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002d10:	f7fd fbda 	bl	80004c8 <__aeabi_dmul>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4620      	mov	r0, r4
 8002d1a:	4629      	mov	r1, r5
 8002d1c:	f7fd fa1e 	bl	800015c <__adddf3>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4690      	mov	r8, r2
 8002d26:	4699      	mov	r9, r3
 8002d28:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8002d2c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002d30:	f7fd fa12 	bl	8000158 <__aeabi_dsub>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4610      	mov	r0, r2
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002d40:	f7fd fbc2 	bl	80004c8 <__aeabi_dmul>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4614      	mov	r4, r2
 8002d4a:	461d      	mov	r5, r3
 8002d4c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002d50:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002d54:	f7fd fa02 	bl	800015c <__adddf3>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	4619      	mov	r1, r3
 8002d60:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002d64:	f7fd fbb0 	bl	80004c8 <__aeabi_dmul>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	4629      	mov	r1, r5
 8002d70:	f7fd f9f4 	bl	800015c <__adddf3>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4614      	mov	r4, r2
 8002d7a:	461d      	mov	r5, r3
 8002d7c:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 8002d80:	f7fd fb4a 	bl	8000418 <__aeabi_f2d>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4620      	mov	r0, r4
 8002d8a:	4629      	mov	r1, r5
 8002d8c:	f7fd f9e4 	bl	8000158 <__aeabi_dsub>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4640      	mov	r0, r8
 8002d96:	4649      	mov	r1, r9
 8002d98:	f7fd fb96 	bl	80004c8 <__aeabi_dmul>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4650      	mov	r0, sl
 8002da2:	4659      	mov	r1, fp
 8002da4:	f7fd f9da 	bl	800015c <__adddf3>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4692      	mov	sl, r2
 8002dae:	469b      	mov	fp, r3
 8002db0:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8002db4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002db8:	f7fd fb86 	bl	80004c8 <__aeabi_dmul>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4690      	mov	r8, r2
 8002dc2:	4699      	mov	r9, r3
 8002dc4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8002dc8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002dcc:	f7fd f9c6 	bl	800015c <__adddf3>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002ddc:	f7fd fb74 	bl	80004c8 <__aeabi_dmul>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4614      	mov	r4, r2
 8002de6:	461d      	mov	r5, r3
 8002de8:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8002dec:	f04f 0000 	mov.w	r0, #0
 8002df0:	496d      	ldr	r1, [pc, #436]	; (8002fa8 <madgwick+0xeb4>)
 8002df2:	f7fd f9b1 	bl	8000158 <__aeabi_dsub>
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002e02:	f7fd f9a9 	bl	8000158 <__aeabi_dsub>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002e12:	f7fd fb59 	bl	80004c8 <__aeabi_dmul>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	4629      	mov	r1, r5
 8002e1e:	f7fd f99d 	bl	800015c <__adddf3>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4614      	mov	r4, r2
 8002e28:	461d      	mov	r5, r3
 8002e2a:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8002e2e:	f7fd faf3 	bl	8000418 <__aeabi_f2d>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4620      	mov	r0, r4
 8002e38:	4629      	mov	r1, r5
 8002e3a:	f7fd f98d 	bl	8000158 <__aeabi_dsub>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	4640      	mov	r0, r8
 8002e44:	4649      	mov	r1, r9
 8002e46:	f7fd fb3f 	bl	80004c8 <__aeabi_dmul>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4650      	mov	r0, sl
 8002e50:	4659      	mov	r1, fp
 8002e52:	f7fd f983 	bl	800015c <__adddf3>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	        s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8002e5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	f7fd f979 	bl	800015c <__adddf3>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4610      	mov	r0, r2
 8002e70:	4619      	mov	r1, r3
 8002e72:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8002e76:	f7fd f96f 	bl	8000158 <__aeabi_dsub>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4614      	mov	r4, r2
 8002e80:	461d      	mov	r5, r3
 8002e82:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002e86:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	f7fd fac4 	bl	8000418 <__aeabi_f2d>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4620      	mov	r0, r4
 8002e96:	4629      	mov	r1, r5
 8002e98:	f7fd f95e 	bl	8000158 <__aeabi_dsub>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8002ea8:	f7fd fb0e 	bl	80004c8 <__aeabi_dmul>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4690      	mov	r8, r2
 8002eb2:	4699      	mov	r9, r3
 8002eb4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	f7fd f94e 	bl	800015c <__adddf3>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8002ecc:	f7fd f946 	bl	800015c <__adddf3>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4614      	mov	r4, r2
 8002ed6:	461d      	mov	r5, r3
 8002ed8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002edc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	f7fd fa99 	bl	8000418 <__aeabi_f2d>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4620      	mov	r0, r4
 8002eec:	4629      	mov	r1, r5
 8002eee:	f7fd f933 	bl	8000158 <__aeabi_dsub>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	4619      	mov	r1, r3
 8002efa:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8002efe:	f7fd fae3 	bl	80004c8 <__aeabi_dmul>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4640      	mov	r0, r8
 8002f08:	4649      	mov	r1, r9
 8002f0a:	f7fd f927 	bl	800015c <__adddf3>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4692      	mov	sl, r2
 8002f14:	469b      	mov	fp, r3
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	4b24      	ldr	r3, [pc, #144]	; (8002fac <madgwick+0xeb8>)
 8002f1c:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8002f20:	f7fd fad2 	bl	80004c8 <__aeabi_dmul>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	4690      	mov	r8, r2
 8002f2a:	4699      	mov	r9, r3
 8002f2c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	f7fd f912 	bl	800015c <__adddf3>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	f04f 0000 	mov.w	r0, #0
 8002f40:	491b      	ldr	r1, [pc, #108]	; (8002fb0 <madgwick+0xebc>)
 8002f42:	f7fd f909 	bl	8000158 <__aeabi_dsub>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4614      	mov	r4, r2
 8002f4c:	461d      	mov	r5, r3
 8002f4e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	f7fd f901 	bl	800015c <__adddf3>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4620      	mov	r0, r4
 8002f60:	4629      	mov	r1, r5
 8002f62:	f7fd f8f9 	bl	8000158 <__aeabi_dsub>
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4614      	mov	r4, r2
 8002f6c:	461d      	mov	r5, r3
 8002f6e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002f72:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002f76:	6818      	ldr	r0, [r3, #0]
 8002f78:	f7fd fa4e 	bl	8000418 <__aeabi_f2d>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4620      	mov	r0, r4
 8002f82:	4629      	mov	r1, r5
 8002f84:	f7fd f8e8 	bl	8000158 <__aeabi_dsub>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4640      	mov	r0, r8
 8002f8e:	4649      	mov	r1, r9
 8002f90:	f7fd fa9a 	bl	80004c8 <__aeabi_dmul>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4650      	mov	r0, sl
 8002f9a:	4659      	mov	r1, fp
 8002f9c:	f7fd f8dc 	bl	8000158 <__aeabi_dsub>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	e006      	b.n	8002fb4 <madgwick+0xec0>
 8002fa6:	bf00      	nop
 8002fa8:	3fe00000 	.word	0x3fe00000
 8002fac:	40100000 	.word	0x40100000
 8002fb0:	3ff00000 	.word	0x3ff00000
 8002fb4:	4692      	mov	sl, r2
 8002fb6:	469b      	mov	fp, r3
 8002fb8:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8002fbc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002fc0:	f7fd fa82 	bl	80004c8 <__aeabi_dmul>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4690      	mov	r8, r2
 8002fca:	4699      	mov	r9, r3
 8002fcc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002fd0:	f04f 0000 	mov.w	r0, #0
 8002fd4:	49d6      	ldr	r1, [pc, #856]	; (8003330 <madgwick+0x123c>)
 8002fd6:	f7fd f8bf 	bl	8000158 <__aeabi_dsub>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4610      	mov	r0, r2
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8002fe6:	f7fd f8b7 	bl	8000158 <__aeabi_dsub>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4610      	mov	r0, r2
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002ff6:	f7fd fa67 	bl	80004c8 <__aeabi_dmul>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4614      	mov	r4, r2
 8003000:	461d      	mov	r5, r3
 8003002:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8003006:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800300a:	f7fd f8a5 	bl	8000158 <__aeabi_dsub>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	4610      	mov	r0, r2
 8003014:	4619      	mov	r1, r3
 8003016:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800301a:	f7fd fa55 	bl	80004c8 <__aeabi_dmul>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4620      	mov	r0, r4
 8003024:	4629      	mov	r1, r5
 8003026:	f7fd f899 	bl	800015c <__adddf3>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4614      	mov	r4, r2
 8003030:	461d      	mov	r5, r3
 8003032:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8003036:	f7fd f9ef 	bl	8000418 <__aeabi_f2d>
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	4620      	mov	r0, r4
 8003040:	4629      	mov	r1, r5
 8003042:	f7fd f889 	bl	8000158 <__aeabi_dsub>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4640      	mov	r0, r8
 800304c:	4649      	mov	r1, r9
 800304e:	f7fd fa3b 	bl	80004c8 <__aeabi_dmul>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4650      	mov	r0, sl
 8003058:	4659      	mov	r1, fp
 800305a:	f7fd f87f 	bl	800015c <__adddf3>
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	4692      	mov	sl, r2
 8003064:	469b      	mov	fp, r3
 8003066:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800306a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800306e:	f7fd fa2b 	bl	80004c8 <__aeabi_dmul>
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	4614      	mov	r4, r2
 8003078:	461d      	mov	r5, r3
 800307a:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800307e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003082:	f7fd fa21 	bl	80004c8 <__aeabi_dmul>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4620      	mov	r0, r4
 800308c:	4629      	mov	r1, r5
 800308e:	f7fd f865 	bl	800015c <__adddf3>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4690      	mov	r8, r2
 8003098:	4699      	mov	r9, r3
 800309a:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800309e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80030a2:	f7fd f859 	bl	8000158 <__aeabi_dsub>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	4610      	mov	r0, r2
 80030ac:	4619      	mov	r1, r3
 80030ae:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80030b2:	f7fd fa09 	bl	80004c8 <__aeabi_dmul>
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	4614      	mov	r4, r2
 80030bc:	461d      	mov	r5, r3
 80030be:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80030c2:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80030c6:	f7fd f849 	bl	800015c <__adddf3>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4610      	mov	r0, r2
 80030d0:	4619      	mov	r1, r3
 80030d2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80030d6:	f7fd f9f7 	bl	80004c8 <__aeabi_dmul>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	4620      	mov	r0, r4
 80030e0:	4629      	mov	r1, r5
 80030e2:	f7fd f83b 	bl	800015c <__adddf3>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4614      	mov	r4, r2
 80030ec:	461d      	mov	r5, r3
 80030ee:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 80030f2:	f7fd f991 	bl	8000418 <__aeabi_f2d>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4620      	mov	r0, r4
 80030fc:	4629      	mov	r1, r5
 80030fe:	f7fd f82b 	bl	8000158 <__aeabi_dsub>
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	4640      	mov	r0, r8
 8003108:	4649      	mov	r1, r9
 800310a:	f7fd f9dd 	bl	80004c8 <__aeabi_dmul>
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4650      	mov	r0, sl
 8003114:	4659      	mov	r1, fp
 8003116:	f7fd f821 	bl	800015c <__adddf3>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	4692      	mov	sl, r2
 8003120:	469b      	mov	fp, r3
 8003122:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8003126:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800312a:	f7fd f9cd 	bl	80004c8 <__aeabi_dmul>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	4614      	mov	r4, r2
 8003134:	461d      	mov	r5, r3
 8003136:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800313a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800313e:	f7fd f9c3 	bl	80004c8 <__aeabi_dmul>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	4620      	mov	r0, r4
 8003148:	4629      	mov	r1, r5
 800314a:	f7fd f805 	bl	8000158 <__aeabi_dsub>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4690      	mov	r8, r2
 8003154:	4699      	mov	r9, r3
 8003156:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800315a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800315e:	f7fc fffd 	bl	800015c <__adddf3>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	4610      	mov	r0, r2
 8003168:	4619      	mov	r1, r3
 800316a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800316e:	f7fd f9ab 	bl	80004c8 <__aeabi_dmul>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4614      	mov	r4, r2
 8003178:	461d      	mov	r5, r3
 800317a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800317e:	f04f 0000 	mov.w	r0, #0
 8003182:	496b      	ldr	r1, [pc, #428]	; (8003330 <madgwick+0x123c>)
 8003184:	f7fc ffe8 	bl	8000158 <__aeabi_dsub>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4610      	mov	r0, r2
 800318e:	4619      	mov	r1, r3
 8003190:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8003194:	f7fc ffe0 	bl	8000158 <__aeabi_dsub>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4610      	mov	r0, r2
 800319e:	4619      	mov	r1, r3
 80031a0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80031a4:	f7fd f990 	bl	80004c8 <__aeabi_dmul>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4620      	mov	r0, r4
 80031ae:	4629      	mov	r1, r5
 80031b0:	f7fc ffd4 	bl	800015c <__adddf3>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4614      	mov	r4, r2
 80031ba:	461d      	mov	r5, r3
 80031bc:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80031c0:	f7fd f92a 	bl	8000418 <__aeabi_f2d>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4620      	mov	r0, r4
 80031ca:	4629      	mov	r1, r5
 80031cc:	f7fc ffc4 	bl	8000158 <__aeabi_dsub>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	4640      	mov	r0, r8
 80031d6:	4649      	mov	r1, r9
 80031d8:	f7fd f976 	bl	80004c8 <__aeabi_dmul>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4650      	mov	r0, sl
 80031e2:	4659      	mov	r1, fp
 80031e4:	f7fc ffba 	bl	800015c <__adddf3>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	        s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80031f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80031f4:	61bb      	str	r3, [r7, #24]
 80031f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031fa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80031fe:	61fb      	str	r3, [r7, #28]
 8003200:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	f7fc ffa8 	bl	800015c <__adddf3>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8003218:	f7fc ff9e 	bl	8000158 <__aeabi_dsub>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4614      	mov	r4, r2
 8003222:	461d      	mov	r5, r3
 8003224:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8003228:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	f7fd f8f3 	bl	8000418 <__aeabi_f2d>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4620      	mov	r0, r4
 8003238:	4629      	mov	r1, r5
 800323a:	f7fc ff8d 	bl	8000158 <__aeabi_dsub>
 800323e:	4602      	mov	r2, r0
 8003240:	460b      	mov	r3, r1
 8003242:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003246:	f7fd f93f 	bl	80004c8 <__aeabi_dmul>
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	4690      	mov	r8, r2
 8003250:	4699      	mov	r9, r3
 8003252:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	f7fc ff7f 	bl	800015c <__adddf3>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	4610      	mov	r0, r2
 8003264:	4619      	mov	r1, r3
 8003266:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800326a:	f7fc ff77 	bl	800015c <__adddf3>
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	4614      	mov	r4, r2
 8003274:	461d      	mov	r5, r3
 8003276:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800327a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	f7fd f8ca 	bl	8000418 <__aeabi_f2d>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4620      	mov	r0, r4
 800328a:	4629      	mov	r1, r5
 800328c:	f7fc ff64 	bl	8000158 <__aeabi_dsub>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4610      	mov	r0, r2
 8003296:	4619      	mov	r1, r3
 8003298:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800329c:	f7fd f914 	bl	80004c8 <__aeabi_dmul>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	4640      	mov	r0, r8
 80032a6:	4649      	mov	r1, r9
 80032a8:	f7fc ff58 	bl	800015c <__adddf3>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4692      	mov	sl, r2
 80032b2:	469b      	mov	fp, r3
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	4b1e      	ldr	r3, [pc, #120]	; (8003334 <madgwick+0x1240>)
 80032ba:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80032be:	f7fd f903 	bl	80004c8 <__aeabi_dmul>
 80032c2:	4602      	mov	r2, r0
 80032c4:	460b      	mov	r3, r1
 80032c6:	4690      	mov	r8, r2
 80032c8:	4699      	mov	r9, r3
 80032ca:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	f7fc ff43 	bl	800015c <__adddf3>
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	f04f 0000 	mov.w	r0, #0
 80032de:	4916      	ldr	r1, [pc, #88]	; (8003338 <madgwick+0x1244>)
 80032e0:	f7fc ff3a 	bl	8000158 <__aeabi_dsub>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4614      	mov	r4, r2
 80032ea:	461d      	mov	r5, r3
 80032ec:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	f7fc ff32 	bl	800015c <__adddf3>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4620      	mov	r0, r4
 80032fe:	4629      	mov	r1, r5
 8003300:	f7fc ff2a 	bl	8000158 <__aeabi_dsub>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	4614      	mov	r4, r2
 800330a:	461d      	mov	r5, r3
 800330c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8003310:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	f7fd f87f 	bl	8000418 <__aeabi_f2d>
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	4620      	mov	r0, r4
 8003320:	4629      	mov	r1, r5
 8003322:	f7fc ff19 	bl	8000158 <__aeabi_dsub>
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4640      	mov	r0, r8
 800332c:	4649      	mov	r1, r9
 800332e:	e005      	b.n	800333c <madgwick+0x1248>
 8003330:	3fe00000 	.word	0x3fe00000
 8003334:	40100000 	.word	0x40100000
 8003338:	3ff00000 	.word	0x3ff00000
 800333c:	f7fd f8c4 	bl	80004c8 <__aeabi_dmul>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	4650      	mov	r0, sl
 8003346:	4659      	mov	r1, fp
 8003348:	f7fc ff06 	bl	8000158 <__aeabi_dsub>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4692      	mov	sl, r2
 8003352:	469b      	mov	fp, r3
 8003354:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8003358:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	613b      	str	r3, [r7, #16]
 8003360:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8003364:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8003374:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003378:	f7fd f8a6 	bl	80004c8 <__aeabi_dmul>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4614      	mov	r4, r2
 8003382:	461d      	mov	r5, r3
 8003384:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003388:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800338c:	f7fd f89c 	bl	80004c8 <__aeabi_dmul>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	4620      	mov	r0, r4
 8003396:	4629      	mov	r1, r5
 8003398:	f7fc fede 	bl	8000158 <__aeabi_dsub>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4690      	mov	r8, r2
 80033a2:	4699      	mov	r9, r3
 80033a4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80033a8:	f04f 0000 	mov.w	r0, #0
 80033ac:	49d2      	ldr	r1, [pc, #840]	; (80036f8 <madgwick+0x1604>)
 80033ae:	f7fc fed3 	bl	8000158 <__aeabi_dsub>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4610      	mov	r0, r2
 80033b8:	4619      	mov	r1, r3
 80033ba:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80033be:	f7fc fecb 	bl	8000158 <__aeabi_dsub>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4610      	mov	r0, r2
 80033c8:	4619      	mov	r1, r3
 80033ca:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80033ce:	f7fd f87b 	bl	80004c8 <__aeabi_dmul>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	4614      	mov	r4, r2
 80033d8:	461d      	mov	r5, r3
 80033da:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80033de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80033e2:	f7fc feb9 	bl	8000158 <__aeabi_dsub>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4610      	mov	r0, r2
 80033ec:	4619      	mov	r1, r3
 80033ee:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80033f2:	f7fd f869 	bl	80004c8 <__aeabi_dmul>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4620      	mov	r0, r4
 80033fc:	4629      	mov	r1, r5
 80033fe:	f7fc fead 	bl	800015c <__adddf3>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4614      	mov	r4, r2
 8003408:	461d      	mov	r5, r3
 800340a:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 800340e:	f7fd f803 	bl	8000418 <__aeabi_f2d>
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	4620      	mov	r0, r4
 8003418:	4629      	mov	r1, r5
 800341a:	f7fc fe9d 	bl	8000158 <__aeabi_dsub>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4640      	mov	r0, r8
 8003424:	4649      	mov	r1, r9
 8003426:	f7fd f84f 	bl	80004c8 <__aeabi_dmul>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4650      	mov	r0, sl
 8003430:	4659      	mov	r1, fp
 8003432:	f7fc fe93 	bl	800015c <__adddf3>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4692      	mov	sl, r2
 800343c:	469b      	mov	fp, r3
 800343e:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8003442:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003446:	f7fd f83f 	bl	80004c8 <__aeabi_dmul>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4614      	mov	r4, r2
 8003450:	461d      	mov	r5, r3
 8003452:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8003456:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800345a:	f7fd f835 	bl	80004c8 <__aeabi_dmul>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	4620      	mov	r0, r4
 8003464:	4629      	mov	r1, r5
 8003466:	f7fc fe79 	bl	800015c <__adddf3>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4690      	mov	r8, r2
 8003470:	4699      	mov	r9, r3
 8003472:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8003476:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800347a:	f7fc fe6d 	bl	8000158 <__aeabi_dsub>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4610      	mov	r0, r2
 8003484:	4619      	mov	r1, r3
 8003486:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800348a:	f7fd f81d 	bl	80004c8 <__aeabi_dmul>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4614      	mov	r4, r2
 8003494:	461d      	mov	r5, r3
 8003496:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800349a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800349e:	f7fc fe5d 	bl	800015c <__adddf3>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4610      	mov	r0, r2
 80034a8:	4619      	mov	r1, r3
 80034aa:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80034ae:	f7fd f80b 	bl	80004c8 <__aeabi_dmul>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4620      	mov	r0, r4
 80034b8:	4629      	mov	r1, r5
 80034ba:	f7fc fe4f 	bl	800015c <__adddf3>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4614      	mov	r4, r2
 80034c4:	461d      	mov	r5, r3
 80034c6:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 80034ca:	f7fc ffa5 	bl	8000418 <__aeabi_f2d>
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	4620      	mov	r0, r4
 80034d4:	4629      	mov	r1, r5
 80034d6:	f7fc fe3f 	bl	8000158 <__aeabi_dsub>
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	4640      	mov	r0, r8
 80034e0:	4649      	mov	r1, r9
 80034e2:	f7fc fff1 	bl	80004c8 <__aeabi_dmul>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4650      	mov	r0, sl
 80034ec:	4659      	mov	r1, fp
 80034ee:	f7fc fe35 	bl	800015c <__adddf3>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4692      	mov	sl, r2
 80034f8:	469b      	mov	fp, r3
 80034fa:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80034fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003502:	f7fc ffe1 	bl	80004c8 <__aeabi_dmul>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	4614      	mov	r4, r2
 800350c:	461d      	mov	r5, r3
 800350e:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8003512:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003516:	f7fc ffd7 	bl	80004c8 <__aeabi_dmul>
 800351a:	4602      	mov	r2, r0
 800351c:	460b      	mov	r3, r1
 800351e:	4620      	mov	r0, r4
 8003520:	4629      	mov	r1, r5
 8003522:	f7fc fe19 	bl	8000158 <__aeabi_dsub>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	4690      	mov	r8, r2
 800352c:	4699      	mov	r9, r3
 800352e:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8003532:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003536:	f7fc fe11 	bl	800015c <__adddf3>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4610      	mov	r0, r2
 8003540:	4619      	mov	r1, r3
 8003542:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003546:	f7fc ffbf 	bl	80004c8 <__aeabi_dmul>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	4614      	mov	r4, r2
 8003550:	461d      	mov	r5, r3
 8003552:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8003556:	f04f 0000 	mov.w	r0, #0
 800355a:	4967      	ldr	r1, [pc, #412]	; (80036f8 <madgwick+0x1604>)
 800355c:	f7fc fdfc 	bl	8000158 <__aeabi_dsub>
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	4610      	mov	r0, r2
 8003566:	4619      	mov	r1, r3
 8003568:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800356c:	f7fc fdf4 	bl	8000158 <__aeabi_dsub>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4610      	mov	r0, r2
 8003576:	4619      	mov	r1, r3
 8003578:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800357c:	f7fc ffa4 	bl	80004c8 <__aeabi_dmul>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4620      	mov	r0, r4
 8003586:	4629      	mov	r1, r5
 8003588:	f7fc fde8 	bl	800015c <__adddf3>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4614      	mov	r4, r2
 8003592:	461d      	mov	r5, r3
 8003594:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8003598:	f7fc ff3e 	bl	8000418 <__aeabi_f2d>
 800359c:	4602      	mov	r2, r0
 800359e:	460b      	mov	r3, r1
 80035a0:	4620      	mov	r0, r4
 80035a2:	4629      	mov	r1, r5
 80035a4:	f7fc fdd8 	bl	8000158 <__aeabi_dsub>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4640      	mov	r0, r8
 80035ae:	4649      	mov	r1, r9
 80035b0:	f7fc ff8a 	bl	80004c8 <__aeabi_dmul>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4650      	mov	r0, sl
 80035ba:	4659      	mov	r1, fp
 80035bc:	f7fc fdce 	bl	800015c <__adddf3>
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	        s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80035c8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	f7fc fdc4 	bl	800015c <__adddf3>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4610      	mov	r0, r2
 80035da:	4619      	mov	r1, r3
 80035dc:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80035e0:	f7fc fdba 	bl	8000158 <__aeabi_dsub>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4614      	mov	r4, r2
 80035ea:	461d      	mov	r5, r3
 80035ec:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80035f0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80035f4:	6818      	ldr	r0, [r3, #0]
 80035f6:	f7fc ff0f 	bl	8000418 <__aeabi_f2d>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4620      	mov	r0, r4
 8003600:	4629      	mov	r1, r5
 8003602:	f7fc fda9 	bl	8000158 <__aeabi_dsub>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4610      	mov	r0, r2
 800360c:	4619      	mov	r1, r3
 800360e:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8003612:	f7fc ff59 	bl	80004c8 <__aeabi_dmul>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4614      	mov	r4, r2
 800361c:	461d      	mov	r5, r3
 800361e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	f7fc fd99 	bl	800015c <__adddf3>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	4610      	mov	r0, r2
 8003630:	4619      	mov	r1, r3
 8003632:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8003636:	f7fc fd91 	bl	800015c <__adddf3>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4690      	mov	r8, r2
 8003640:	4699      	mov	r9, r3
 8003642:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8003646:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	f7fc fee4 	bl	8000418 <__aeabi_f2d>
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	4640      	mov	r0, r8
 8003656:	4649      	mov	r1, r9
 8003658:	f7fc fd7e 	bl	8000158 <__aeabi_dsub>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4610      	mov	r0, r2
 8003662:	4619      	mov	r1, r3
 8003664:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8003668:	f7fc ff2e 	bl	80004c8 <__aeabi_dmul>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4620      	mov	r0, r4
 8003672:	4629      	mov	r1, r5
 8003674:	f7fc fd72 	bl	800015c <__adddf3>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4690      	mov	r8, r2
 800367e:	4699      	mov	r9, r3
 8003680:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8003684:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	60bb      	str	r3, [r7, #8]
 800368c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8003690:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80036a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036a4:	f7fc ff10 	bl	80004c8 <__aeabi_dmul>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4614      	mov	r4, r2
 80036ae:	461d      	mov	r5, r3
 80036b0:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 80036b4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80036b8:	f7fc ff06 	bl	80004c8 <__aeabi_dmul>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4620      	mov	r0, r4
 80036c2:	4629      	mov	r1, r5
 80036c4:	f7fc fd4a 	bl	800015c <__adddf3>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4692      	mov	sl, r2
 80036ce:	469b      	mov	fp, r3
 80036d0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80036d4:	f04f 0000 	mov.w	r0, #0
 80036d8:	4907      	ldr	r1, [pc, #28]	; (80036f8 <madgwick+0x1604>)
 80036da:	f7fc fd3d 	bl	8000158 <__aeabi_dsub>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	4610      	mov	r0, r2
 80036e4:	4619      	mov	r1, r3
 80036e6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80036ea:	f7fc fd35 	bl	8000158 <__aeabi_dsub>
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	4610      	mov	r0, r2
 80036f4:	4619      	mov	r1, r3
 80036f6:	e001      	b.n	80036fc <madgwick+0x1608>
 80036f8:	3fe00000 	.word	0x3fe00000
 80036fc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003700:	f7fc fee2 	bl	80004c8 <__aeabi_dmul>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4614      	mov	r4, r2
 800370a:	461d      	mov	r5, r3
 800370c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8003710:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003714:	f7fc fd20 	bl	8000158 <__aeabi_dsub>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4610      	mov	r0, r2
 800371e:	4619      	mov	r1, r3
 8003720:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003724:	f7fc fed0 	bl	80004c8 <__aeabi_dmul>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4620      	mov	r0, r4
 800372e:	4629      	mov	r1, r5
 8003730:	f7fc fd14 	bl	800015c <__adddf3>
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4614      	mov	r4, r2
 800373a:	461d      	mov	r5, r3
 800373c:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8003740:	f7fc fe6a 	bl	8000418 <__aeabi_f2d>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4620      	mov	r0, r4
 800374a:	4629      	mov	r1, r5
 800374c:	f7fc fd04 	bl	8000158 <__aeabi_dsub>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4650      	mov	r0, sl
 8003756:	4659      	mov	r1, fp
 8003758:	f7fc feb6 	bl	80004c8 <__aeabi_dmul>
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	4640      	mov	r0, r8
 8003762:	4649      	mov	r1, r9
 8003764:	f7fc fcfa 	bl	800015c <__adddf3>
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	4614      	mov	r4, r2
 800376e:	461d      	mov	r5, r3
 8003770:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8003774:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8003780:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800378a:	607b      	str	r3, [r7, #4]
 800378c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003790:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003794:	f7fc fe98 	bl	80004c8 <__aeabi_dmul>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4690      	mov	r8, r2
 800379e:	4699      	mov	r9, r3
 80037a0:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80037a4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80037a8:	f7fc fe8e 	bl	80004c8 <__aeabi_dmul>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4640      	mov	r0, r8
 80037b2:	4649      	mov	r1, r9
 80037b4:	f7fc fcd2 	bl	800015c <__adddf3>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4690      	mov	r8, r2
 80037be:	4699      	mov	r9, r3
 80037c0:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80037c4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80037c8:	f7fc fcc6 	bl	8000158 <__aeabi_dsub>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4610      	mov	r0, r2
 80037d2:	4619      	mov	r1, r3
 80037d4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80037d8:	f7fc fe76 	bl	80004c8 <__aeabi_dmul>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	4692      	mov	sl, r2
 80037e2:	469b      	mov	fp, r3
 80037e4:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80037e8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80037ec:	f7fc fcb6 	bl	800015c <__adddf3>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4610      	mov	r0, r2
 80037f6:	4619      	mov	r1, r3
 80037f8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80037fc:	f7fc fe64 	bl	80004c8 <__aeabi_dmul>
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	4650      	mov	r0, sl
 8003806:	4659      	mov	r1, fp
 8003808:	f7fc fca8 	bl	800015c <__adddf3>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4692      	mov	sl, r2
 8003812:	469b      	mov	fp, r3
 8003814:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 8003818:	f7fc fdfe 	bl	8000418 <__aeabi_f2d>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4650      	mov	r0, sl
 8003822:	4659      	mov	r1, fp
 8003824:	f7fc fc98 	bl	8000158 <__aeabi_dsub>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4640      	mov	r0, r8
 800382e:	4649      	mov	r1, r9
 8003830:	f7fc fe4a 	bl	80004c8 <__aeabi_dmul>
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	4620      	mov	r0, r4
 800383a:	4629      	mov	r1, r5
 800383c:	f7fc fc8e 	bl	800015c <__adddf3>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4614      	mov	r4, r2
 8003846:	461d      	mov	r5, r3
 8003848:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800384c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003850:	f7fc fe3a 	bl	80004c8 <__aeabi_dmul>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4690      	mov	r8, r2
 800385a:	4699      	mov	r9, r3
 800385c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8003860:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003864:	f7fc fc7a 	bl	800015c <__adddf3>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4610      	mov	r0, r2
 800386e:	4619      	mov	r1, r3
 8003870:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003874:	f7fc fe28 	bl	80004c8 <__aeabi_dmul>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4692      	mov	sl, r2
 800387e:	469b      	mov	fp, r3
 8003880:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8003884:	f04f 0000 	mov.w	r0, #0
 8003888:	49b9      	ldr	r1, [pc, #740]	; (8003b70 <madgwick+0x1a7c>)
 800388a:	f7fc fc65 	bl	8000158 <__aeabi_dsub>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4610      	mov	r0, r2
 8003894:	4619      	mov	r1, r3
 8003896:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800389a:	f7fc fc5d 	bl	8000158 <__aeabi_dsub>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	4610      	mov	r0, r2
 80038a4:	4619      	mov	r1, r3
 80038a6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80038aa:	f7fc fe0d 	bl	80004c8 <__aeabi_dmul>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4650      	mov	r0, sl
 80038b4:	4659      	mov	r1, fp
 80038b6:	f7fc fc51 	bl	800015c <__adddf3>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4692      	mov	sl, r2
 80038c0:	469b      	mov	fp, r3
 80038c2:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80038c6:	f7fc fda7 	bl	8000418 <__aeabi_f2d>
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	4650      	mov	r0, sl
 80038d0:	4659      	mov	r1, fp
 80038d2:	f7fc fc41 	bl	8000158 <__aeabi_dsub>
 80038d6:	4602      	mov	r2, r0
 80038d8:	460b      	mov	r3, r1
 80038da:	4640      	mov	r0, r8
 80038dc:	4649      	mov	r1, r9
 80038de:	f7fc fdf3 	bl	80004c8 <__aeabi_dmul>
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	4620      	mov	r0, r4
 80038e8:	4629      	mov	r1, r5
 80038ea:	f7fc fc37 	bl	800015c <__adddf3>
 80038ee:	4602      	mov	r2, r0
 80038f0:	460b      	mov	r3, r1
 80038f2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	        recipNorm = 1.0 / sqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);  // normalise step magnitude
 80038f6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80038fa:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80038fe:	f7fc fde3 	bl	80004c8 <__aeabi_dmul>
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	4614      	mov	r4, r2
 8003908:	461d      	mov	r5, r3
 800390a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800390e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003912:	f7fc fdd9 	bl	80004c8 <__aeabi_dmul>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	4620      	mov	r0, r4
 800391c:	4629      	mov	r1, r5
 800391e:	f7fc fc1d 	bl	800015c <__adddf3>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	4614      	mov	r4, r2
 8003928:	461d      	mov	r5, r3
 800392a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800392e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003932:	f7fc fdc9 	bl	80004c8 <__aeabi_dmul>
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	4620      	mov	r0, r4
 800393c:	4629      	mov	r1, r5
 800393e:	f7fc fc0d 	bl	800015c <__adddf3>
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	4614      	mov	r4, r2
 8003948:	461d      	mov	r5, r3
 800394a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800394e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003952:	f7fc fdb9 	bl	80004c8 <__aeabi_dmul>
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	4620      	mov	r0, r4
 800395c:	4629      	mov	r1, r5
 800395e:	f7fc fbfd 	bl	800015c <__adddf3>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	4610      	mov	r0, r2
 8003968:	4619      	mov	r1, r3
 800396a:	f004 ff93 	bl	8008894 <sqrt>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	f04f 0000 	mov.w	r0, #0
 8003976:	497f      	ldr	r1, [pc, #508]	; (8003b74 <madgwick+0x1a80>)
 8003978:	f7fc fed0 	bl	800071c <__aeabi_ddiv>
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	        s0 *= recipNorm;
 8003984:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8003988:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800398c:	f7fc fd9c 	bl	80004c8 <__aeabi_dmul>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	        s1 *= recipNorm;
 8003998:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800399c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80039a0:	f7fc fd92 	bl	80004c8 <__aeabi_dmul>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	        s2 *= recipNorm;
 80039ac:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80039b0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80039b4:	f7fc fd88 	bl	80004c8 <__aeabi_dmul>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	        s3 *= recipNorm;
 80039c0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80039c4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80039c8:	f7fc fd7e 	bl	80004c8 <__aeabi_dmul>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	        // Apply feedback step
	        qDot1 -= beta * s0;
 80039d4:	4b68      	ldr	r3, [pc, #416]	; (8003b78 <madgwick+0x1a84>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fc fd1d 	bl	8000418 <__aeabi_f2d>
 80039de:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80039e2:	f7fc fd71 	bl	80004c8 <__aeabi_dmul>
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 80039ee:	f7fc fbb3 	bl	8000158 <__aeabi_dsub>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
	        qDot2 -= beta * s1;
 80039fa:	4b5f      	ldr	r3, [pc, #380]	; (8003b78 <madgwick+0x1a84>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fc fd0a 	bl	8000418 <__aeabi_f2d>
 8003a04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a08:	f7fc fd5e 	bl	80004c8 <__aeabi_dmul>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8003a14:	f7fc fba0 	bl	8000158 <__aeabi_dsub>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
	        qDot3 -= beta * s2;
 8003a20:	4b55      	ldr	r3, [pc, #340]	; (8003b78 <madgwick+0x1a84>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fc fcf7 	bl	8000418 <__aeabi_f2d>
 8003a2a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a2e:	f7fc fd4b 	bl	80004c8 <__aeabi_dmul>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8003a3a:	f7fc fb8d 	bl	8000158 <__aeabi_dsub>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
	        qDot4 -= beta * s3;
 8003a46:	4b4c      	ldr	r3, [pc, #304]	; (8003b78 <madgwick+0x1a84>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fc fce4 	bl	8000418 <__aeabi_f2d>
 8003a50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a54:	f7fc fd38 	bl	80004c8 <__aeabi_dmul>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8003a60:	f7fc fb7a 	bl	8000158 <__aeabi_dsub>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150

	        // Integrate rate of change of quaternion to yield quaternion
	        q0 += qDot1 * deltaT;
 8003a6c:	4b43      	ldr	r3, [pc, #268]	; (8003b7c <madgwick+0x1a88>)
 8003a6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a72:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8003a76:	f7fc fd27 	bl	80004c8 <__aeabi_dmul>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003a82:	f7fc fb6b 	bl	800015c <__adddf3>
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
	        q1 += qDot2 * deltaT;
 8003a8e:	4b3b      	ldr	r3, [pc, #236]	; (8003b7c <madgwick+0x1a88>)
 8003a90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a94:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8003a98:	f7fc fd16 	bl	80004c8 <__aeabi_dmul>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8003aa4:	f7fc fb5a 	bl	800015c <__adddf3>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
	        q2 += qDot3 * deltaT;
 8003ab0:	4b32      	ldr	r3, [pc, #200]	; (8003b7c <madgwick+0x1a88>)
 8003ab2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ab6:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8003aba:	f7fc fd05 	bl	80004c8 <__aeabi_dmul>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8003ac6:	f7fc fb49 	bl	800015c <__adddf3>
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
	        q3 += qDot4 * deltaT;
 8003ad2:	4b2a      	ldr	r3, [pc, #168]	; (8003b7c <madgwick+0x1a88>)
 8003ad4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ad8:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8003adc:	f7fc fcf4 	bl	80004c8 <__aeabi_dmul>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8003ae8:	f7fc fb38 	bl	800015c <__adddf3>
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170

	        // Normalise quaternion
	        recipNorm = 1.0 / sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8003af4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003af8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003afc:	f7fc fce4 	bl	80004c8 <__aeabi_dmul>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4614      	mov	r4, r2
 8003b06:	461d      	mov	r5, r3
 8003b08:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8003b0c:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8003b10:	f7fc fcda 	bl	80004c8 <__aeabi_dmul>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4620      	mov	r0, r4
 8003b1a:	4629      	mov	r1, r5
 8003b1c:	f7fc fb1e 	bl	800015c <__adddf3>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4614      	mov	r4, r2
 8003b26:	461d      	mov	r5, r3
 8003b28:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8003b2c:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8003b30:	f7fc fcca 	bl	80004c8 <__aeabi_dmul>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4620      	mov	r0, r4
 8003b3a:	4629      	mov	r1, r5
 8003b3c:	f7fc fb0e 	bl	800015c <__adddf3>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4614      	mov	r4, r2
 8003b46:	461d      	mov	r5, r3
 8003b48:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8003b4c:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8003b50:	f7fc fcba 	bl	80004c8 <__aeabi_dmul>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4620      	mov	r0, r4
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	f7fc fafe 	bl	800015c <__adddf3>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4610      	mov	r0, r2
 8003b66:	4619      	mov	r1, r3
 8003b68:	f004 fe94 	bl	8008894 <sqrt>
 8003b6c:	e008      	b.n	8003b80 <madgwick+0x1a8c>
 8003b6e:	bf00      	nop
 8003b70:	3fe00000 	.word	0x3fe00000
 8003b74:	3ff00000 	.word	0x3ff00000
 8003b78:	20000004 	.word	0x20000004
 8003b7c:	200000f8 	.word	0x200000f8
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	f04f 0000 	mov.w	r0, #0
 8003b88:	492e      	ldr	r1, [pc, #184]	; (8003c44 <madgwick+0x1b50>)
 8003b8a:	f7fc fdc7 	bl	800071c <__aeabi_ddiv>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	        q0 *= recipNorm;
 8003b96:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8003b9a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b9e:	f7fc fc93 	bl	80004c8 <__aeabi_dmul>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
	        q1 *= recipNorm;
 8003baa:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8003bae:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8003bb2:	f7fc fc89 	bl	80004c8 <__aeabi_dmul>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
	        q2 *= recipNorm;
 8003bbe:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8003bc2:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8003bc6:	f7fc fc7f 	bl	80004c8 <__aeabi_dmul>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
	        q3 *= recipNorm;
 8003bd2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8003bd6:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8003bda:	f7fc fc75 	bl	80004c8 <__aeabi_dmul>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170

	        q[0] = q0;
 8003be6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003bea:	f7fc ff45 	bl	8000a78 <__aeabi_d2f>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003bf4:	601a      	str	r2, [r3, #0]
	        q[1] = q1;
 8003bf6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003bfa:	1d1c      	adds	r4, r3, #4
 8003bfc:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8003c00:	f7fc ff3a 	bl	8000a78 <__aeabi_d2f>
 8003c04:	4603      	mov	r3, r0
 8003c06:	6023      	str	r3, [r4, #0]
	        q[2] = q2;
 8003c08:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003c0c:	f103 0408 	add.w	r4, r3, #8
 8003c10:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8003c14:	f7fc ff30 	bl	8000a78 <__aeabi_d2f>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	6023      	str	r3, [r4, #0]
	        q[3] = q3;
 8003c1c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003c20:	f103 040c 	add.w	r4, r3, #12
 8003c24:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8003c28:	f7fc ff26 	bl	8000a78 <__aeabi_d2f>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	6023      	str	r3, [r4, #0]
 8003c30:	e002      	b.n	8003c38 <madgwick+0x1b44>
	        if (a_norm == 0.) return;  // handle NaN
 8003c32:	bf00      	nop
 8003c34:	e000      	b.n	8003c38 <madgwick+0x1b44>
	        if (m_norm == 0.) return;  // handle NaN
 8003c36:	bf00      	nop

}
 8003c38:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c42:	bf00      	nop
 8003c44:	3ff00000 	.word	0x3ff00000

08003c48 <Kalman_getAngle_roll>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* USER CODE BEGIN PV */
float Kalman_getAngle_roll(float newAngle, float newRate, float dt) {
 8003c48:	b590      	push	{r4, r7, lr}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
   rate = newRate - bias;
 8003c54:	4b8d      	ldr	r3, [pc, #564]	; (8003e8c <Kalman_getAngle_roll+0x244>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4619      	mov	r1, r3
 8003c5a:	68b8      	ldr	r0, [r7, #8]
 8003c5c:	f7fc ff60 	bl	8000b20 <__aeabi_fsub>
 8003c60:	4603      	mov	r3, r0
 8003c62:	461a      	mov	r2, r3
 8003c64:	4b8a      	ldr	r3, [pc, #552]	; (8003e90 <Kalman_getAngle_roll+0x248>)
 8003c66:	601a      	str	r2, [r3, #0]
    angle += dt * rate;
 8003c68:	4b89      	ldr	r3, [pc, #548]	; (8003e90 <Kalman_getAngle_roll+0x248>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fd f860 	bl	8000d34 <__aeabi_fmul>
 8003c74:	4603      	mov	r3, r0
 8003c76:	461a      	mov	r2, r3
 8003c78:	4b86      	ldr	r3, [pc, #536]	; (8003e94 <Kalman_getAngle_roll+0x24c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4610      	mov	r0, r2
 8003c80:	f7fc ff50 	bl	8000b24 <__addsf3>
 8003c84:	4603      	mov	r3, r0
 8003c86:	461a      	mov	r2, r3
 8003c88:	4b82      	ldr	r3, [pc, #520]	; (8003e94 <Kalman_getAngle_roll+0x24c>)
 8003c8a:	601a      	str	r2, [r3, #0]

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
    P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
 8003c8c:	4b82      	ldr	r3, [pc, #520]	; (8003e98 <Kalman_getAngle_roll+0x250>)
 8003c8e:	681c      	ldr	r4, [r3, #0]
 8003c90:	4b81      	ldr	r3, [pc, #516]	; (8003e98 <Kalman_getAngle_roll+0x250>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fd f84c 	bl	8000d34 <__aeabi_fmul>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	4b7d      	ldr	r3, [pc, #500]	; (8003e98 <Kalman_getAngle_roll+0x250>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	f7fc ff3a 	bl	8000b20 <__aeabi_fsub>
 8003cac:	4603      	mov	r3, r0
 8003cae:	461a      	mov	r2, r3
 8003cb0:	4b79      	ldr	r3, [pc, #484]	; (8003e98 <Kalman_getAngle_roll+0x250>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	f7fc ff32 	bl	8000b20 <__aeabi_fsub>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	4b76      	ldr	r3, [pc, #472]	; (8003e9c <Kalman_getAngle_roll+0x254>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	f7fc ff2c 	bl	8000b24 <__addsf3>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7fd f82f 	bl	8000d34 <__aeabi_fmul>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4620      	mov	r0, r4
 8003cdc:	f7fc ff22 	bl	8000b24 <__addsf3>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	4b6c      	ldr	r3, [pc, #432]	; (8003e98 <Kalman_getAngle_roll+0x250>)
 8003ce6:	601a      	str	r2, [r3, #0]
    P[0][1] -= dt * P[1][1];
 8003ce8:	4b6b      	ldr	r3, [pc, #428]	; (8003e98 <Kalman_getAngle_roll+0x250>)
 8003cea:	685c      	ldr	r4, [r3, #4]
 8003cec:	4b6a      	ldr	r3, [pc, #424]	; (8003e98 <Kalman_getAngle_roll+0x250>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fd f81e 	bl	8000d34 <__aeabi_fmul>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	f7fc ff0f 	bl	8000b20 <__aeabi_fsub>
 8003d02:	4603      	mov	r3, r0
 8003d04:	461a      	mov	r2, r3
 8003d06:	4b64      	ldr	r3, [pc, #400]	; (8003e98 <Kalman_getAngle_roll+0x250>)
 8003d08:	605a      	str	r2, [r3, #4]
    P[1][0] -= dt * P[1][1];
 8003d0a:	4b63      	ldr	r3, [pc, #396]	; (8003e98 <Kalman_getAngle_roll+0x250>)
 8003d0c:	689c      	ldr	r4, [r3, #8]
 8003d0e:	4b62      	ldr	r3, [pc, #392]	; (8003e98 <Kalman_getAngle_roll+0x250>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fd f80d 	bl	8000d34 <__aeabi_fmul>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4620      	mov	r0, r4
 8003d20:	f7fc fefe 	bl	8000b20 <__aeabi_fsub>
 8003d24:	4603      	mov	r3, r0
 8003d26:	461a      	mov	r2, r3
 8003d28:	4b5b      	ldr	r3, [pc, #364]	; (8003e98 <Kalman_getAngle_roll+0x250>)
 8003d2a:	609a      	str	r2, [r3, #8]
    P[1][1] += (Q_bias) * dt;
 8003d2c:	4b5a      	ldr	r3, [pc, #360]	; (8003e98 <Kalman_getAngle_roll+0x250>)
 8003d2e:	68dc      	ldr	r4, [r3, #12]
 8003d30:	4b5b      	ldr	r3, [pc, #364]	; (8003ea0 <Kalman_getAngle_roll+0x258>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fc fffc 	bl	8000d34 <__aeabi_fmul>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4620      	mov	r0, r4
 8003d42:	f7fc feef 	bl	8000b24 <__addsf3>
 8003d46:	4603      	mov	r3, r0
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4b53      	ldr	r3, [pc, #332]	; (8003e98 <Kalman_getAngle_roll+0x250>)
 8003d4c:	60da      	str	r2, [r3, #12]

    // Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
    // Calculate Kalman gain - Compute the Kalman gain
    /* Step 4 */
     S = P[0][0] + R_measure; // Estimate error
 8003d4e:	4b52      	ldr	r3, [pc, #328]	; (8003e98 <Kalman_getAngle_roll+0x250>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a54      	ldr	r2, [pc, #336]	; (8003ea4 <Kalman_getAngle_roll+0x25c>)
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	4611      	mov	r1, r2
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fc fee3 	bl	8000b24 <__addsf3>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	461a      	mov	r2, r3
 8003d62:	4b51      	ldr	r3, [pc, #324]	; (8003ea8 <Kalman_getAngle_roll+0x260>)
 8003d64:	601a      	str	r2, [r3, #0]
    /* Step 5 */
     // Kalman gain - This is a 2x1 vector
    K[0] = P[0][0] / S;
 8003d66:	4b4c      	ldr	r3, [pc, #304]	; (8003e98 <Kalman_getAngle_roll+0x250>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a4f      	ldr	r2, [pc, #316]	; (8003ea8 <Kalman_getAngle_roll+0x260>)
 8003d6c:	6812      	ldr	r2, [r2, #0]
 8003d6e:	4611      	mov	r1, r2
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fd f893 	bl	8000e9c <__aeabi_fdiv>
 8003d76:	4603      	mov	r3, r0
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4b4c      	ldr	r3, [pc, #304]	; (8003eac <Kalman_getAngle_roll+0x264>)
 8003d7c:	601a      	str	r2, [r3, #0]
    K[1] = P[1][0] / S;
 8003d7e:	4b46      	ldr	r3, [pc, #280]	; (8003e98 <Kalman_getAngle_roll+0x250>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	4a49      	ldr	r2, [pc, #292]	; (8003ea8 <Kalman_getAngle_roll+0x260>)
 8003d84:	6812      	ldr	r2, [r2, #0]
 8003d86:	4611      	mov	r1, r2
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7fd f887 	bl	8000e9c <__aeabi_fdiv>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	461a      	mov	r2, r3
 8003d92:	4b46      	ldr	r3, [pc, #280]	; (8003eac <Kalman_getAngle_roll+0x264>)
 8003d94:	605a      	str	r2, [r3, #4]

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
     y = newAngle - angle; // Angle difference
 8003d96:	4b3f      	ldr	r3, [pc, #252]	; (8003e94 <Kalman_getAngle_roll+0x24c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f7fc febf 	bl	8000b20 <__aeabi_fsub>
 8003da2:	4603      	mov	r3, r0
 8003da4:	461a      	mov	r2, r3
 8003da6:	4b42      	ldr	r3, [pc, #264]	; (8003eb0 <Kalman_getAngle_roll+0x268>)
 8003da8:	601a      	str	r2, [r3, #0]
    /* Step 6 */
    angle += K[0] * y;
 8003daa:	4b40      	ldr	r3, [pc, #256]	; (8003eac <Kalman_getAngle_roll+0x264>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a40      	ldr	r2, [pc, #256]	; (8003eb0 <Kalman_getAngle_roll+0x268>)
 8003db0:	6812      	ldr	r2, [r2, #0]
 8003db2:	4611      	mov	r1, r2
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fc ffbd 	bl	8000d34 <__aeabi_fmul>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4b35      	ldr	r3, [pc, #212]	; (8003e94 <Kalman_getAngle_roll+0x24c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	f7fc fead 	bl	8000b24 <__addsf3>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	461a      	mov	r2, r3
 8003dce:	4b31      	ldr	r3, [pc, #196]	; (8003e94 <Kalman_getAngle_roll+0x24c>)
 8003dd0:	601a      	str	r2, [r3, #0]
    bias += K[1] * y;
 8003dd2:	4b36      	ldr	r3, [pc, #216]	; (8003eac <Kalman_getAngle_roll+0x264>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	4a36      	ldr	r2, [pc, #216]	; (8003eb0 <Kalman_getAngle_roll+0x268>)
 8003dd8:	6812      	ldr	r2, [r2, #0]
 8003dda:	4611      	mov	r1, r2
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fc ffa9 	bl	8000d34 <__aeabi_fmul>
 8003de2:	4603      	mov	r3, r0
 8003de4:	461a      	mov	r2, r3
 8003de6:	4b29      	ldr	r3, [pc, #164]	; (8003e8c <Kalman_getAngle_roll+0x244>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4619      	mov	r1, r3
 8003dec:	4610      	mov	r0, r2
 8003dee:	f7fc fe99 	bl	8000b24 <__addsf3>
 8003df2:	4603      	mov	r3, r0
 8003df4:	461a      	mov	r2, r3
 8003df6:	4b25      	ldr	r3, [pc, #148]	; (8003e8c <Kalman_getAngle_roll+0x244>)
 8003df8:	601a      	str	r2, [r3, #0]

    // Calculate estimation error covariance - Update the error covariance
    /* Step 7 */
    P00_temp = P[0][0];
 8003dfa:	4b27      	ldr	r3, [pc, #156]	; (8003e98 <Kalman_getAngle_roll+0x250>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a2d      	ldr	r2, [pc, #180]	; (8003eb4 <Kalman_getAngle_roll+0x26c>)
 8003e00:	6013      	str	r3, [r2, #0]
    P01_temp = P[0][1];
 8003e02:	4b25      	ldr	r3, [pc, #148]	; (8003e98 <Kalman_getAngle_roll+0x250>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	4a2c      	ldr	r2, [pc, #176]	; (8003eb8 <Kalman_getAngle_roll+0x270>)
 8003e08:	6013      	str	r3, [r2, #0]

    P[0][0] -= K[0] * P00_temp;
 8003e0a:	4b23      	ldr	r3, [pc, #140]	; (8003e98 <Kalman_getAngle_roll+0x250>)
 8003e0c:	681c      	ldr	r4, [r3, #0]
 8003e0e:	4b27      	ldr	r3, [pc, #156]	; (8003eac <Kalman_getAngle_roll+0x264>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a28      	ldr	r2, [pc, #160]	; (8003eb4 <Kalman_getAngle_roll+0x26c>)
 8003e14:	6812      	ldr	r2, [r2, #0]
 8003e16:	4611      	mov	r1, r2
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fc ff8b 	bl	8000d34 <__aeabi_fmul>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	4619      	mov	r1, r3
 8003e22:	4620      	mov	r0, r4
 8003e24:	f7fc fe7c 	bl	8000b20 <__aeabi_fsub>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	4b1a      	ldr	r3, [pc, #104]	; (8003e98 <Kalman_getAngle_roll+0x250>)
 8003e2e:	601a      	str	r2, [r3, #0]
    P[0][1] -= K[0] * P01_temp;
 8003e30:	4b19      	ldr	r3, [pc, #100]	; (8003e98 <Kalman_getAngle_roll+0x250>)
 8003e32:	685c      	ldr	r4, [r3, #4]
 8003e34:	4b1d      	ldr	r3, [pc, #116]	; (8003eac <Kalman_getAngle_roll+0x264>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a1f      	ldr	r2, [pc, #124]	; (8003eb8 <Kalman_getAngle_roll+0x270>)
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	4611      	mov	r1, r2
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fc ff78 	bl	8000d34 <__aeabi_fmul>
 8003e44:	4603      	mov	r3, r0
 8003e46:	4619      	mov	r1, r3
 8003e48:	4620      	mov	r0, r4
 8003e4a:	f7fc fe69 	bl	8000b20 <__aeabi_fsub>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	461a      	mov	r2, r3
 8003e52:	4b11      	ldr	r3, [pc, #68]	; (8003e98 <Kalman_getAngle_roll+0x250>)
 8003e54:	605a      	str	r2, [r3, #4]
    P[1][0] -= K[1] * P00_temp;
 8003e56:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <Kalman_getAngle_roll+0x250>)
 8003e58:	689c      	ldr	r4, [r3, #8]
 8003e5a:	4b14      	ldr	r3, [pc, #80]	; (8003eac <Kalman_getAngle_roll+0x264>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	4a15      	ldr	r2, [pc, #84]	; (8003eb4 <Kalman_getAngle_roll+0x26c>)
 8003e60:	6812      	ldr	r2, [r2, #0]
 8003e62:	4611      	mov	r1, r2
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fc ff65 	bl	8000d34 <__aeabi_fmul>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4620      	mov	r0, r4
 8003e70:	f7fc fe56 	bl	8000b20 <__aeabi_fsub>
 8003e74:	4603      	mov	r3, r0
 8003e76:	461a      	mov	r2, r3
 8003e78:	4b07      	ldr	r3, [pc, #28]	; (8003e98 <Kalman_getAngle_roll+0x250>)
 8003e7a:	609a      	str	r2, [r3, #8]
    P[1][1] -= K[1] * P01_temp;
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <Kalman_getAngle_roll+0x250>)
 8003e7e:	68dc      	ldr	r4, [r3, #12]
 8003e80:	4b0a      	ldr	r3, [pc, #40]	; (8003eac <Kalman_getAngle_roll+0x264>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	4a0c      	ldr	r2, [pc, #48]	; (8003eb8 <Kalman_getAngle_roll+0x270>)
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	4611      	mov	r1, r2
 8003e8a:	e017      	b.n	8003ebc <Kalman_getAngle_roll+0x274>
 8003e8c:	200002b0 	.word	0x200002b0
 8003e90:	200002b4 	.word	0x200002b4
 8003e94:	200002ac 	.word	0x200002ac
 8003e98:	200002b8 	.word	0x200002b8
 8003e9c:	20000058 	.word	0x20000058
 8003ea0:	2000005c 	.word	0x2000005c
 8003ea4:	20000060 	.word	0x20000060
 8003ea8:	200002c8 	.word	0x200002c8
 8003eac:	200002cc 	.word	0x200002cc
 8003eb0:	200002d4 	.word	0x200002d4
 8003eb4:	200002d8 	.word	0x200002d8
 8003eb8:	200002dc 	.word	0x200002dc
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fc ff39 	bl	8000d34 <__aeabi_fmul>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	f7fc fe2a 	bl	8000b20 <__aeabi_fsub>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	461a      	mov	r2, r3
 8003ed0:	4b03      	ldr	r3, [pc, #12]	; (8003ee0 <Kalman_getAngle_roll+0x298>)
 8003ed2:	60da      	str	r2, [r3, #12]

    return angle;
 8003ed4:	4b03      	ldr	r3, [pc, #12]	; (8003ee4 <Kalman_getAngle_roll+0x29c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
};
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd90      	pop	{r4, r7, pc}
 8003ee0:	200002b8 	.word	0x200002b8
 8003ee4:	200002ac 	.word	0x200002ac

08003ee8 <Kalman_getAngle_pitch>:
//
float Kalman_getAngle_pitch(float newAnglez, float newRatez, float dt) {
 8003ee8:	b590      	push	{r4, r7, lr}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
    ratez = newRatez - biasz;
 8003ef4:	4b8d      	ldr	r3, [pc, #564]	; (800412c <Kalman_getAngle_pitch+0x244>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4619      	mov	r1, r3
 8003efa:	68b8      	ldr	r0, [r7, #8]
 8003efc:	f7fc fe10 	bl	8000b20 <__aeabi_fsub>
 8003f00:	4603      	mov	r3, r0
 8003f02:	461a      	mov	r2, r3
 8003f04:	4b8a      	ldr	r3, [pc, #552]	; (8004130 <Kalman_getAngle_pitch+0x248>)
 8003f06:	601a      	str	r2, [r3, #0]
    anglez += dt * ratez;
 8003f08:	4b89      	ldr	r3, [pc, #548]	; (8004130 <Kalman_getAngle_pitch+0x248>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fc ff10 	bl	8000d34 <__aeabi_fmul>
 8003f14:	4603      	mov	r3, r0
 8003f16:	461a      	mov	r2, r3
 8003f18:	4b86      	ldr	r3, [pc, #536]	; (8004134 <Kalman_getAngle_pitch+0x24c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4610      	mov	r0, r2
 8003f20:	f7fc fe00 	bl	8000b24 <__addsf3>
 8003f24:	4603      	mov	r3, r0
 8003f26:	461a      	mov	r2, r3
 8003f28:	4b82      	ldr	r3, [pc, #520]	; (8004134 <Kalman_getAngle_pitch+0x24c>)
 8003f2a:	601a      	str	r2, [r3, #0]

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
    Pz[0][0] += dt * (dt*Pz[1][1] - Pz[0][1] - Pz[1][0] + Q_anglez);
 8003f2c:	4b82      	ldr	r3, [pc, #520]	; (8004138 <Kalman_getAngle_pitch+0x250>)
 8003f2e:	681c      	ldr	r4, [r3, #0]
 8003f30:	4b81      	ldr	r3, [pc, #516]	; (8004138 <Kalman_getAngle_pitch+0x250>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fc fefc 	bl	8000d34 <__aeabi_fmul>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	461a      	mov	r2, r3
 8003f40:	4b7d      	ldr	r3, [pc, #500]	; (8004138 <Kalman_getAngle_pitch+0x250>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	4619      	mov	r1, r3
 8003f46:	4610      	mov	r0, r2
 8003f48:	f7fc fdea 	bl	8000b20 <__aeabi_fsub>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	461a      	mov	r2, r3
 8003f50:	4b79      	ldr	r3, [pc, #484]	; (8004138 <Kalman_getAngle_pitch+0x250>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	4619      	mov	r1, r3
 8003f56:	4610      	mov	r0, r2
 8003f58:	f7fc fde2 	bl	8000b20 <__aeabi_fsub>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	461a      	mov	r2, r3
 8003f60:	4b76      	ldr	r3, [pc, #472]	; (800413c <Kalman_getAngle_pitch+0x254>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4619      	mov	r1, r3
 8003f66:	4610      	mov	r0, r2
 8003f68:	f7fc fddc 	bl	8000b24 <__addsf3>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fc fedf 	bl	8000d34 <__aeabi_fmul>
 8003f76:	4603      	mov	r3, r0
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4620      	mov	r0, r4
 8003f7c:	f7fc fdd2 	bl	8000b24 <__addsf3>
 8003f80:	4603      	mov	r3, r0
 8003f82:	461a      	mov	r2, r3
 8003f84:	4b6c      	ldr	r3, [pc, #432]	; (8004138 <Kalman_getAngle_pitch+0x250>)
 8003f86:	601a      	str	r2, [r3, #0]
    Pz[0][1] -= dt * Pz[1][1];
 8003f88:	4b6b      	ldr	r3, [pc, #428]	; (8004138 <Kalman_getAngle_pitch+0x250>)
 8003f8a:	685c      	ldr	r4, [r3, #4]
 8003f8c:	4b6a      	ldr	r3, [pc, #424]	; (8004138 <Kalman_getAngle_pitch+0x250>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fc fece 	bl	8000d34 <__aeabi_fmul>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	f7fc fdbf 	bl	8000b20 <__aeabi_fsub>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	4b64      	ldr	r3, [pc, #400]	; (8004138 <Kalman_getAngle_pitch+0x250>)
 8003fa8:	605a      	str	r2, [r3, #4]
    Pz[1][0] -= dt * Pz[1][1];
 8003faa:	4b63      	ldr	r3, [pc, #396]	; (8004138 <Kalman_getAngle_pitch+0x250>)
 8003fac:	689c      	ldr	r4, [r3, #8]
 8003fae:	4b62      	ldr	r3, [pc, #392]	; (8004138 <Kalman_getAngle_pitch+0x250>)
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fc febd 	bl	8000d34 <__aeabi_fmul>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	f7fc fdae 	bl	8000b20 <__aeabi_fsub>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	4b5b      	ldr	r3, [pc, #364]	; (8004138 <Kalman_getAngle_pitch+0x250>)
 8003fca:	609a      	str	r2, [r3, #8]
    Pz[1][1] += (Q_biasz ) * dt;
 8003fcc:	4b5a      	ldr	r3, [pc, #360]	; (8004138 <Kalman_getAngle_pitch+0x250>)
 8003fce:	68dc      	ldr	r4, [r3, #12]
 8003fd0:	4b5b      	ldr	r3, [pc, #364]	; (8004140 <Kalman_getAngle_pitch+0x258>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6879      	ldr	r1, [r7, #4]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fc feac 	bl	8000d34 <__aeabi_fmul>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	f7fc fd9f 	bl	8000b24 <__addsf3>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4b53      	ldr	r3, [pc, #332]	; (8004138 <Kalman_getAngle_pitch+0x250>)
 8003fec:	60da      	str	r2, [r3, #12]

    // Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
    // Calculate Kalman gain - Compute the Kalman gain
    /* Step 4 */
     Sz = Pz[0][0] + R_measurez; // Estimate error
 8003fee:	4b52      	ldr	r3, [pc, #328]	; (8004138 <Kalman_getAngle_pitch+0x250>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a54      	ldr	r2, [pc, #336]	; (8004144 <Kalman_getAngle_pitch+0x25c>)
 8003ff4:	6812      	ldr	r2, [r2, #0]
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fc fd93 	bl	8000b24 <__addsf3>
 8003ffe:	4603      	mov	r3, r0
 8004000:	461a      	mov	r2, r3
 8004002:	4b51      	ldr	r3, [pc, #324]	; (8004148 <Kalman_getAngle_pitch+0x260>)
 8004004:	601a      	str	r2, [r3, #0]
    /* Step 5 */
     // Kalman gain - This is a 2x1 vector
    Kz[0] = Pz[0][0] / Sz;
 8004006:	4b4c      	ldr	r3, [pc, #304]	; (8004138 <Kalman_getAngle_pitch+0x250>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a4f      	ldr	r2, [pc, #316]	; (8004148 <Kalman_getAngle_pitch+0x260>)
 800400c:	6812      	ldr	r2, [r2, #0]
 800400e:	4611      	mov	r1, r2
 8004010:	4618      	mov	r0, r3
 8004012:	f7fc ff43 	bl	8000e9c <__aeabi_fdiv>
 8004016:	4603      	mov	r3, r0
 8004018:	461a      	mov	r2, r3
 800401a:	4b4c      	ldr	r3, [pc, #304]	; (800414c <Kalman_getAngle_pitch+0x264>)
 800401c:	601a      	str	r2, [r3, #0]
    Kz[1] = Pz[1][0] / Sz;
 800401e:	4b46      	ldr	r3, [pc, #280]	; (8004138 <Kalman_getAngle_pitch+0x250>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	4a49      	ldr	r2, [pc, #292]	; (8004148 <Kalman_getAngle_pitch+0x260>)
 8004024:	6812      	ldr	r2, [r2, #0]
 8004026:	4611      	mov	r1, r2
 8004028:	4618      	mov	r0, r3
 800402a:	f7fc ff37 	bl	8000e9c <__aeabi_fdiv>
 800402e:	4603      	mov	r3, r0
 8004030:	461a      	mov	r2, r3
 8004032:	4b46      	ldr	r3, [pc, #280]	; (800414c <Kalman_getAngle_pitch+0x264>)
 8004034:	605a      	str	r2, [r3, #4]

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
     yz = newAnglez - anglez; // Angle difference
 8004036:	4b3f      	ldr	r3, [pc, #252]	; (8004134 <Kalman_getAngle_pitch+0x24c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4619      	mov	r1, r3
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f7fc fd6f 	bl	8000b20 <__aeabi_fsub>
 8004042:	4603      	mov	r3, r0
 8004044:	461a      	mov	r2, r3
 8004046:	4b42      	ldr	r3, [pc, #264]	; (8004150 <Kalman_getAngle_pitch+0x268>)
 8004048:	601a      	str	r2, [r3, #0]
    /* Step 6 */
    anglez += Kz[0] * yz;
 800404a:	4b40      	ldr	r3, [pc, #256]	; (800414c <Kalman_getAngle_pitch+0x264>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a40      	ldr	r2, [pc, #256]	; (8004150 <Kalman_getAngle_pitch+0x268>)
 8004050:	6812      	ldr	r2, [r2, #0]
 8004052:	4611      	mov	r1, r2
 8004054:	4618      	mov	r0, r3
 8004056:	f7fc fe6d 	bl	8000d34 <__aeabi_fmul>
 800405a:	4603      	mov	r3, r0
 800405c:	461a      	mov	r2, r3
 800405e:	4b35      	ldr	r3, [pc, #212]	; (8004134 <Kalman_getAngle_pitch+0x24c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4619      	mov	r1, r3
 8004064:	4610      	mov	r0, r2
 8004066:	f7fc fd5d 	bl	8000b24 <__addsf3>
 800406a:	4603      	mov	r3, r0
 800406c:	461a      	mov	r2, r3
 800406e:	4b31      	ldr	r3, [pc, #196]	; (8004134 <Kalman_getAngle_pitch+0x24c>)
 8004070:	601a      	str	r2, [r3, #0]
    biasz += Kz[1] * yz;
 8004072:	4b36      	ldr	r3, [pc, #216]	; (800414c <Kalman_getAngle_pitch+0x264>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	4a36      	ldr	r2, [pc, #216]	; (8004150 <Kalman_getAngle_pitch+0x268>)
 8004078:	6812      	ldr	r2, [r2, #0]
 800407a:	4611      	mov	r1, r2
 800407c:	4618      	mov	r0, r3
 800407e:	f7fc fe59 	bl	8000d34 <__aeabi_fmul>
 8004082:	4603      	mov	r3, r0
 8004084:	461a      	mov	r2, r3
 8004086:	4b29      	ldr	r3, [pc, #164]	; (800412c <Kalman_getAngle_pitch+0x244>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4619      	mov	r1, r3
 800408c:	4610      	mov	r0, r2
 800408e:	f7fc fd49 	bl	8000b24 <__addsf3>
 8004092:	4603      	mov	r3, r0
 8004094:	461a      	mov	r2, r3
 8004096:	4b25      	ldr	r3, [pc, #148]	; (800412c <Kalman_getAngle_pitch+0x244>)
 8004098:	601a      	str	r2, [r3, #0]

    // Calculate estimation error covariance - Update the error covariance
    /* Step 7 */
    P00_tempz = Pz[0][0];
 800409a:	4b27      	ldr	r3, [pc, #156]	; (8004138 <Kalman_getAngle_pitch+0x250>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a2d      	ldr	r2, [pc, #180]	; (8004154 <Kalman_getAngle_pitch+0x26c>)
 80040a0:	6013      	str	r3, [r2, #0]
    P01_tempz = Pz[0][1];
 80040a2:	4b25      	ldr	r3, [pc, #148]	; (8004138 <Kalman_getAngle_pitch+0x250>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	4a2c      	ldr	r2, [pc, #176]	; (8004158 <Kalman_getAngle_pitch+0x270>)
 80040a8:	6013      	str	r3, [r2, #0]

    Pz[0][0] -= Kz[0] * P00_tempz;
 80040aa:	4b23      	ldr	r3, [pc, #140]	; (8004138 <Kalman_getAngle_pitch+0x250>)
 80040ac:	681c      	ldr	r4, [r3, #0]
 80040ae:	4b27      	ldr	r3, [pc, #156]	; (800414c <Kalman_getAngle_pitch+0x264>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a28      	ldr	r2, [pc, #160]	; (8004154 <Kalman_getAngle_pitch+0x26c>)
 80040b4:	6812      	ldr	r2, [r2, #0]
 80040b6:	4611      	mov	r1, r2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fc fe3b 	bl	8000d34 <__aeabi_fmul>
 80040be:	4603      	mov	r3, r0
 80040c0:	4619      	mov	r1, r3
 80040c2:	4620      	mov	r0, r4
 80040c4:	f7fc fd2c 	bl	8000b20 <__aeabi_fsub>
 80040c8:	4603      	mov	r3, r0
 80040ca:	461a      	mov	r2, r3
 80040cc:	4b1a      	ldr	r3, [pc, #104]	; (8004138 <Kalman_getAngle_pitch+0x250>)
 80040ce:	601a      	str	r2, [r3, #0]
    Pz[0][1] -= Kz[0] * P01_tempz;
 80040d0:	4b19      	ldr	r3, [pc, #100]	; (8004138 <Kalman_getAngle_pitch+0x250>)
 80040d2:	685c      	ldr	r4, [r3, #4]
 80040d4:	4b1d      	ldr	r3, [pc, #116]	; (800414c <Kalman_getAngle_pitch+0x264>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a1f      	ldr	r2, [pc, #124]	; (8004158 <Kalman_getAngle_pitch+0x270>)
 80040da:	6812      	ldr	r2, [r2, #0]
 80040dc:	4611      	mov	r1, r2
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fc fe28 	bl	8000d34 <__aeabi_fmul>
 80040e4:	4603      	mov	r3, r0
 80040e6:	4619      	mov	r1, r3
 80040e8:	4620      	mov	r0, r4
 80040ea:	f7fc fd19 	bl	8000b20 <__aeabi_fsub>
 80040ee:	4603      	mov	r3, r0
 80040f0:	461a      	mov	r2, r3
 80040f2:	4b11      	ldr	r3, [pc, #68]	; (8004138 <Kalman_getAngle_pitch+0x250>)
 80040f4:	605a      	str	r2, [r3, #4]
    Pz[1][0] -= Kz[1] * P00_tempz;
 80040f6:	4b10      	ldr	r3, [pc, #64]	; (8004138 <Kalman_getAngle_pitch+0x250>)
 80040f8:	689c      	ldr	r4, [r3, #8]
 80040fa:	4b14      	ldr	r3, [pc, #80]	; (800414c <Kalman_getAngle_pitch+0x264>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	4a15      	ldr	r2, [pc, #84]	; (8004154 <Kalman_getAngle_pitch+0x26c>)
 8004100:	6812      	ldr	r2, [r2, #0]
 8004102:	4611      	mov	r1, r2
 8004104:	4618      	mov	r0, r3
 8004106:	f7fc fe15 	bl	8000d34 <__aeabi_fmul>
 800410a:	4603      	mov	r3, r0
 800410c:	4619      	mov	r1, r3
 800410e:	4620      	mov	r0, r4
 8004110:	f7fc fd06 	bl	8000b20 <__aeabi_fsub>
 8004114:	4603      	mov	r3, r0
 8004116:	461a      	mov	r2, r3
 8004118:	4b07      	ldr	r3, [pc, #28]	; (8004138 <Kalman_getAngle_pitch+0x250>)
 800411a:	609a      	str	r2, [r3, #8]
    Pz[1][1] -= Kz[1] * P01_tempz;
 800411c:	4b06      	ldr	r3, [pc, #24]	; (8004138 <Kalman_getAngle_pitch+0x250>)
 800411e:	68dc      	ldr	r4, [r3, #12]
 8004120:	4b0a      	ldr	r3, [pc, #40]	; (800414c <Kalman_getAngle_pitch+0x264>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	4a0c      	ldr	r2, [pc, #48]	; (8004158 <Kalman_getAngle_pitch+0x270>)
 8004126:	6812      	ldr	r2, [r2, #0]
 8004128:	4611      	mov	r1, r2
 800412a:	e017      	b.n	800415c <Kalman_getAngle_pitch+0x274>
 800412c:	200002e4 	.word	0x200002e4
 8004130:	200002e8 	.word	0x200002e8
 8004134:	200002e0 	.word	0x200002e0
 8004138:	200002ec 	.word	0x200002ec
 800413c:	2000004c 	.word	0x2000004c
 8004140:	20000050 	.word	0x20000050
 8004144:	20000054 	.word	0x20000054
 8004148:	200002fc 	.word	0x200002fc
 800414c:	20000300 	.word	0x20000300
 8004150:	20000308 	.word	0x20000308
 8004154:	2000030c 	.word	0x2000030c
 8004158:	20000310 	.word	0x20000310
 800415c:	4618      	mov	r0, r3
 800415e:	f7fc fde9 	bl	8000d34 <__aeabi_fmul>
 8004162:	4603      	mov	r3, r0
 8004164:	4619      	mov	r1, r3
 8004166:	4620      	mov	r0, r4
 8004168:	f7fc fcda 	bl	8000b20 <__aeabi_fsub>
 800416c:	4603      	mov	r3, r0
 800416e:	461a      	mov	r2, r3
 8004170:	4b03      	ldr	r3, [pc, #12]	; (8004180 <Kalman_getAngle_pitch+0x298>)
 8004172:	60da      	str	r2, [r3, #12]

    return anglez;
 8004174:	4b03      	ldr	r3, [pc, #12]	; (8004184 <Kalman_getAngle_pitch+0x29c>)
 8004176:	681b      	ldr	r3, [r3, #0]
};
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	bd90      	pop	{r4, r7, pc}
 8004180:	200002ec 	.word	0x200002ec
 8004184:	200002e0 	.word	0x200002e0

08004188 <HAL_GPIO_EXTI_Callback>:
//	KalmanOut[0]=KalmanState;
//	KalmanOut[1]=KalmanUncer;
//}


void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 8004188:	b590      	push	{r4, r7, lr}
 800418a:	b085      	sub	sp, #20
 800418c:	af02      	add	r7, sp, #8
 800418e:	4603      	mov	r3, r0
 8004190:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_11){
 8004192:	88fb      	ldrh	r3, [r7, #6]
 8004194:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004198:	d155      	bne.n	8004246 <HAL_GPIO_EXTI_Callback+0xbe>
		tick = __HAL_TIM_GET_COUNTER(&htim4);
 800419a:	4b2d      	ldr	r3, [pc, #180]	; (8004250 <HAL_GPIO_EXTI_Callback+0xc8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	461a      	mov	r2, r3
 80041a2:	4b2c      	ldr	r3, [pc, #176]	; (8004254 <HAL_GPIO_EXTI_Callback+0xcc>)
 80041a4:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim4,0);
 80041a6:	4b2a      	ldr	r3, [pc, #168]	; (8004250 <HAL_GPIO_EXTI_Callback+0xc8>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2200      	movs	r2, #0
 80041ac:	625a      	str	r2, [r3, #36]	; 0x24
		if(tick < 2008){
 80041ae:	4b29      	ldr	r3, [pc, #164]	; (8004254 <HAL_GPIO_EXTI_Callback+0xcc>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f5b3 6ffb 	cmp.w	r3, #2008	; 0x7d8
 80041b6:	da3f      	bge.n	8004238 <HAL_GPIO_EXTI_Callback+0xb0>
			if(pulse==2){
 80041b8:	4b27      	ldr	r3, [pc, #156]	; (8004258 <HAL_GPIO_EXTI_Callback+0xd0>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d109      	bne.n	80041d6 <HAL_GPIO_EXTI_Callback+0x4e>
//				if(tick<1000) ch[pulse]=ch[pulse];
//				else
					ch[pulse]= tick;
 80041c2:	4b25      	ldr	r3, [pc, #148]	; (8004258 <HAL_GPIO_EXTI_Callback+0xd0>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	4619      	mov	r1, r3
 80041ca:	4b22      	ldr	r3, [pc, #136]	; (8004254 <HAL_GPIO_EXTI_Callback+0xcc>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a23      	ldr	r2, [pc, #140]	; (800425c <HAL_GPIO_EXTI_Callback+0xd4>)
 80041d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80041d4:	e028      	b.n	8004228 <HAL_GPIO_EXTI_Callback+0xa0>
			}
			else if((pulse ==4) || (pulse ==5)){
 80041d6:	4b20      	ldr	r3, [pc, #128]	; (8004258 <HAL_GPIO_EXTI_Callback+0xd0>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b04      	cmp	r3, #4
 80041de:	d004      	beq.n	80041ea <HAL_GPIO_EXTI_Callback+0x62>
 80041e0:	4b1d      	ldr	r3, [pc, #116]	; (8004258 <HAL_GPIO_EXTI_Callback+0xd0>)
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b05      	cmp	r3, #5
 80041e8:	d109      	bne.n	80041fe <HAL_GPIO_EXTI_Callback+0x76>
				ch[pulse]= tick;
 80041ea:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <HAL_GPIO_EXTI_Callback+0xd0>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	4619      	mov	r1, r3
 80041f2:	4b18      	ldr	r3, [pc, #96]	; (8004254 <HAL_GPIO_EXTI_Callback+0xcc>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a19      	ldr	r2, [pc, #100]	; (800425c <HAL_GPIO_EXTI_Callback+0xd4>)
 80041f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80041fc:	e014      	b.n	8004228 <HAL_GPIO_EXTI_Callback+0xa0>
			}
			else{
//				if(tick<1200 || tick >1700 ) ch[pulse]=ch[pulse];
//				else
					ch[pulse]= mapValue(tick, 1200, 1700, 1000, 2000);
 80041fe:	4b15      	ldr	r3, [pc, #84]	; (8004254 <HAL_GPIO_EXTI_Callback+0xcc>)
 8004200:	6818      	ldr	r0, [r3, #0]
 8004202:	4b15      	ldr	r3, [pc, #84]	; (8004258 <HAL_GPIO_EXTI_Callback+0xd0>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	b2db      	uxtb	r3, r3
 8004208:	461c      	mov	r4, r3
 800420a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004214:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8004218:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800421c:	f000 f820 	bl	8004260 <mapValue>
 8004220:	4603      	mov	r3, r0
 8004222:	4a0e      	ldr	r2, [pc, #56]	; (800425c <HAL_GPIO_EXTI_Callback+0xd4>)
 8004224:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				//ch[pulse]= tick;
			}
			pulse++;
 8004228:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <HAL_GPIO_EXTI_Callback+0xd0>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	3301      	adds	r3, #1
 8004230:	b2da      	uxtb	r2, r3
 8004232:	4b09      	ldr	r3, [pc, #36]	; (8004258 <HAL_GPIO_EXTI_Callback+0xd0>)
 8004234:	701a      	strb	r2, [r3, #0]
			pulse = 0;
		}

	}

}
 8004236:	e006      	b.n	8004246 <HAL_GPIO_EXTI_Callback+0xbe>
			__HAL_TIM_SET_COUNTER(&htim4,0);
 8004238:	4b05      	ldr	r3, [pc, #20]	; (8004250 <HAL_GPIO_EXTI_Callback+0xc8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2200      	movs	r2, #0
 800423e:	625a      	str	r2, [r3, #36]	; 0x24
			pulse = 0;
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <HAL_GPIO_EXTI_Callback+0xd0>)
 8004242:	2200      	movs	r2, #0
 8004244:	701a      	strb	r2, [r3, #0]
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	bd90      	pop	{r4, r7, pc}
 800424e:	bf00      	nop
 8004250:	200003f8 	.word	0x200003f8
 8004254:	2000012c 	.word	0x2000012c
 8004258:	20000130 	.word	0x20000130
 800425c:	2000010c 	.word	0x2000010c

08004260 <mapValue>:

int mapValue(int value, int inMin, int inMax, int outMin, int outMax) {
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	603b      	str	r3, [r7, #0]
if (value < inMin) return outMin;
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	429a      	cmp	r2, r3
 8004274:	da01      	bge.n	800427a <mapValue+0x1a>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	e014      	b.n	80042a4 <mapValue+0x44>
else if (value > inMax) return outMax;
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	429a      	cmp	r2, r3
 8004280:	dd01      	ble.n	8004286 <mapValue+0x26>
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	e00e      	b.n	80042a4 <mapValue+0x44>

return (value - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	69b9      	ldr	r1, [r7, #24]
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	1a8a      	subs	r2, r1, r2
 8004292:	fb03 f202 	mul.w	r2, r3, r2
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	1acb      	subs	r3, r1, r3
 800429c:	fb92 f2f3 	sdiv	r2, r2, r3
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	4413      	add	r3, r2
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr
	...

080042b0 <calibrate_gyro>:
void calibrate_gyro(void) {
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  cal_int = 0;                                                                        //Set the cal_int variable to zero.
 80042b4:	4b34      	ldr	r3, [pc, #208]	; (8004388 <calibrate_gyro+0xd8>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
  if (cal_int != 2000) {
 80042ba:	4b33      	ldr	r3, [pc, #204]	; (8004388 <calibrate_gyro+0xd8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80042c2:	d05f      	beq.n	8004384 <calibrate_gyro+0xd4>
    //Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
    for (cal_int = 0; cal_int < 2000 ; cal_int ++) {                                  //Take 2000 readings for calibration.
 80042c4:	4b30      	ldr	r3, [pc, #192]	; (8004388 <calibrate_gyro+0xd8>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	e038      	b.n	800433e <calibrate_gyro+0x8e>
      if (cal_int % 25 == 0) HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);                    //Change the led status every 125 readings to indicate calibration.
 80042cc:	4b2e      	ldr	r3, [pc, #184]	; (8004388 <calibrate_gyro+0xd8>)
 80042ce:	6819      	ldr	r1, [r3, #0]
 80042d0:	4b2e      	ldr	r3, [pc, #184]	; (800438c <calibrate_gyro+0xdc>)
 80042d2:	fb83 2301 	smull	r2, r3, r3, r1
 80042d6:	10da      	asrs	r2, r3, #3
 80042d8:	17cb      	asrs	r3, r1, #31
 80042da:	1ad2      	subs	r2, r2, r3
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	009a      	lsls	r2, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	1aca      	subs	r2, r1, r3
 80042e8:	2a00      	cmp	r2, #0
 80042ea:	d103      	bne.n	80042f4 <calibrate_gyro+0x44>
 80042ec:	2104      	movs	r1, #4
 80042ee:	4828      	ldr	r0, [pc, #160]	; (8004390 <calibrate_gyro+0xe0>)
 80042f0:	f002 f824 	bl	800633c <HAL_GPIO_TogglePin>
      gyro_signalen();                                                                //Read the gyro output.
 80042f4:	f000 f85c 	bl	80043b0 <gyro_signalen>
      gyro_x_cal += gyro_x;                                                     //Ad roll value to gyro_roll_cal.
 80042f8:	4b26      	ldr	r3, [pc, #152]	; (8004394 <calibrate_gyro+0xe4>)
 80042fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042fe:	461a      	mov	r2, r3
 8004300:	4b25      	ldr	r3, [pc, #148]	; (8004398 <calibrate_gyro+0xe8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4413      	add	r3, r2
 8004306:	4a24      	ldr	r2, [pc, #144]	; (8004398 <calibrate_gyro+0xe8>)
 8004308:	6013      	str	r3, [r2, #0]
      gyro_y_cal += gyro_y;                                                   //Ad pitch value to gyro_pitch_cal.
 800430a:	4b24      	ldr	r3, [pc, #144]	; (800439c <calibrate_gyro+0xec>)
 800430c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004310:	461a      	mov	r2, r3
 8004312:	4b23      	ldr	r3, [pc, #140]	; (80043a0 <calibrate_gyro+0xf0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4413      	add	r3, r2
 8004318:	4a21      	ldr	r2, [pc, #132]	; (80043a0 <calibrate_gyro+0xf0>)
 800431a:	6013      	str	r3, [r2, #0]
      gyro_z_cal += gyro_z;                                                       //Ad yaw value to gyro_yaw_cal.
 800431c:	4b21      	ldr	r3, [pc, #132]	; (80043a4 <calibrate_gyro+0xf4>)
 800431e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004322:	461a      	mov	r2, r3
 8004324:	4b20      	ldr	r3, [pc, #128]	; (80043a8 <calibrate_gyro+0xf8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4413      	add	r3, r2
 800432a:	4a1f      	ldr	r2, [pc, #124]	; (80043a8 <calibrate_gyro+0xf8>)
 800432c:	6013      	str	r3, [r2, #0]
      HAL_Delay(4);                                                                       //Small delay to simulate a 250Hz loop during calibration.
 800432e:	2004      	movs	r0, #4
 8004330:	f001 fd36 	bl	8005da0 <HAL_Delay>
    for (cal_int = 0; cal_int < 2000 ; cal_int ++) {                                  //Take 2000 readings for calibration.
 8004334:	4b14      	ldr	r3, [pc, #80]	; (8004388 <calibrate_gyro+0xd8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3301      	adds	r3, #1
 800433a:	4a13      	ldr	r2, [pc, #76]	; (8004388 <calibrate_gyro+0xd8>)
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	4b12      	ldr	r3, [pc, #72]	; (8004388 <calibrate_gyro+0xd8>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004346:	dbc1      	blt.n	80042cc <calibrate_gyro+0x1c>
    }
    //red_led(HIGH);                                                                     //Set output PB3 low.
    //Now that we have 2000 measures, we need to devide by 2000 to get the average gyro offset.
    gyro_x_cal /= 2000;                                                            //Divide the roll total by 2000.
 8004348:	4b13      	ldr	r3, [pc, #76]	; (8004398 <calibrate_gyro+0xe8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a17      	ldr	r2, [pc, #92]	; (80043ac <calibrate_gyro+0xfc>)
 800434e:	fb82 1203 	smull	r1, r2, r2, r3
 8004352:	11d2      	asrs	r2, r2, #7
 8004354:	17db      	asrs	r3, r3, #31
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	4a0f      	ldr	r2, [pc, #60]	; (8004398 <calibrate_gyro+0xe8>)
 800435a:	6013      	str	r3, [r2, #0]
    gyro_y_cal /= 2000;                                                           //Divide the pitch total by 2000.
 800435c:	4b10      	ldr	r3, [pc, #64]	; (80043a0 <calibrate_gyro+0xf0>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a12      	ldr	r2, [pc, #72]	; (80043ac <calibrate_gyro+0xfc>)
 8004362:	fb82 1203 	smull	r1, r2, r2, r3
 8004366:	11d2      	asrs	r2, r2, #7
 8004368:	17db      	asrs	r3, r3, #31
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	4a0c      	ldr	r2, [pc, #48]	; (80043a0 <calibrate_gyro+0xf0>)
 800436e:	6013      	str	r3, [r2, #0]
    gyro_z_cal /= 2000;                                                             //Divide the yaw total by 2000.
 8004370:	4b0d      	ldr	r3, [pc, #52]	; (80043a8 <calibrate_gyro+0xf8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a0d      	ldr	r2, [pc, #52]	; (80043ac <calibrate_gyro+0xfc>)
 8004376:	fb82 1203 	smull	r1, r2, r2, r3
 800437a:	11d2      	asrs	r2, r2, #7
 800437c:	17db      	asrs	r3, r3, #31
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	4a09      	ldr	r2, [pc, #36]	; (80043a8 <calibrate_gyro+0xf8>)
 8004382:	6013      	str	r3, [r2, #0]
  }
}
 8004384:	bf00      	nop
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20000210 	.word	0x20000210
 800438c:	51eb851f 	.word	0x51eb851f
 8004390:	40010c00 	.word	0x40010c00
 8004394:	20000222 	.word	0x20000222
 8004398:	20000214 	.word	0x20000214
 800439c:	20000224 	.word	0x20000224
 80043a0:	20000218 	.word	0x20000218
 80043a4:	20000226 	.word	0x20000226
 80043a8:	2000021c 	.word	0x2000021c
 80043ac:	10624dd3 	.word	0x10624dd3

080043b0 <gyro_signalen>:
void gyro_signalen(void) {
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
//  temperature = HWire.read() << 8 | HWire.read();              //Add the low and high byte to the temperature variable.
//  gyro_roll = HWire.read() << 8 | HWire.read();                //Read high and low part of the angular data.
//  gyro_pitch = HWire.read() << 8 | HWire.read();               //Read high and low part of the angular data.
//  gyro_yaw = HWire.read() << 8 | HWire.read();                 //Read high and low part of the angular data.
	//update_accel_gyro(&mpu);
	if(updateMPU(&mpu)==1){
 80043b4:	482e      	ldr	r0, [pc, #184]	; (8004470 <gyro_signalen+0xc0>)
 80043b6:	f7fc ff53 	bl	8001260 <updateMPU>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d142      	bne.n	8004446 <gyro_signalen+0x96>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 80043c0:	2200      	movs	r2, #0
 80043c2:	2104      	movs	r1, #4
 80043c4:	482b      	ldr	r0, [pc, #172]	; (8004474 <gyro_signalen+0xc4>)
 80043c6:	f001 ffa1 	bl	800630c <HAL_GPIO_WritePin>
//  if (level_calibration_on == 0) {
//    acc_y -= acc_pitch_cal_value;                              //Subtact the manual accelerometer pitch calibration value.
//    acc_x -= acc_roll_cal_value;                               //Subtact the manual accelerometer roll calibration value.
//  }

    gyro_x = mpu.g[0] - 2.57;                                  //Subtact the manual gyro roll calibration value.
 80043ca:	4b29      	ldr	r3, [pc, #164]	; (8004470 <gyro_signalen+0xc0>)
 80043cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fc f822 	bl	8000418 <__aeabi_f2d>
 80043d4:	a320      	add	r3, pc, #128	; (adr r3, 8004458 <gyro_signalen+0xa8>)
 80043d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043da:	f7fb febd 	bl	8000158 <__aeabi_dsub>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4610      	mov	r0, r2
 80043e4:	4619      	mov	r1, r3
 80043e6:	f7fc fb1f 	bl	8000a28 <__aeabi_d2iz>
 80043ea:	4603      	mov	r3, r0
 80043ec:	b21a      	sxth	r2, r3
 80043ee:	4b22      	ldr	r3, [pc, #136]	; (8004478 <gyro_signalen+0xc8>)
 80043f0:	801a      	strh	r2, [r3, #0]
    gyro_y = mpu.g[1] + 2.1;                                //Subtact the manual gyro pitch calibration value.
 80043f2:	4b1f      	ldr	r3, [pc, #124]	; (8004470 <gyro_signalen+0xc0>)
 80043f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fc f80e 	bl	8000418 <__aeabi_f2d>
 80043fc:	a318      	add	r3, pc, #96	; (adr r3, 8004460 <gyro_signalen+0xb0>)
 80043fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004402:	f7fb feab 	bl	800015c <__adddf3>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	4610      	mov	r0, r2
 800440c:	4619      	mov	r1, r3
 800440e:	f7fc fb0b 	bl	8000a28 <__aeabi_d2iz>
 8004412:	4603      	mov	r3, r0
 8004414:	b21a      	sxth	r2, r3
 8004416:	4b19      	ldr	r3, [pc, #100]	; (800447c <gyro_signalen+0xcc>)
 8004418:	801a      	strh	r2, [r3, #0]
    gyro_z = mpu.g[2] - 0.035;                                    //Subtact the manual gyro yaw calibration value.
 800441a:	4b15      	ldr	r3, [pc, #84]	; (8004470 <gyro_signalen+0xc0>)
 800441c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004420:	4618      	mov	r0, r3
 8004422:	f7fb fff9 	bl	8000418 <__aeabi_f2d>
 8004426:	a310      	add	r3, pc, #64	; (adr r3, 8004468 <gyro_signalen+0xb8>)
 8004428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442c:	f7fb fe94 	bl	8000158 <__aeabi_dsub>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4610      	mov	r0, r2
 8004436:	4619      	mov	r1, r3
 8004438:	f7fc faf6 	bl	8000a28 <__aeabi_d2iz>
 800443c:	4603      	mov	r3, r0
 800443e:	b21a      	sxth	r2, r3
 8004440:	4b0f      	ldr	r3, [pc, #60]	; (8004480 <gyro_signalen+0xd0>)
 8004442:	801a      	strh	r2, [r3, #0]

	}
	else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
}
 8004444:	e004      	b.n	8004450 <gyro_signalen+0xa0>
	else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8004446:	2201      	movs	r2, #1
 8004448:	2104      	movs	r1, #4
 800444a:	480a      	ldr	r0, [pc, #40]	; (8004474 <gyro_signalen+0xc4>)
 800444c:	f001 ff5e 	bl	800630c <HAL_GPIO_WritePin>
}
 8004450:	bf00      	nop
 8004452:	bd80      	pop	{r7, pc}
 8004454:	f3af 8000 	nop.w
 8004458:	28f5c28f 	.word	0x28f5c28f
 800445c:	40048f5c 	.word	0x40048f5c
 8004460:	cccccccd 	.word	0xcccccccd
 8004464:	4000cccc 	.word	0x4000cccc
 8004468:	1eb851ec 	.word	0x1eb851ec
 800446c:	3fa1eb85 	.word	0x3fa1eb85
 8004470:	20000134 	.word	0x20000134
 8004474:	40010c00 	.word	0x40010c00
 8004478:	20000222 	.word	0x20000222
 800447c:	20000224 	.word	0x20000224
 8004480:	20000226 	.word	0x20000226
 8004484:	00000000 	.word	0x00000000

08004488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004488:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800448c:	b082      	sub	sp, #8
 800448e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004490:	f001 fc24 	bl	8005cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004494:	f001 f8b4 	bl	8005600 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_TIM4_Init();
 8004498:	f001 f9ec 	bl	8005874 <MX_TIM4_Init>
  MX_TIM3_Init();
 800449c:	f001 f970 	bl	8005780 <MX_TIM3_Init>
  MX_I2C1_Init();
 80044a0:	f001 f8f4 	bl	800568c <MX_I2C1_Init>
  MX_TIM2_Init();
 80044a4:	f001 f920 	bl	80056e8 <MX_TIM2_Init>
  MX_GPIO_Init();
 80044a8:	f001 fa32 	bl	8005910 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 80044ac:	481e      	ldr	r0, [pc, #120]	; (8004528 <main+0xa0>)
 80044ae:	f003 fbf7 	bl	8007ca0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 80044b2:	481e      	ldr	r0, [pc, #120]	; (800452c <main+0xa4>)
 80044b4:	f003 fbf4 	bl	8007ca0 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80044b8:	2100      	movs	r1, #0
 80044ba:	481d      	ldr	r0, [pc, #116]	; (8004530 <main+0xa8>)
 80044bc:	f003 fc8a 	bl	8007dd4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80044c0:	2104      	movs	r1, #4
 80044c2:	481b      	ldr	r0, [pc, #108]	; (8004530 <main+0xa8>)
 80044c4:	f003 fc86 	bl	8007dd4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80044c8:	2108      	movs	r1, #8
 80044ca:	4819      	ldr	r0, [pc, #100]	; (8004530 <main+0xa8>)
 80044cc:	f003 fc82 	bl	8007dd4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80044d0:	210c      	movs	r1, #12
 80044d2:	4817      	ldr	r0, [pc, #92]	; (8004530 <main+0xa8>)
 80044d4:	f003 fc7e 	bl	8007dd4 <HAL_TIM_PWM_Start>
    HAL_Delay(10);
 80044d8:	200a      	movs	r0, #10
 80044da:	f001 fc61 	bl	8005da0 <HAL_Delay>
     __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 80044de:	4b14      	ldr	r3, [pc, #80]	; (8004530 <main+0xa8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2200      	movs	r2, #0
 80044e4:	635a      	str	r2, [r3, #52]	; 0x34
     __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
 80044e6:	4b12      	ldr	r3, [pc, #72]	; (8004530 <main+0xa8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2200      	movs	r2, #0
 80044ec:	639a      	str	r2, [r3, #56]	; 0x38
     __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 80044ee:	4b10      	ldr	r3, [pc, #64]	; (8004530 <main+0xa8>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2200      	movs	r2, #0
 80044f4:	63da      	str	r2, [r3, #60]	; 0x3c
     __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 80044f6:	4b0e      	ldr	r3, [pc, #56]	; (8004530 <main+0xa8>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2200      	movs	r2, #0
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40
     HAL_Delay(10);
 80044fe:	200a      	movs	r0, #10
 8004500:	f001 fc4e 	bl	8005da0 <HAL_Delay>

     MPU9250SetDefault(&mpu);
 8004504:	480b      	ldr	r0, [pc, #44]	; (8004534 <main+0xac>)
 8004506:	f7fd fccf 	bl	8001ea8 <MPU9250SetDefault>
          while(!(setupMPU(&mpu, MPU9250_ADDRESS)==1)) {
 800450a:	bf00      	nop
 800450c:	21d0      	movs	r1, #208	; 0xd0
 800450e:	4809      	ldr	r0, [pc, #36]	; (8004534 <main+0xac>)
 8004510:	f7fc fe12 	bl	8001138 <setupMPU>
 8004514:	4603      	mov	r3, r0
 8004516:	2b01      	cmp	r3, #1
 8004518:	d1f8      	bne.n	800450c <main+0x84>
         //	 int i;
         //	 for (i=0;i<50;i++){HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);}
          }
          HAL_Delay(100);
 800451a:	2064      	movs	r0, #100	; 0x64
 800451c:	f001 fc40 	bl	8005da0 <HAL_Delay>

          int i;
          for(i=0;i<100;i++){
 8004520:	2300      	movs	r3, #0
 8004522:	607b      	str	r3, [r7, #4]
 8004524:	e019      	b.n	800455a <main+0xd2>
 8004526:	bf00      	nop
 8004528:	200003f8 	.word	0x200003f8
 800452c:	20000368 	.word	0x20000368
 8004530:	200003b0 	.word	0x200003b0
 8004534:	20000134 	.word	0x20000134
               if(updateMPU(&mpu)==1){
 8004538:	48bd      	ldr	r0, [pc, #756]	; (8004830 <main+0x3a8>)
 800453a:	f7fc fe91 	bl	8001260 <updateMPU>
 800453e:	4603      	mov	r3, r0
 8004540:	2b01      	cmp	r3, #1
 8004542:	d107      	bne.n	8004554 <main+0xcc>
              	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,1);
 8004544:	2201      	movs	r2, #1
 8004546:	2104      	movs	r1, #4
 8004548:	48ba      	ldr	r0, [pc, #744]	; (8004834 <main+0x3ac>)
 800454a:	f001 fedf 	bl	800630c <HAL_GPIO_WritePin>
              	 HAL_Delay(100);
 800454e:	2064      	movs	r0, #100	; 0x64
 8004550:	f001 fc26 	bl	8005da0 <HAL_Delay>
          for(i=0;i<100;i++){
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3301      	adds	r3, #1
 8004558:	607b      	str	r3, [r7, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b63      	cmp	r3, #99	; 0x63
 800455e:	ddeb      	ble.n	8004538 <main+0xb0>
               }
           }

          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8004560:	2200      	movs	r2, #0
 8004562:	2104      	movs	r1, #4
 8004564:	48b3      	ldr	r0, [pc, #716]	; (8004834 <main+0x3ac>)
 8004566:	f001 fed1 	bl	800630c <HAL_GPIO_WritePin>
          HAL_Delay(2000);
 800456a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800456e:	f001 fc17 	bl	8005da0 <HAL_Delay>
          calibrate_gyro();
 8004572:	f7ff fe9d 	bl	80042b0 <calibrate_gyro>
          loop_timer = __HAL_TIM_GET_COUNTER(&htim2);
 8004576:	4bb0      	ldr	r3, [pc, #704]	; (8004838 <main+0x3b0>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	b29a      	uxth	r2, r3
 800457e:	4baf      	ldr	r3, [pc, #700]	; (800483c <main+0x3b4>)
 8004580:	801a      	strh	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//uint32_t dau = HAL_GetTick();
 	  	  receiver_input_channel_1 = ch[2]; //thr
 8004582:	4baf      	ldr	r3, [pc, #700]	; (8004840 <main+0x3b8>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	4aaf      	ldr	r2, [pc, #700]	; (8004844 <main+0x3bc>)
 8004588:	6013      	str	r3, [r2, #0]
	 	  receiver_input_channel_2 = ch[0]; //roll
 800458a:	4bad      	ldr	r3, [pc, #692]	; (8004840 <main+0x3b8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4aae      	ldr	r2, [pc, #696]	; (8004848 <main+0x3c0>)
 8004590:	6013      	str	r3, [r2, #0]
	 	  receiver_input_channel_3 = ch[1];	//pitch
 8004592:	4bab      	ldr	r3, [pc, #684]	; (8004840 <main+0x3b8>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	4aad      	ldr	r2, [pc, #692]	; (800484c <main+0x3c4>)
 8004598:	6013      	str	r3, [r2, #0]
	 	  receiver_input_channel_4 = ch[3]; //yaw
 800459a:	4ba9      	ldr	r3, [pc, #676]	; (8004840 <main+0x3b8>)
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	4aac      	ldr	r2, [pc, #688]	; (8004850 <main+0x3c8>)
 80045a0:	6013      	str	r3, [r2, #0]
	 	  receiver_input_channel_5 = ch[4];	 //sw left
 80045a2:	4ba7      	ldr	r3, [pc, #668]	; (8004840 <main+0x3b8>)
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	4aab      	ldr	r2, [pc, #684]	; (8004854 <main+0x3cc>)
 80045a8:	6013      	str	r3, [r2, #0]
	 	  receiver_input_channel_6 = ch[5]; //sw right
 80045aa:	4ba5      	ldr	r3, [pc, #660]	; (8004840 <main+0x3b8>)
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	4aaa      	ldr	r2, [pc, #680]	; (8004858 <main+0x3d0>)
 80045b0:	6013      	str	r3, [r2, #0]
//	 			  gyro_x = mpu.g[0]-2.53;
//	 			  gyro_y = mpu.g[1]-(-1.95);
//	 			  gyro_z = mpu.g[2]-(-0.06);
//	 			 // HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
//	 	 }
	 	gyro_signalen();
 80045b2:	f7ff fefd 	bl	80043b0 <gyro_signalen>
//	 		 			  gyro_x = mpu.g[0]-2.53;
//	 		 			  gyro_y = mpu.g[1]-(-1.95);
//	 		 			  gyro_z = mpu.g[2]-(-0.15);
	 	gyro_pitch_input 	= ( gyro_pitch_input * 0.7 ) + (float)( gyro_y  * 0.3);
 80045b6:	4ba9      	ldr	r3, [pc, #676]	; (800485c <main+0x3d4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fb ff2c 	bl	8000418 <__aeabi_f2d>
 80045c0:	a38f      	add	r3, pc, #572	; (adr r3, 8004800 <main+0x378>)
 80045c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c6:	f7fb ff7f 	bl	80004c8 <__aeabi_dmul>
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	4614      	mov	r4, r2
 80045d0:	461d      	mov	r5, r3
 80045d2:	4ba3      	ldr	r3, [pc, #652]	; (8004860 <main+0x3d8>)
 80045d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fb ff0b 	bl	80003f4 <__aeabi_i2d>
 80045de:	a38a      	add	r3, pc, #552	; (adr r3, 8004808 <main+0x380>)
 80045e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e4:	f7fb ff70 	bl	80004c8 <__aeabi_dmul>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4610      	mov	r0, r2
 80045ee:	4619      	mov	r1, r3
 80045f0:	f7fc fa42 	bl	8000a78 <__aeabi_d2f>
 80045f4:	4603      	mov	r3, r0
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fb ff0e 	bl	8000418 <__aeabi_f2d>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4620      	mov	r0, r4
 8004602:	4629      	mov	r1, r5
 8004604:	f7fb fdaa 	bl	800015c <__adddf3>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4610      	mov	r0, r2
 800460e:	4619      	mov	r1, r3
 8004610:	f7fc fa32 	bl	8000a78 <__aeabi_d2f>
 8004614:	4603      	mov	r3, r0
 8004616:	4a91      	ldr	r2, [pc, #580]	; (800485c <main+0x3d4>)
 8004618:	6013      	str	r3, [r2, #0]
	 	gyro_roll_input 	= ( gyro_roll_input * 0.7 ) + (float)( gyro_x  * 0.3);
 800461a:	4b92      	ldr	r3, [pc, #584]	; (8004864 <main+0x3dc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f7fb fefa 	bl	8000418 <__aeabi_f2d>
 8004624:	a376      	add	r3, pc, #472	; (adr r3, 8004800 <main+0x378>)
 8004626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462a:	f7fb ff4d 	bl	80004c8 <__aeabi_dmul>
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	4614      	mov	r4, r2
 8004634:	461d      	mov	r5, r3
 8004636:	4b8c      	ldr	r3, [pc, #560]	; (8004868 <main+0x3e0>)
 8004638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800463c:	4618      	mov	r0, r3
 800463e:	f7fb fed9 	bl	80003f4 <__aeabi_i2d>
 8004642:	a371      	add	r3, pc, #452	; (adr r3, 8004808 <main+0x380>)
 8004644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004648:	f7fb ff3e 	bl	80004c8 <__aeabi_dmul>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	4610      	mov	r0, r2
 8004652:	4619      	mov	r1, r3
 8004654:	f7fc fa10 	bl	8000a78 <__aeabi_d2f>
 8004658:	4603      	mov	r3, r0
 800465a:	4618      	mov	r0, r3
 800465c:	f7fb fedc 	bl	8000418 <__aeabi_f2d>
 8004660:	4602      	mov	r2, r0
 8004662:	460b      	mov	r3, r1
 8004664:	4620      	mov	r0, r4
 8004666:	4629      	mov	r1, r5
 8004668:	f7fb fd78 	bl	800015c <__adddf3>
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	4610      	mov	r0, r2
 8004672:	4619      	mov	r1, r3
 8004674:	f7fc fa00 	bl	8000a78 <__aeabi_d2f>
 8004678:	4603      	mov	r3, r0
 800467a:	4a7a      	ldr	r2, [pc, #488]	; (8004864 <main+0x3dc>)
 800467c:	6013      	str	r3, [r2, #0]
	 	gyro_yaw_input 	= ( gyro_yaw_input * 0.7 ) + (float)( -gyro_z  * 0.3);
 800467e:	4b7b      	ldr	r3, [pc, #492]	; (800486c <main+0x3e4>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	f7fb fec8 	bl	8000418 <__aeabi_f2d>
 8004688:	a35d      	add	r3, pc, #372	; (adr r3, 8004800 <main+0x378>)
 800468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468e:	f7fb ff1b 	bl	80004c8 <__aeabi_dmul>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	4614      	mov	r4, r2
 8004698:	461d      	mov	r5, r3
 800469a:	4b75      	ldr	r3, [pc, #468]	; (8004870 <main+0x3e8>)
 800469c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046a0:	425b      	negs	r3, r3
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fb fea6 	bl	80003f4 <__aeabi_i2d>
 80046a8:	a357      	add	r3, pc, #348	; (adr r3, 8004808 <main+0x380>)
 80046aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ae:	f7fb ff0b 	bl	80004c8 <__aeabi_dmul>
 80046b2:	4602      	mov	r2, r0
 80046b4:	460b      	mov	r3, r1
 80046b6:	4610      	mov	r0, r2
 80046b8:	4619      	mov	r1, r3
 80046ba:	f7fc f9dd 	bl	8000a78 <__aeabi_d2f>
 80046be:	4603      	mov	r3, r0
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fb fea9 	bl	8000418 <__aeabi_f2d>
 80046c6:	4602      	mov	r2, r0
 80046c8:	460b      	mov	r3, r1
 80046ca:	4620      	mov	r0, r4
 80046cc:	4629      	mov	r1, r5
 80046ce:	f7fb fd45 	bl	800015c <__adddf3>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4610      	mov	r0, r2
 80046d8:	4619      	mov	r1, r3
 80046da:	f7fc f9cd 	bl	8000a78 <__aeabi_d2f>
 80046de:	4603      	mov	r3, r0
 80046e0:	4a62      	ldr	r2, [pc, #392]	; (800486c <main+0x3e4>)
 80046e2:	6013      	str	r3, [r2, #0]
	 	//angle_yaw = angle_yaw_acc;

//	 	 angle_pitch_acc_1 -= 0.57;		// -0.08
//	 	 angle_roll_acc_1 -= -0.427;		// -1
//
	 	angle_pitch_acc = Kalman_getAngle_pitch((-(mpu.rpy[1] + 1.57)), mpu.g[1], 0.006);//(-(mpu.rpy[1] + 1.42));
 80046e4:	4b52      	ldr	r3, [pc, #328]	; (8004830 <main+0x3a8>)
 80046e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fb fe94 	bl	8000418 <__aeabi_f2d>
 80046f0:	a347      	add	r3, pc, #284	; (adr r3, 8004810 <main+0x388>)
 80046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f6:	f7fb fd31 	bl	800015c <__adddf3>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4610      	mov	r0, r2
 8004700:	4619      	mov	r1, r3
 8004702:	f7fc f9b9 	bl	8000a78 <__aeabi_d2f>
 8004706:	4603      	mov	r3, r0
 8004708:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800470c:	4a48      	ldr	r2, [pc, #288]	; (8004830 <main+0x3a8>)
 800470e:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
 8004710:	4a58      	ldr	r2, [pc, #352]	; (8004874 <main+0x3ec>)
 8004712:	4618      	mov	r0, r3
 8004714:	f7ff fbe8 	bl	8003ee8 <Kalman_getAngle_pitch>
 8004718:	4603      	mov	r3, r0
 800471a:	4a57      	ldr	r2, [pc, #348]	; (8004878 <main+0x3f0>)
 800471c:	6013      	str	r3, [r2, #0]
	 	angle_roll_acc = Kalman_getAngle_roll((mpu.rpy[0] + 0.38), mpu.g[0], 0.006);//(mpu.rpy[0] + 0.38);
 800471e:	4b44      	ldr	r3, [pc, #272]	; (8004830 <main+0x3a8>)
 8004720:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004724:	4618      	mov	r0, r3
 8004726:	f7fb fe77 	bl	8000418 <__aeabi_f2d>
 800472a:	a33b      	add	r3, pc, #236	; (adr r3, 8004818 <main+0x390>)
 800472c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004730:	f7fb fd14 	bl	800015c <__adddf3>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4610      	mov	r0, r2
 800473a:	4619      	mov	r1, r3
 800473c:	f7fc f99c 	bl	8000a78 <__aeabi_d2f>
 8004740:	4b3b      	ldr	r3, [pc, #236]	; (8004830 <main+0x3a8>)
 8004742:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004744:	4a4b      	ldr	r2, [pc, #300]	; (8004874 <main+0x3ec>)
 8004746:	4619      	mov	r1, r3
 8004748:	f7ff fa7e 	bl	8003c48 <Kalman_getAngle_roll>
 800474c:	4603      	mov	r3, r0
 800474e:	4a4b      	ldr	r2, [pc, #300]	; (800487c <main+0x3f4>)
 8004750:	6013      	str	r3, [r2, #0]

	 	if ( set_gyro_angle ) {
 8004752:	4b4b      	ldr	r3, [pc, #300]	; (8004880 <main+0x3f8>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 8098 	beq.w	800488c <main+0x404>
	 		angle_pitch = angle_pitch * 0.8 + angle_pitch_acc * 0.2;
 800475c:	4b49      	ldr	r3, [pc, #292]	; (8004884 <main+0x3fc>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f7fb fe59 	bl	8000418 <__aeabi_f2d>
 8004766:	a32e      	add	r3, pc, #184	; (adr r3, 8004820 <main+0x398>)
 8004768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476c:	f7fb feac 	bl	80004c8 <__aeabi_dmul>
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	4614      	mov	r4, r2
 8004776:	461d      	mov	r5, r3
 8004778:	4b3f      	ldr	r3, [pc, #252]	; (8004878 <main+0x3f0>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f7fb fe4b 	bl	8000418 <__aeabi_f2d>
 8004782:	a329      	add	r3, pc, #164	; (adr r3, 8004828 <main+0x3a0>)
 8004784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004788:	f7fb fe9e 	bl	80004c8 <__aeabi_dmul>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	4620      	mov	r0, r4
 8004792:	4629      	mov	r1, r5
 8004794:	f7fb fce2 	bl	800015c <__adddf3>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	4610      	mov	r0, r2
 800479e:	4619      	mov	r1, r3
 80047a0:	f7fc f96a 	bl	8000a78 <__aeabi_d2f>
 80047a4:	4603      	mov	r3, r0
 80047a6:	4a37      	ldr	r2, [pc, #220]	; (8004884 <main+0x3fc>)
 80047a8:	6013      	str	r3, [r2, #0]
	 		angle_roll = angle_roll * 0.8 + angle_roll_acc * 0.2;
 80047aa:	4b37      	ldr	r3, [pc, #220]	; (8004888 <main+0x400>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fb fe32 	bl	8000418 <__aeabi_f2d>
 80047b4:	a31a      	add	r3, pc, #104	; (adr r3, 8004820 <main+0x398>)
 80047b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ba:	f7fb fe85 	bl	80004c8 <__aeabi_dmul>
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	4614      	mov	r4, r2
 80047c4:	461d      	mov	r5, r3
 80047c6:	4b2d      	ldr	r3, [pc, #180]	; (800487c <main+0x3f4>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fb fe24 	bl	8000418 <__aeabi_f2d>
 80047d0:	a315      	add	r3, pc, #84	; (adr r3, 8004828 <main+0x3a0>)
 80047d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d6:	f7fb fe77 	bl	80004c8 <__aeabi_dmul>
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	4620      	mov	r0, r4
 80047e0:	4629      	mov	r1, r5
 80047e2:	f7fb fcbb 	bl	800015c <__adddf3>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	4610      	mov	r0, r2
 80047ec:	4619      	mov	r1, r3
 80047ee:	f7fc f943 	bl	8000a78 <__aeabi_d2f>
 80047f2:	4603      	mov	r3, r0
 80047f4:	4a24      	ldr	r2, [pc, #144]	; (8004888 <main+0x400>)
 80047f6:	6013      	str	r3, [r2, #0]
 80047f8:	e075      	b.n	80048e6 <main+0x45e>
 80047fa:	bf00      	nop
 80047fc:	f3af 8000 	nop.w
 8004800:	66666666 	.word	0x66666666
 8004804:	3fe66666 	.word	0x3fe66666
 8004808:	33333333 	.word	0x33333333
 800480c:	3fd33333 	.word	0x3fd33333
 8004810:	51eb851f 	.word	0x51eb851f
 8004814:	3ff91eb8 	.word	0x3ff91eb8
 8004818:	851eb852 	.word	0x851eb852
 800481c:	3fd851eb 	.word	0x3fd851eb
 8004820:	9999999a 	.word	0x9999999a
 8004824:	3fe99999 	.word	0x3fe99999
 8004828:	9999999a 	.word	0x9999999a
 800482c:	3fc99999 	.word	0x3fc99999
 8004830:	20000134 	.word	0x20000134
 8004834:	40010c00 	.word	0x40010c00
 8004838:	20000368 	.word	0x20000368
 800483c:	20000220 	.word	0x20000220
 8004840:	2000010c 	.word	0x2000010c
 8004844:	200001f4 	.word	0x200001f4
 8004848:	200001f8 	.word	0x200001f8
 800484c:	200001fc 	.word	0x200001fc
 8004850:	20000200 	.word	0x20000200
 8004854:	20000204 	.word	0x20000204
 8004858:	20000208 	.word	0x20000208
 800485c:	2000024c 	.word	0x2000024c
 8004860:	20000224 	.word	0x20000224
 8004864:	20000248 	.word	0x20000248
 8004868:	20000222 	.word	0x20000222
 800486c:	20000250 	.word	0x20000250
 8004870:	20000226 	.word	0x20000226
 8004874:	3bc49ba6 	.word	0x3bc49ba6
 8004878:	2000023c 	.word	0x2000023c
 800487c:	20000238 	.word	0x20000238
 8004880:	20000108 	.word	0x20000108
 8004884:	2000022c 	.word	0x2000022c
 8004888:	20000228 	.word	0x20000228
	 		//angle_yaw = angle_yaw*0.996 + angle_roll_acc * 0.004;

	 	}
	 	else{
	 		angle_pitch = (-(mpu.rpy[1] + 0.15));
 800488c:	4b94      	ldr	r3, [pc, #592]	; (8004ae0 <main+0x658>)
 800488e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004892:	4618      	mov	r0, r3
 8004894:	f7fb fdc0 	bl	8000418 <__aeabi_f2d>
 8004898:	a389      	add	r3, pc, #548	; (adr r3, 8004ac0 <main+0x638>)
 800489a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489e:	f7fb fc5d 	bl	800015c <__adddf3>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	4610      	mov	r0, r2
 80048a8:	4619      	mov	r1, r3
 80048aa:	f7fc f8e5 	bl	8000a78 <__aeabi_d2f>
 80048ae:	4603      	mov	r3, r0
 80048b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80048b4:	4a8b      	ldr	r2, [pc, #556]	; (8004ae4 <main+0x65c>)
 80048b6:	6013      	str	r3, [r2, #0]
	 		angle_roll = (mpu.rpy[0] + 0.3);
 80048b8:	4b89      	ldr	r3, [pc, #548]	; (8004ae0 <main+0x658>)
 80048ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fb fdaa 	bl	8000418 <__aeabi_f2d>
 80048c4:	a380      	add	r3, pc, #512	; (adr r3, 8004ac8 <main+0x640>)
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	f7fb fc47 	bl	800015c <__adddf3>
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	4610      	mov	r0, r2
 80048d4:	4619      	mov	r1, r3
 80048d6:	f7fc f8cf 	bl	8000a78 <__aeabi_d2f>
 80048da:	4603      	mov	r3, r0
 80048dc:	4a82      	ldr	r2, [pc, #520]	; (8004ae8 <main+0x660>)
 80048de:	6013      	str	r3, [r2, #0]
	 		//angle_yaw = 0;
	 		set_gyro_angle = true;
 80048e0:	4b82      	ldr	r3, [pc, #520]	; (8004aec <main+0x664>)
 80048e2:	2201      	movs	r2, #1
 80048e4:	701a      	strb	r2, [r3, #0]
	 	}
	 		  angle_pitch_output = angle_pitch_output * 0.9 + angle_pitch * 0.1;
 80048e6:	4b82      	ldr	r3, [pc, #520]	; (8004af0 <main+0x668>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fb fd94 	bl	8000418 <__aeabi_f2d>
 80048f0:	a377      	add	r3, pc, #476	; (adr r3, 8004ad0 <main+0x648>)
 80048f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f6:	f7fb fde7 	bl	80004c8 <__aeabi_dmul>
 80048fa:	4602      	mov	r2, r0
 80048fc:	460b      	mov	r3, r1
 80048fe:	4614      	mov	r4, r2
 8004900:	461d      	mov	r5, r3
 8004902:	4b78      	ldr	r3, [pc, #480]	; (8004ae4 <main+0x65c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f7fb fd86 	bl	8000418 <__aeabi_f2d>
 800490c:	a372      	add	r3, pc, #456	; (adr r3, 8004ad8 <main+0x650>)
 800490e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004912:	f7fb fdd9 	bl	80004c8 <__aeabi_dmul>
 8004916:	4602      	mov	r2, r0
 8004918:	460b      	mov	r3, r1
 800491a:	4620      	mov	r0, r4
 800491c:	4629      	mov	r1, r5
 800491e:	f7fb fc1d 	bl	800015c <__adddf3>
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	4610      	mov	r0, r2
 8004928:	4619      	mov	r1, r3
 800492a:	f7fc f8a5 	bl	8000a78 <__aeabi_d2f>
 800492e:	4603      	mov	r3, r0
 8004930:	4a6f      	ldr	r2, [pc, #444]	; (8004af0 <main+0x668>)
 8004932:	6013      	str	r3, [r2, #0]
	 		  angle_roll_output = angle_roll_output * 0.9 + angle_roll * 0.1;
 8004934:	4b6f      	ldr	r3, [pc, #444]	; (8004af4 <main+0x66c>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f7fb fd6d 	bl	8000418 <__aeabi_f2d>
 800493e:	a364      	add	r3, pc, #400	; (adr r3, 8004ad0 <main+0x648>)
 8004940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004944:	f7fb fdc0 	bl	80004c8 <__aeabi_dmul>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	4614      	mov	r4, r2
 800494e:	461d      	mov	r5, r3
 8004950:	4b65      	ldr	r3, [pc, #404]	; (8004ae8 <main+0x660>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4618      	mov	r0, r3
 8004956:	f7fb fd5f 	bl	8000418 <__aeabi_f2d>
 800495a:	a35f      	add	r3, pc, #380	; (adr r3, 8004ad8 <main+0x650>)
 800495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004960:	f7fb fdb2 	bl	80004c8 <__aeabi_dmul>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4620      	mov	r0, r4
 800496a:	4629      	mov	r1, r5
 800496c:	f7fb fbf6 	bl	800015c <__adddf3>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	4610      	mov	r0, r2
 8004976:	4619      	mov	r1, r3
 8004978:	f7fc f87e 	bl	8000a78 <__aeabi_d2f>
 800497c:	4603      	mov	r3, r0
 800497e:	4a5d      	ldr	r2, [pc, #372]	; (8004af4 <main+0x66c>)
 8004980:	6013      	str	r3, [r2, #0]
	 		  //angle_yaw_output = angle_yaw_output * 0.9 + angle_yaw * 0.1;

	 		  pitch_level_adjust = angle_pitch_output * 15;
 8004982:	4b5b      	ldr	r3, [pc, #364]	; (8004af0 <main+0x668>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	495c      	ldr	r1, [pc, #368]	; (8004af8 <main+0x670>)
 8004988:	4618      	mov	r0, r3
 800498a:	f7fc f9d3 	bl	8000d34 <__aeabi_fmul>
 800498e:	4603      	mov	r3, r0
 8004990:	461a      	mov	r2, r3
 8004992:	4b5a      	ldr	r3, [pc, #360]	; (8004afc <main+0x674>)
 8004994:	601a      	str	r2, [r3, #0]
	 		  roll_level_adjust =  angle_roll_output * 15;
 8004996:	4b57      	ldr	r3, [pc, #348]	; (8004af4 <main+0x66c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4957      	ldr	r1, [pc, #348]	; (8004af8 <main+0x670>)
 800499c:	4618      	mov	r0, r3
 800499e:	f7fc f9c9 	bl	8000d34 <__aeabi_fmul>
 80049a2:	4603      	mov	r3, r0
 80049a4:	461a      	mov	r2, r3
 80049a6:	4b56      	ldr	r3, [pc, #344]	; (8004b00 <main+0x678>)
 80049a8:	601a      	str	r2, [r3, #0]

	 		  if ( !auto_level ){
 80049aa:	4b56      	ldr	r3, [pc, #344]	; (8004b04 <main+0x67c>)
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	f083 0301 	eor.w	r3, r3, #1
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d007      	beq.n	80049c8 <main+0x540>
	 			  pitch_level_adjust =0;
 80049b8:	4b50      	ldr	r3, [pc, #320]	; (8004afc <main+0x674>)
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	601a      	str	r2, [r3, #0]
	 			  roll_level_adjust =0;
 80049c0:	4b4f      	ldr	r3, [pc, #316]	; (8004b00 <main+0x678>)
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
	 		  }


	 		  if ( receiver_input_channel_1 < 1050 && receiver_input_channel_4 < 1050 ) start =1;
 80049c8:	4b4f      	ldr	r3, [pc, #316]	; (8004b08 <main+0x680>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f240 4219 	movw	r2, #1049	; 0x419
 80049d0:	4293      	cmp	r3, r2
 80049d2:	dc08      	bgt.n	80049e6 <main+0x55e>
 80049d4:	4b4d      	ldr	r3, [pc, #308]	; (8004b0c <main+0x684>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f240 4219 	movw	r2, #1049	; 0x419
 80049dc:	4293      	cmp	r3, r2
 80049de:	dc02      	bgt.n	80049e6 <main+0x55e>
 80049e0:	4b4b      	ldr	r3, [pc, #300]	; (8004b10 <main+0x688>)
 80049e2:	2201      	movs	r2, #1
 80049e4:	601a      	str	r2, [r3, #0]

	 		  if ( start == 1 && receiver_input_channel_1 < 1050 && receiver_input_channel_4 > 1450 ){
 80049e6:	4b4a      	ldr	r3, [pc, #296]	; (8004b10 <main+0x688>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d132      	bne.n	8004a54 <main+0x5cc>
 80049ee:	4b46      	ldr	r3, [pc, #280]	; (8004b08 <main+0x680>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f240 4219 	movw	r2, #1049	; 0x419
 80049f6:	4293      	cmp	r3, r2
 80049f8:	dc2c      	bgt.n	8004a54 <main+0x5cc>
 80049fa:	4b44      	ldr	r3, [pc, #272]	; (8004b0c <main+0x684>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f240 52aa 	movw	r2, #1450	; 0x5aa
 8004a02:	4293      	cmp	r3, r2
 8004a04:	dd26      	ble.n	8004a54 <main+0x5cc>
	 			  start = 2;
 8004a06:	4b42      	ldr	r3, [pc, #264]	; (8004b10 <main+0x688>)
 8004a08:	2202      	movs	r2, #2
 8004a0a:	601a      	str	r2, [r3, #0]
	 			  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);

	 			  pid_i_mem_roll = 0;
 8004a0c:	4b41      	ldr	r3, [pc, #260]	; (8004b14 <main+0x68c>)
 8004a0e:	f04f 0200 	mov.w	r2, #0
 8004a12:	601a      	str	r2, [r3, #0]
	 			  pid_last_roll_d_error = 0;
 8004a14:	4b40      	ldr	r3, [pc, #256]	; (8004b18 <main+0x690>)
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]
	 			  pid_i_mem_roll_last = 0;
 8004a1c:	4b3f      	ldr	r3, [pc, #252]	; (8004b1c <main+0x694>)
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]

	 			  pid_i_mem_pitch = 0;
 8004a24:	4b3e      	ldr	r3, [pc, #248]	; (8004b20 <main+0x698>)
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]
	 			  pid_last_pitch_d_eroor = 0;
 8004a2c:	4b3d      	ldr	r3, [pc, #244]	; (8004b24 <main+0x69c>)
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]
	 			  pid_i_mem_pitch_last = 0;
 8004a34:	4b3c      	ldr	r3, [pc, #240]	; (8004b28 <main+0x6a0>)
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]

	 			  pid_i_mem_yaw = 0;
 8004a3c:	4b3b      	ldr	r3, [pc, #236]	; (8004b2c <main+0x6a4>)
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]
	 			  pid_last_yaw_d_error = 0;
 8004a44:	4b3a      	ldr	r3, [pc, #232]	; (8004b30 <main+0x6a8>)
 8004a46:	f04f 0200 	mov.w	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
	 			  pid_i_mem_yaw_last = 0;
 8004a4c:	4b39      	ldr	r3, [pc, #228]	; (8004b34 <main+0x6ac>)
 8004a4e:	f04f 0200 	mov.w	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]
	 		  }

	 		  if ( start == 2 && receiver_input_channel_1 < 1050 && receiver_input_channel_4 > 1950 ){
 8004a54:	4b2e      	ldr	r3, [pc, #184]	; (8004b10 <main+0x688>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d10e      	bne.n	8004a7a <main+0x5f2>
 8004a5c:	4b2a      	ldr	r3, [pc, #168]	; (8004b08 <main+0x680>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f240 4219 	movw	r2, #1049	; 0x419
 8004a64:	4293      	cmp	r3, r2
 8004a66:	dc08      	bgt.n	8004a7a <main+0x5f2>
 8004a68:	4b28      	ldr	r3, [pc, #160]	; (8004b0c <main+0x684>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f240 729e 	movw	r2, #1950	; 0x79e
 8004a70:	4293      	cmp	r3, r2
 8004a72:	dd02      	ble.n	8004a7a <main+0x5f2>
	 			  start =0;
 8004a74:	4b26      	ldr	r3, [pc, #152]	; (8004b10 <main+0x688>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	601a      	str	r2, [r3, #0]
	 			  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
	 		  }

	 		  if ( receiver_input_channel_5 > 1500 ) turning_speed = 7;
 8004a7a:	4b2f      	ldr	r3, [pc, #188]	; (8004b38 <main+0x6b0>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004a82:	4293      	cmp	r3, r2
 8004a84:	dd03      	ble.n	8004a8e <main+0x606>
 8004a86:	4b2d      	ldr	r3, [pc, #180]	; (8004b3c <main+0x6b4>)
 8004a88:	4a2d      	ldr	r2, [pc, #180]	; (8004b40 <main+0x6b8>)
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	e002      	b.n	8004a94 <main+0x60c>
	 		  else turning_speed = 5;
 8004a8e:	4b2b      	ldr	r3, [pc, #172]	; (8004b3c <main+0x6b4>)
 8004a90:	4a2c      	ldr	r2, [pc, #176]	; (8004b44 <main+0x6bc>)
 8004a92:	601a      	str	r2, [r3, #0]


	 		  pid_roll_setpoint =0;
 8004a94:	4b2c      	ldr	r3, [pc, #176]	; (8004b48 <main+0x6c0>)
 8004a96:	f04f 0200 	mov.w	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]
	 		  if ( receiver_input_channel_2 > 1508 ) pid_roll_setpoint = (receiver_input_channel_2 - 1508);
 8004a9c:	4b2b      	ldr	r3, [pc, #172]	; (8004b4c <main+0x6c4>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	dd53      	ble.n	8004b50 <main+0x6c8>
 8004aa8:	4b28      	ldr	r3, [pc, #160]	; (8004b4c <main+0x6c4>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7fc f8eb 	bl	8000c8c <__aeabi_i2f>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	4a23      	ldr	r2, [pc, #140]	; (8004b48 <main+0x6c0>)
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	e058      	b.n	8004b70 <main+0x6e8>
 8004abe:	bf00      	nop
 8004ac0:	33333333 	.word	0x33333333
 8004ac4:	3fc33333 	.word	0x3fc33333
 8004ac8:	33333333 	.word	0x33333333
 8004acc:	3fd33333 	.word	0x3fd33333
 8004ad0:	cccccccd 	.word	0xcccccccd
 8004ad4:	3feccccc 	.word	0x3feccccc
 8004ad8:	9999999a 	.word	0x9999999a
 8004adc:	3fb99999 	.word	0x3fb99999
 8004ae0:	20000134 	.word	0x20000134
 8004ae4:	2000022c 	.word	0x2000022c
 8004ae8:	20000228 	.word	0x20000228
 8004aec:	20000108 	.word	0x20000108
 8004af0:	20000234 	.word	0x20000234
 8004af4:	20000230 	.word	0x20000230
 8004af8:	41700000 	.word	0x41700000
 8004afc:	20000244 	.word	0x20000244
 8004b00:	20000240 	.word	0x20000240
 8004b04:	20000048 	.word	0x20000048
 8004b08:	200001f4 	.word	0x200001f4
 8004b0c:	20000200 	.word	0x20000200
 8004b10:	200002a8 	.word	0x200002a8
 8004b14:	20000264 	.word	0x20000264
 8004b18:	2000027c 	.word	0x2000027c
 8004b1c:	20000270 	.word	0x20000270
 8004b20:	20000268 	.word	0x20000268
 8004b24:	20000280 	.word	0x20000280
 8004b28:	20000274 	.word	0x20000274
 8004b2c:	2000026c 	.word	0x2000026c
 8004b30:	20000284 	.word	0x20000284
 8004b34:	20000278 	.word	0x20000278
 8004b38:	20000204 	.word	0x20000204
 8004b3c:	20000044 	.word	0x20000044
 8004b40:	40e00000 	.word	0x40e00000
 8004b44:	40a00000 	.word	0x40a00000
 8004b48:	20000254 	.word	0x20000254
 8004b4c:	200001f8 	.word	0x200001f8
	 		  else if ( receiver_input_channel_2  < 1492 ) pid_roll_setpoint = ( receiver_input_channel_2  - 1492 );
 8004b50:	4b84      	ldr	r3, [pc, #528]	; (8004d64 <main+0x8dc>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f240 52d3 	movw	r2, #1491	; 0x5d3
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	dc09      	bgt.n	8004b70 <main+0x6e8>
 8004b5c:	4b81      	ldr	r3, [pc, #516]	; (8004d64 <main+0x8dc>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7fc f891 	bl	8000c8c <__aeabi_i2f>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	4a7e      	ldr	r2, [pc, #504]	; (8004d68 <main+0x8e0>)
 8004b6e:	6013      	str	r3, [r2, #0]

	 		  pid_roll_setpoint -= roll_level_adjust;
 8004b70:	4b7d      	ldr	r3, [pc, #500]	; (8004d68 <main+0x8e0>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a7d      	ldr	r2, [pc, #500]	; (8004d6c <main+0x8e4>)
 8004b76:	6812      	ldr	r2, [r2, #0]
 8004b78:	4611      	mov	r1, r2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fb ffd0 	bl	8000b20 <__aeabi_fsub>
 8004b80:	4603      	mov	r3, r0
 8004b82:	461a      	mov	r2, r3
 8004b84:	4b78      	ldr	r3, [pc, #480]	; (8004d68 <main+0x8e0>)
 8004b86:	601a      	str	r2, [r3, #0]
	 		  pid_roll_setpoint /= turning_speed;
 8004b88:	4b77      	ldr	r3, [pc, #476]	; (8004d68 <main+0x8e0>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a78      	ldr	r2, [pc, #480]	; (8004d70 <main+0x8e8>)
 8004b8e:	6812      	ldr	r2, [r2, #0]
 8004b90:	4611      	mov	r1, r2
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fc f982 	bl	8000e9c <__aeabi_fdiv>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	4b72      	ldr	r3, [pc, #456]	; (8004d68 <main+0x8e0>)
 8004b9e:	601a      	str	r2, [r3, #0]

	 		  pid_pitch_setpoint =0;
 8004ba0:	4b74      	ldr	r3, [pc, #464]	; (8004d74 <main+0x8ec>)
 8004ba2:	f04f 0200 	mov.w	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]
	 		  if ( receiver_input_channel_3 > 1508 ) pid_pitch_setpoint = ( receiver_input_channel_3 - 1508 );
 8004ba8:	4b73      	ldr	r3, [pc, #460]	; (8004d78 <main+0x8f0>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	dd0a      	ble.n	8004bca <main+0x742>
 8004bb4:	4b70      	ldr	r3, [pc, #448]	; (8004d78 <main+0x8f0>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7fc f865 	bl	8000c8c <__aeabi_i2f>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	4a6b      	ldr	r2, [pc, #428]	; (8004d74 <main+0x8ec>)
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	e00f      	b.n	8004bea <main+0x762>
	 		  else if ( receiver_input_channel_3 < 1492 ) pid_pitch_setpoint = ( receiver_input_channel_3 - 1492 );
 8004bca:	4b6b      	ldr	r3, [pc, #428]	; (8004d78 <main+0x8f0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f240 52d3 	movw	r2, #1491	; 0x5d3
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	dc09      	bgt.n	8004bea <main+0x762>
 8004bd6:	4b68      	ldr	r3, [pc, #416]	; (8004d78 <main+0x8f0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7fc f854 	bl	8000c8c <__aeabi_i2f>
 8004be4:	4603      	mov	r3, r0
 8004be6:	4a63      	ldr	r2, [pc, #396]	; (8004d74 <main+0x8ec>)
 8004be8:	6013      	str	r3, [r2, #0]

	 		  pid_pitch_setpoint -= pitch_level_adjust;
 8004bea:	4b62      	ldr	r3, [pc, #392]	; (8004d74 <main+0x8ec>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a63      	ldr	r2, [pc, #396]	; (8004d7c <main+0x8f4>)
 8004bf0:	6812      	ldr	r2, [r2, #0]
 8004bf2:	4611      	mov	r1, r2
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fb ff93 	bl	8000b20 <__aeabi_fsub>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	4b5d      	ldr	r3, [pc, #372]	; (8004d74 <main+0x8ec>)
 8004c00:	601a      	str	r2, [r3, #0]
	 		  pid_pitch_setpoint /= turning_speed;
 8004c02:	4b5c      	ldr	r3, [pc, #368]	; (8004d74 <main+0x8ec>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a5a      	ldr	r2, [pc, #360]	; (8004d70 <main+0x8e8>)
 8004c08:	6812      	ldr	r2, [r2, #0]
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fc f945 	bl	8000e9c <__aeabi_fdiv>
 8004c12:	4603      	mov	r3, r0
 8004c14:	461a      	mov	r2, r3
 8004c16:	4b57      	ldr	r3, [pc, #348]	; (8004d74 <main+0x8ec>)
 8004c18:	601a      	str	r2, [r3, #0]


	 		  pid_yaw_setpoint =0;
 8004c1a:	4b59      	ldr	r3, [pc, #356]	; (8004d80 <main+0x8f8>)
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	601a      	str	r2, [r3, #0]
	 		  if ( receiver_input_channel_1 > 1050 ){
 8004c22:	4b58      	ldr	r3, [pc, #352]	; (8004d84 <main+0x8fc>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f240 421a 	movw	r2, #1050	; 0x41a
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	dd30      	ble.n	8004c90 <main+0x808>
	 			  if ( receiver_input_channel_4 > 1508 ) pid_yaw_setpoint = ( receiver_input_channel_4 - 1508 ) / turning_speed;
 8004c2e:	4b56      	ldr	r3, [pc, #344]	; (8004d88 <main+0x900>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8004c36:	4293      	cmp	r3, r2
 8004c38:	dd12      	ble.n	8004c60 <main+0x7d8>
 8004c3a:	4b53      	ldr	r3, [pc, #332]	; (8004d88 <main+0x900>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fc f822 	bl	8000c8c <__aeabi_i2f>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	4b49      	ldr	r3, [pc, #292]	; (8004d70 <main+0x8e8>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4610      	mov	r0, r2
 8004c52:	f7fc f923 	bl	8000e9c <__aeabi_fdiv>
 8004c56:	4603      	mov	r3, r0
 8004c58:	461a      	mov	r2, r3
 8004c5a:	4b49      	ldr	r3, [pc, #292]	; (8004d80 <main+0x8f8>)
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	e017      	b.n	8004c90 <main+0x808>
	 			  else if ( receiver_input_channel_4 < 1492 ) pid_yaw_setpoint = ( receiver_input_channel_4 - 1492 ) / turning_speed;
 8004c60:	4b49      	ldr	r3, [pc, #292]	; (8004d88 <main+0x900>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f240 52d3 	movw	r2, #1491	; 0x5d3
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	dc11      	bgt.n	8004c90 <main+0x808>
 8004c6c:	4b46      	ldr	r3, [pc, #280]	; (8004d88 <main+0x900>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fc f809 	bl	8000c8c <__aeabi_i2f>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	4b3c      	ldr	r3, [pc, #240]	; (8004d70 <main+0x8e8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4619      	mov	r1, r3
 8004c82:	4610      	mov	r0, r2
 8004c84:	f7fc f90a 	bl	8000e9c <__aeabi_fdiv>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	4b3c      	ldr	r3, [pc, #240]	; (8004d80 <main+0x8f8>)
 8004c8e:	601a      	str	r2, [r3, #0]
	 		  }


	 		  //roll calculation
	 		  pid_error_temp = -gyro_roll_input + pid_roll_setpoint;
 8004c90:	4b35      	ldr	r3, [pc, #212]	; (8004d68 <main+0x8e0>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a3d      	ldr	r2, [pc, #244]	; (8004d8c <main+0x904>)
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	4611      	mov	r1, r2
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fb ff40 	bl	8000b20 <__aeabi_fsub>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	4b3a      	ldr	r3, [pc, #232]	; (8004d90 <main+0x908>)
 8004ca6:	601a      	str	r2, [r3, #0]
	 		  pid_i_mem_roll =  pid_i_mem_roll_last + 0.5 * pid_i_gain_roll * dt * (pid_error_temp +pid_last_roll_d_error) ;
 8004ca8:	4b3a      	ldr	r3, [pc, #232]	; (8004d94 <main+0x90c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fb fbb3 	bl	8000418 <__aeabi_f2d>
 8004cb2:	4604      	mov	r4, r0
 8004cb4:	460d      	mov	r5, r1
 8004cb6:	4b38      	ldr	r3, [pc, #224]	; (8004d98 <main+0x910>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fb fbac 	bl	8000418 <__aeabi_f2d>
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	4b35      	ldr	r3, [pc, #212]	; (8004d9c <main+0x914>)
 8004cc6:	f7fb fbff 	bl	80004c8 <__aeabi_dmul>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	460b      	mov	r3, r1
 8004cce:	4690      	mov	r8, r2
 8004cd0:	4699      	mov	r9, r3
 8004cd2:	4b33      	ldr	r3, [pc, #204]	; (8004da0 <main+0x918>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fb fb9e 	bl	8000418 <__aeabi_f2d>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4640      	mov	r0, r8
 8004ce2:	4649      	mov	r1, r9
 8004ce4:	f7fb fbf0 	bl	80004c8 <__aeabi_dmul>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4690      	mov	r8, r2
 8004cee:	4699      	mov	r9, r3
 8004cf0:	4b27      	ldr	r3, [pc, #156]	; (8004d90 <main+0x908>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a2b      	ldr	r2, [pc, #172]	; (8004da4 <main+0x91c>)
 8004cf6:	6812      	ldr	r2, [r2, #0]
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fb ff12 	bl	8000b24 <__addsf3>
 8004d00:	4603      	mov	r3, r0
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fb fb88 	bl	8000418 <__aeabi_f2d>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	4640      	mov	r0, r8
 8004d0e:	4649      	mov	r1, r9
 8004d10:	f7fb fbda 	bl	80004c8 <__aeabi_dmul>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	4620      	mov	r0, r4
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	f7fb fa1e 	bl	800015c <__adddf3>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4610      	mov	r0, r2
 8004d26:	4619      	mov	r1, r3
 8004d28:	f7fb fea6 	bl	8000a78 <__aeabi_d2f>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	4a1e      	ldr	r2, [pc, #120]	; (8004da8 <main+0x920>)
 8004d30:	6013      	str	r3, [r2, #0]

	 		  if ( pid_i_mem_roll > pid_max_roll ) pid_i_mem_roll = pid_max_roll;
 8004d32:	4b1e      	ldr	r3, [pc, #120]	; (8004dac <main+0x924>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fb ffa8 	bl	8000c8c <__aeabi_i2f>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	4b1a      	ldr	r3, [pc, #104]	; (8004da8 <main+0x920>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4619      	mov	r1, r3
 8004d44:	4610      	mov	r0, r2
 8004d46:	f7fc f993 	bl	8001070 <__aeabi_fcmplt>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d02f      	beq.n	8004db0 <main+0x928>
 8004d50:	4b16      	ldr	r3, [pc, #88]	; (8004dac <main+0x924>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fb ff99 	bl	8000c8c <__aeabi_i2f>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	4a12      	ldr	r2, [pc, #72]	; (8004da8 <main+0x920>)
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	e03f      	b.n	8004de2 <main+0x95a>
 8004d62:	bf00      	nop
 8004d64:	200001f8 	.word	0x200001f8
 8004d68:	20000254 	.word	0x20000254
 8004d6c:	20000240 	.word	0x20000240
 8004d70:	20000044 	.word	0x20000044
 8004d74:	20000258 	.word	0x20000258
 8004d78:	200001fc 	.word	0x200001fc
 8004d7c:	20000244 	.word	0x20000244
 8004d80:	2000025c 	.word	0x2000025c
 8004d84:	200001f4 	.word	0x200001f4
 8004d88:	20000200 	.word	0x20000200
 8004d8c:	20000248 	.word	0x20000248
 8004d90:	20000288 	.word	0x20000288
 8004d94:	20000270 	.word	0x20000270
 8004d98:	20000010 	.word	0x20000010
 8004d9c:	3fe00000 	.word	0x3fe00000
 8004da0:	20000008 	.word	0x20000008
 8004da4:	2000027c 	.word	0x2000027c
 8004da8:	20000264 	.word	0x20000264
 8004dac:	2000002c 	.word	0x2000002c
	 		  else if ( pid_i_mem_roll < pid_max_roll * -1 ) pid_i_mem_roll = pid_max_roll * -1;
 8004db0:	4b76      	ldr	r3, [pc, #472]	; (8004f8c <main+0xb04>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	425b      	negs	r3, r3
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fb ff68 	bl	8000c8c <__aeabi_i2f>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	4b74      	ldr	r3, [pc, #464]	; (8004f90 <main+0xb08>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	f7fc f971 	bl	80010ac <__aeabi_fcmpgt>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d008      	beq.n	8004de2 <main+0x95a>
 8004dd0:	4b6e      	ldr	r3, [pc, #440]	; (8004f8c <main+0xb04>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	425b      	negs	r3, r3
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fb ff58 	bl	8000c8c <__aeabi_i2f>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	4a6c      	ldr	r2, [pc, #432]	; (8004f90 <main+0xb08>)
 8004de0:	6013      	str	r3, [r2, #0]

	 		  pid_roll_output = ( pid_p_gain_roll * (pid_error_temp)) + pid_i_mem_roll + ( pid_d_gain_roll * (( pid_error_temp - pid_last_roll_d_error) / dt));
 8004de2:	4b6c      	ldr	r3, [pc, #432]	; (8004f94 <main+0xb0c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a6c      	ldr	r2, [pc, #432]	; (8004f98 <main+0xb10>)
 8004de8:	6812      	ldr	r2, [r2, #0]
 8004dea:	4611      	mov	r1, r2
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7fb ffa1 	bl	8000d34 <__aeabi_fmul>
 8004df2:	4603      	mov	r3, r0
 8004df4:	461a      	mov	r2, r3
 8004df6:	4b66      	ldr	r3, [pc, #408]	; (8004f90 <main+0xb08>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	f7fb fe91 	bl	8000b24 <__addsf3>
 8004e02:	4603      	mov	r3, r0
 8004e04:	461c      	mov	r4, r3
 8004e06:	4b64      	ldr	r3, [pc, #400]	; (8004f98 <main+0xb10>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a64      	ldr	r2, [pc, #400]	; (8004f9c <main+0xb14>)
 8004e0c:	6812      	ldr	r2, [r2, #0]
 8004e0e:	4611      	mov	r1, r2
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fb fe85 	bl	8000b20 <__aeabi_fsub>
 8004e16:	4603      	mov	r3, r0
 8004e18:	461a      	mov	r2, r3
 8004e1a:	4b61      	ldr	r3, [pc, #388]	; (8004fa0 <main+0xb18>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4619      	mov	r1, r3
 8004e20:	4610      	mov	r0, r2
 8004e22:	f7fc f83b 	bl	8000e9c <__aeabi_fdiv>
 8004e26:	4603      	mov	r3, r0
 8004e28:	461a      	mov	r2, r3
 8004e2a:	4b5e      	ldr	r3, [pc, #376]	; (8004fa4 <main+0xb1c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4610      	mov	r0, r2
 8004e32:	f7fb ff7f 	bl	8000d34 <__aeabi_fmul>
 8004e36:	4603      	mov	r3, r0
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	f7fb fe72 	bl	8000b24 <__addsf3>
 8004e40:	4603      	mov	r3, r0
 8004e42:	461a      	mov	r2, r3
 8004e44:	4b58      	ldr	r3, [pc, #352]	; (8004fa8 <main+0xb20>)
 8004e46:	601a      	str	r2, [r3, #0]

	 		  if ( pid_roll_output > pid_max_roll ) pid_roll_output = pid_max_roll;
 8004e48:	4b50      	ldr	r3, [pc, #320]	; (8004f8c <main+0xb04>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fb ff1d 	bl	8000c8c <__aeabi_i2f>
 8004e52:	4602      	mov	r2, r0
 8004e54:	4b54      	ldr	r3, [pc, #336]	; (8004fa8 <main+0xb20>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	f7fc f908 	bl	8001070 <__aeabi_fcmplt>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d008      	beq.n	8004e78 <main+0x9f0>
 8004e66:	4b49      	ldr	r3, [pc, #292]	; (8004f8c <main+0xb04>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fb ff0e 	bl	8000c8c <__aeabi_i2f>
 8004e70:	4603      	mov	r3, r0
 8004e72:	4a4d      	ldr	r2, [pc, #308]	; (8004fa8 <main+0xb20>)
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	e018      	b.n	8004eaa <main+0xa22>
	 		  else if ( pid_roll_output < pid_max_roll * -1) pid_roll_output = pid_max_roll * -1;
 8004e78:	4b44      	ldr	r3, [pc, #272]	; (8004f8c <main+0xb04>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	425b      	negs	r3, r3
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fb ff04 	bl	8000c8c <__aeabi_i2f>
 8004e84:	4602      	mov	r2, r0
 8004e86:	4b48      	ldr	r3, [pc, #288]	; (8004fa8 <main+0xb20>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	4610      	mov	r0, r2
 8004e8e:	f7fc f90d 	bl	80010ac <__aeabi_fcmpgt>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d008      	beq.n	8004eaa <main+0xa22>
 8004e98:	4b3c      	ldr	r3, [pc, #240]	; (8004f8c <main+0xb04>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	425b      	negs	r3, r3
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fb fef4 	bl	8000c8c <__aeabi_i2f>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	4a40      	ldr	r2, [pc, #256]	; (8004fa8 <main+0xb20>)
 8004ea8:	6013      	str	r3, [r2, #0]

	 		  pid_last_roll_d_error = pid_error_temp;
 8004eaa:	4b3b      	ldr	r3, [pc, #236]	; (8004f98 <main+0xb10>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a3b      	ldr	r2, [pc, #236]	; (8004f9c <main+0xb14>)
 8004eb0:	6013      	str	r3, [r2, #0]
	 		  pid_i_mem_roll_last = pid_i_mem_roll;
 8004eb2:	4b37      	ldr	r3, [pc, #220]	; (8004f90 <main+0xb08>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a3d      	ldr	r2, [pc, #244]	; (8004fac <main+0xb24>)
 8004eb8:	6013      	str	r3, [r2, #0]

	 		  // pitch calculation
	 		  pid_error_temp = -gyro_pitch_input + pid_pitch_setpoint;
 8004eba:	4b3d      	ldr	r3, [pc, #244]	; (8004fb0 <main+0xb28>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a3d      	ldr	r2, [pc, #244]	; (8004fb4 <main+0xb2c>)
 8004ec0:	6812      	ldr	r2, [r2, #0]
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fb fe2b 	bl	8000b20 <__aeabi_fsub>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	461a      	mov	r2, r3
 8004ece:	4b32      	ldr	r3, [pc, #200]	; (8004f98 <main+0xb10>)
 8004ed0:	601a      	str	r2, [r3, #0]
	 		  pid_i_mem_pitch = pid_i_mem_pitch_last + 0.5*pid_i_gain_pitch*dt*(pid_error_temp+pid_last_pitch_d_eroor);
 8004ed2:	4b39      	ldr	r3, [pc, #228]	; (8004fb8 <main+0xb30>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fb fa9e 	bl	8000418 <__aeabi_f2d>
 8004edc:	4604      	mov	r4, r0
 8004ede:	460d      	mov	r5, r1
 8004ee0:	4b36      	ldr	r3, [pc, #216]	; (8004fbc <main+0xb34>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7fb fa97 	bl	8000418 <__aeabi_f2d>
 8004eea:	f04f 0200 	mov.w	r2, #0
 8004eee:	4b34      	ldr	r3, [pc, #208]	; (8004fc0 <main+0xb38>)
 8004ef0:	f7fb faea 	bl	80004c8 <__aeabi_dmul>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4690      	mov	r8, r2
 8004efa:	4699      	mov	r9, r3
 8004efc:	4b28      	ldr	r3, [pc, #160]	; (8004fa0 <main+0xb18>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7fb fa89 	bl	8000418 <__aeabi_f2d>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4640      	mov	r0, r8
 8004f0c:	4649      	mov	r1, r9
 8004f0e:	f7fb fadb 	bl	80004c8 <__aeabi_dmul>
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	4690      	mov	r8, r2
 8004f18:	4699      	mov	r9, r3
 8004f1a:	4b1f      	ldr	r3, [pc, #124]	; (8004f98 <main+0xb10>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a29      	ldr	r2, [pc, #164]	; (8004fc4 <main+0xb3c>)
 8004f20:	6812      	ldr	r2, [r2, #0]
 8004f22:	4611      	mov	r1, r2
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7fb fdfd 	bl	8000b24 <__addsf3>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7fb fa73 	bl	8000418 <__aeabi_f2d>
 8004f32:	4602      	mov	r2, r0
 8004f34:	460b      	mov	r3, r1
 8004f36:	4640      	mov	r0, r8
 8004f38:	4649      	mov	r1, r9
 8004f3a:	f7fb fac5 	bl	80004c8 <__aeabi_dmul>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	460b      	mov	r3, r1
 8004f42:	4620      	mov	r0, r4
 8004f44:	4629      	mov	r1, r5
 8004f46:	f7fb f909 	bl	800015c <__adddf3>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4610      	mov	r0, r2
 8004f50:	4619      	mov	r1, r3
 8004f52:	f7fb fd91 	bl	8000a78 <__aeabi_d2f>
 8004f56:	4603      	mov	r3, r0
 8004f58:	4a1b      	ldr	r2, [pc, #108]	; (8004fc8 <main+0xb40>)
 8004f5a:	6013      	str	r3, [r2, #0]

	 		  if ( pid_i_mem_pitch > pid_max_pitch ) pid_i_mem_pitch = pid_max_pitch;
 8004f5c:	4b1b      	ldr	r3, [pc, #108]	; (8004fcc <main+0xb44>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fb fe93 	bl	8000c8c <__aeabi_i2f>
 8004f66:	4602      	mov	r2, r0
 8004f68:	4b17      	ldr	r3, [pc, #92]	; (8004fc8 <main+0xb40>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4610      	mov	r0, r2
 8004f70:	f7fc f87e 	bl	8001070 <__aeabi_fcmplt>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d02a      	beq.n	8004fd0 <main+0xb48>
 8004f7a:	4b14      	ldr	r3, [pc, #80]	; (8004fcc <main+0xb44>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fb fe84 	bl	8000c8c <__aeabi_i2f>
 8004f84:	4603      	mov	r3, r0
 8004f86:	4a10      	ldr	r2, [pc, #64]	; (8004fc8 <main+0xb40>)
 8004f88:	6013      	str	r3, [r2, #0]
 8004f8a:	e03a      	b.n	8005002 <main+0xb7a>
 8004f8c:	2000002c 	.word	0x2000002c
 8004f90:	20000264 	.word	0x20000264
 8004f94:	2000000c 	.word	0x2000000c
 8004f98:	20000288 	.word	0x20000288
 8004f9c:	2000027c 	.word	0x2000027c
 8004fa0:	20000008 	.word	0x20000008
 8004fa4:	20000014 	.word	0x20000014
 8004fa8:	2000028c 	.word	0x2000028c
 8004fac:	20000270 	.word	0x20000270
 8004fb0:	20000258 	.word	0x20000258
 8004fb4:	2000024c 	.word	0x2000024c
 8004fb8:	20000274 	.word	0x20000274
 8004fbc:	2000001c 	.word	0x2000001c
 8004fc0:	3fe00000 	.word	0x3fe00000
 8004fc4:	20000280 	.word	0x20000280
 8004fc8:	20000268 	.word	0x20000268
 8004fcc:	20000030 	.word	0x20000030
	 		  else if ( pid_i_mem_pitch < pid_max_pitch * -1 ) pid_i_mem_pitch = pid_max_pitch * -1;
 8004fd0:	4b76      	ldr	r3, [pc, #472]	; (80051ac <main+0xd24>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	425b      	negs	r3, r3
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fb fe58 	bl	8000c8c <__aeabi_i2f>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	4b74      	ldr	r3, [pc, #464]	; (80051b0 <main+0xd28>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	f7fc f861 	bl	80010ac <__aeabi_fcmpgt>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d008      	beq.n	8005002 <main+0xb7a>
 8004ff0:	4b6e      	ldr	r3, [pc, #440]	; (80051ac <main+0xd24>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	425b      	negs	r3, r3
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fb fe48 	bl	8000c8c <__aeabi_i2f>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	4a6c      	ldr	r2, [pc, #432]	; (80051b0 <main+0xd28>)
 8005000:	6013      	str	r3, [r2, #0]

	 		  pid_pitch_output = ( pid_p_gain_pitch * (pid_error_temp) ) + pid_i_mem_pitch + ( pid_d_gain_pitch * (( pid_error_temp - pid_last_pitch_d_eroor)/dt));
 8005002:	4b6c      	ldr	r3, [pc, #432]	; (80051b4 <main+0xd2c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a6c      	ldr	r2, [pc, #432]	; (80051b8 <main+0xd30>)
 8005008:	6812      	ldr	r2, [r2, #0]
 800500a:	4611      	mov	r1, r2
 800500c:	4618      	mov	r0, r3
 800500e:	f7fb fe91 	bl	8000d34 <__aeabi_fmul>
 8005012:	4603      	mov	r3, r0
 8005014:	461a      	mov	r2, r3
 8005016:	4b66      	ldr	r3, [pc, #408]	; (80051b0 <main+0xd28>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4619      	mov	r1, r3
 800501c:	4610      	mov	r0, r2
 800501e:	f7fb fd81 	bl	8000b24 <__addsf3>
 8005022:	4603      	mov	r3, r0
 8005024:	461c      	mov	r4, r3
 8005026:	4b64      	ldr	r3, [pc, #400]	; (80051b8 <main+0xd30>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a64      	ldr	r2, [pc, #400]	; (80051bc <main+0xd34>)
 800502c:	6812      	ldr	r2, [r2, #0]
 800502e:	4611      	mov	r1, r2
 8005030:	4618      	mov	r0, r3
 8005032:	f7fb fd75 	bl	8000b20 <__aeabi_fsub>
 8005036:	4603      	mov	r3, r0
 8005038:	461a      	mov	r2, r3
 800503a:	4b61      	ldr	r3, [pc, #388]	; (80051c0 <main+0xd38>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4619      	mov	r1, r3
 8005040:	4610      	mov	r0, r2
 8005042:	f7fb ff2b 	bl	8000e9c <__aeabi_fdiv>
 8005046:	4603      	mov	r3, r0
 8005048:	461a      	mov	r2, r3
 800504a:	4b5e      	ldr	r3, [pc, #376]	; (80051c4 <main+0xd3c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4619      	mov	r1, r3
 8005050:	4610      	mov	r0, r2
 8005052:	f7fb fe6f 	bl	8000d34 <__aeabi_fmul>
 8005056:	4603      	mov	r3, r0
 8005058:	4619      	mov	r1, r3
 800505a:	4620      	mov	r0, r4
 800505c:	f7fb fd62 	bl	8000b24 <__addsf3>
 8005060:	4603      	mov	r3, r0
 8005062:	461a      	mov	r2, r3
 8005064:	4b58      	ldr	r3, [pc, #352]	; (80051c8 <main+0xd40>)
 8005066:	601a      	str	r2, [r3, #0]

	 		  if ( pid_pitch_output > pid_max_pitch ) pid_pitch_output = pid_max_pitch;
 8005068:	4b50      	ldr	r3, [pc, #320]	; (80051ac <main+0xd24>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4618      	mov	r0, r3
 800506e:	f7fb fe0d 	bl	8000c8c <__aeabi_i2f>
 8005072:	4602      	mov	r2, r0
 8005074:	4b54      	ldr	r3, [pc, #336]	; (80051c8 <main+0xd40>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4619      	mov	r1, r3
 800507a:	4610      	mov	r0, r2
 800507c:	f7fb fff8 	bl	8001070 <__aeabi_fcmplt>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d008      	beq.n	8005098 <main+0xc10>
 8005086:	4b49      	ldr	r3, [pc, #292]	; (80051ac <main+0xd24>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f7fb fdfe 	bl	8000c8c <__aeabi_i2f>
 8005090:	4603      	mov	r3, r0
 8005092:	4a4d      	ldr	r2, [pc, #308]	; (80051c8 <main+0xd40>)
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	e018      	b.n	80050ca <main+0xc42>
	 		  else if ( pid_pitch_output < pid_max_pitch * -1 ) pid_pitch_output = pid_max_pitch * -1;
 8005098:	4b44      	ldr	r3, [pc, #272]	; (80051ac <main+0xd24>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	425b      	negs	r3, r3
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fb fdf4 	bl	8000c8c <__aeabi_i2f>
 80050a4:	4602      	mov	r2, r0
 80050a6:	4b48      	ldr	r3, [pc, #288]	; (80051c8 <main+0xd40>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4619      	mov	r1, r3
 80050ac:	4610      	mov	r0, r2
 80050ae:	f7fb fffd 	bl	80010ac <__aeabi_fcmpgt>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d008      	beq.n	80050ca <main+0xc42>
 80050b8:	4b3c      	ldr	r3, [pc, #240]	; (80051ac <main+0xd24>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	425b      	negs	r3, r3
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fb fde4 	bl	8000c8c <__aeabi_i2f>
 80050c4:	4603      	mov	r3, r0
 80050c6:	4a40      	ldr	r2, [pc, #256]	; (80051c8 <main+0xd40>)
 80050c8:	6013      	str	r3, [r2, #0]

	 		  pid_last_pitch_d_eroor = pid_error_temp;
 80050ca:	4b3b      	ldr	r3, [pc, #236]	; (80051b8 <main+0xd30>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a3b      	ldr	r2, [pc, #236]	; (80051bc <main+0xd34>)
 80050d0:	6013      	str	r3, [r2, #0]
	 		  pid_i_mem_pitch_last = pid_i_mem_pitch;
 80050d2:	4b37      	ldr	r3, [pc, #220]	; (80051b0 <main+0xd28>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a3d      	ldr	r2, [pc, #244]	; (80051cc <main+0xd44>)
 80050d8:	6013      	str	r3, [r2, #0]

	 		  // yaw calculation
	 		  pid_error_temp = -gyro_yaw_input + pid_yaw_setpoint;
 80050da:	4b3d      	ldr	r3, [pc, #244]	; (80051d0 <main+0xd48>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a3d      	ldr	r2, [pc, #244]	; (80051d4 <main+0xd4c>)
 80050e0:	6812      	ldr	r2, [r2, #0]
 80050e2:	4611      	mov	r1, r2
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fb fd1b 	bl	8000b20 <__aeabi_fsub>
 80050ea:	4603      	mov	r3, r0
 80050ec:	461a      	mov	r2, r3
 80050ee:	4b32      	ldr	r3, [pc, #200]	; (80051b8 <main+0xd30>)
 80050f0:	601a      	str	r2, [r3, #0]
	 		  pid_i_mem_yaw  = pid_i_mem_yaw_last + 0.5 * pid_i_gain_yaw * dt * (pid_error_temp+pid_last_yaw_d_error);
 80050f2:	4b39      	ldr	r3, [pc, #228]	; (80051d8 <main+0xd50>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fb f98e 	bl	8000418 <__aeabi_f2d>
 80050fc:	4604      	mov	r4, r0
 80050fe:	460d      	mov	r5, r1
 8005100:	4b36      	ldr	r3, [pc, #216]	; (80051dc <main+0xd54>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4618      	mov	r0, r3
 8005106:	f7fb f987 	bl	8000418 <__aeabi_f2d>
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	4b34      	ldr	r3, [pc, #208]	; (80051e0 <main+0xd58>)
 8005110:	f7fb f9da 	bl	80004c8 <__aeabi_dmul>
 8005114:	4602      	mov	r2, r0
 8005116:	460b      	mov	r3, r1
 8005118:	4690      	mov	r8, r2
 800511a:	4699      	mov	r9, r3
 800511c:	4b28      	ldr	r3, [pc, #160]	; (80051c0 <main+0xd38>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4618      	mov	r0, r3
 8005122:	f7fb f979 	bl	8000418 <__aeabi_f2d>
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	4640      	mov	r0, r8
 800512c:	4649      	mov	r1, r9
 800512e:	f7fb f9cb 	bl	80004c8 <__aeabi_dmul>
 8005132:	4602      	mov	r2, r0
 8005134:	460b      	mov	r3, r1
 8005136:	4690      	mov	r8, r2
 8005138:	4699      	mov	r9, r3
 800513a:	4b1f      	ldr	r3, [pc, #124]	; (80051b8 <main+0xd30>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a29      	ldr	r2, [pc, #164]	; (80051e4 <main+0xd5c>)
 8005140:	6812      	ldr	r2, [r2, #0]
 8005142:	4611      	mov	r1, r2
 8005144:	4618      	mov	r0, r3
 8005146:	f7fb fced 	bl	8000b24 <__addsf3>
 800514a:	4603      	mov	r3, r0
 800514c:	4618      	mov	r0, r3
 800514e:	f7fb f963 	bl	8000418 <__aeabi_f2d>
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	4640      	mov	r0, r8
 8005158:	4649      	mov	r1, r9
 800515a:	f7fb f9b5 	bl	80004c8 <__aeabi_dmul>
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	4620      	mov	r0, r4
 8005164:	4629      	mov	r1, r5
 8005166:	f7fa fff9 	bl	800015c <__adddf3>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	4610      	mov	r0, r2
 8005170:	4619      	mov	r1, r3
 8005172:	f7fb fc81 	bl	8000a78 <__aeabi_d2f>
 8005176:	4603      	mov	r3, r0
 8005178:	4a1b      	ldr	r2, [pc, #108]	; (80051e8 <main+0xd60>)
 800517a:	6013      	str	r3, [r2, #0]

	 		  if ( pid_i_mem_yaw > pid_max_yaw ) pid_i_mem_yaw = pid_max_yaw;
 800517c:	4b1b      	ldr	r3, [pc, #108]	; (80051ec <main+0xd64>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4618      	mov	r0, r3
 8005182:	f7fb fd83 	bl	8000c8c <__aeabi_i2f>
 8005186:	4602      	mov	r2, r0
 8005188:	4b17      	ldr	r3, [pc, #92]	; (80051e8 <main+0xd60>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4619      	mov	r1, r3
 800518e:	4610      	mov	r0, r2
 8005190:	f7fb ff6e 	bl	8001070 <__aeabi_fcmplt>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d02a      	beq.n	80051f0 <main+0xd68>
 800519a:	4b14      	ldr	r3, [pc, #80]	; (80051ec <main+0xd64>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fb fd74 	bl	8000c8c <__aeabi_i2f>
 80051a4:	4603      	mov	r3, r0
 80051a6:	4a10      	ldr	r2, [pc, #64]	; (80051e8 <main+0xd60>)
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	e03a      	b.n	8005222 <main+0xd9a>
 80051ac:	20000030 	.word	0x20000030
 80051b0:	20000268 	.word	0x20000268
 80051b4:	20000018 	.word	0x20000018
 80051b8:	20000288 	.word	0x20000288
 80051bc:	20000280 	.word	0x20000280
 80051c0:	20000008 	.word	0x20000008
 80051c4:	20000020 	.word	0x20000020
 80051c8:	20000290 	.word	0x20000290
 80051cc:	20000274 	.word	0x20000274
 80051d0:	2000025c 	.word	0x2000025c
 80051d4:	20000250 	.word	0x20000250
 80051d8:	20000278 	.word	0x20000278
 80051dc:	20000028 	.word	0x20000028
 80051e0:	3fe00000 	.word	0x3fe00000
 80051e4:	20000284 	.word	0x20000284
 80051e8:	2000026c 	.word	0x2000026c
 80051ec:	20000034 	.word	0x20000034
	 		  else if ( pid_i_mem_yaw < pid_max_yaw * -1 ) pid_i_mem_yaw = pid_max_yaw * -1;
 80051f0:	4b31      	ldr	r3, [pc, #196]	; (80052b8 <main+0xe30>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	425b      	negs	r3, r3
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fb fd48 	bl	8000c8c <__aeabi_i2f>
 80051fc:	4602      	mov	r2, r0
 80051fe:	4b2f      	ldr	r3, [pc, #188]	; (80052bc <main+0xe34>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4619      	mov	r1, r3
 8005204:	4610      	mov	r0, r2
 8005206:	f7fb ff51 	bl	80010ac <__aeabi_fcmpgt>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d008      	beq.n	8005222 <main+0xd9a>
 8005210:	4b29      	ldr	r3, [pc, #164]	; (80052b8 <main+0xe30>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	425b      	negs	r3, r3
 8005216:	4618      	mov	r0, r3
 8005218:	f7fb fd38 	bl	8000c8c <__aeabi_i2f>
 800521c:	4603      	mov	r3, r0
 800521e:	4a27      	ldr	r2, [pc, #156]	; (80052bc <main+0xe34>)
 8005220:	6013      	str	r3, [r2, #0]

	 		  pid_yaw_output = ( pid_p_gain_yaw * (pid_error_temp) ) + pid_i_mem_yaw + ( pid_d_gain_yaw * (( pid_error_temp - pid_last_yaw_d_error )/dt));
 8005222:	4b27      	ldr	r3, [pc, #156]	; (80052c0 <main+0xe38>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a27      	ldr	r2, [pc, #156]	; (80052c4 <main+0xe3c>)
 8005228:	6812      	ldr	r2, [r2, #0]
 800522a:	4611      	mov	r1, r2
 800522c:	4618      	mov	r0, r3
 800522e:	f7fb fd81 	bl	8000d34 <__aeabi_fmul>
 8005232:	4603      	mov	r3, r0
 8005234:	461a      	mov	r2, r3
 8005236:	4b21      	ldr	r3, [pc, #132]	; (80052bc <main+0xe34>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4619      	mov	r1, r3
 800523c:	4610      	mov	r0, r2
 800523e:	f7fb fc71 	bl	8000b24 <__addsf3>
 8005242:	4603      	mov	r3, r0
 8005244:	461c      	mov	r4, r3
 8005246:	4b1f      	ldr	r3, [pc, #124]	; (80052c4 <main+0xe3c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a1f      	ldr	r2, [pc, #124]	; (80052c8 <main+0xe40>)
 800524c:	6812      	ldr	r2, [r2, #0]
 800524e:	4611      	mov	r1, r2
 8005250:	4618      	mov	r0, r3
 8005252:	f7fb fc65 	bl	8000b20 <__aeabi_fsub>
 8005256:	4603      	mov	r3, r0
 8005258:	461a      	mov	r2, r3
 800525a:	4b1c      	ldr	r3, [pc, #112]	; (80052cc <main+0xe44>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4619      	mov	r1, r3
 8005260:	4610      	mov	r0, r2
 8005262:	f7fb fe1b 	bl	8000e9c <__aeabi_fdiv>
 8005266:	4603      	mov	r3, r0
 8005268:	461a      	mov	r2, r3
 800526a:	4b19      	ldr	r3, [pc, #100]	; (80052d0 <main+0xe48>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4619      	mov	r1, r3
 8005270:	4610      	mov	r0, r2
 8005272:	f7fb fd5f 	bl	8000d34 <__aeabi_fmul>
 8005276:	4603      	mov	r3, r0
 8005278:	4619      	mov	r1, r3
 800527a:	4620      	mov	r0, r4
 800527c:	f7fb fc52 	bl	8000b24 <__addsf3>
 8005280:	4603      	mov	r3, r0
 8005282:	461a      	mov	r2, r3
 8005284:	4b13      	ldr	r3, [pc, #76]	; (80052d4 <main+0xe4c>)
 8005286:	601a      	str	r2, [r3, #0]

	 		  if ( pid_yaw_output > pid_max_yaw ) pid_yaw_output = pid_max_yaw;
 8005288:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <main+0xe30>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4618      	mov	r0, r3
 800528e:	f7fb fcfd 	bl	8000c8c <__aeabi_i2f>
 8005292:	4602      	mov	r2, r0
 8005294:	4b0f      	ldr	r3, [pc, #60]	; (80052d4 <main+0xe4c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4619      	mov	r1, r3
 800529a:	4610      	mov	r0, r2
 800529c:	f7fb fee8 	bl	8001070 <__aeabi_fcmplt>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d018      	beq.n	80052d8 <main+0xe50>
 80052a6:	4b04      	ldr	r3, [pc, #16]	; (80052b8 <main+0xe30>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fb fcee 	bl	8000c8c <__aeabi_i2f>
 80052b0:	4603      	mov	r3, r0
 80052b2:	4a08      	ldr	r2, [pc, #32]	; (80052d4 <main+0xe4c>)
 80052b4:	6013      	str	r3, [r2, #0]
 80052b6:	e028      	b.n	800530a <main+0xe82>
 80052b8:	20000034 	.word	0x20000034
 80052bc:	2000026c 	.word	0x2000026c
 80052c0:	20000024 	.word	0x20000024
 80052c4:	20000288 	.word	0x20000288
 80052c8:	20000284 	.word	0x20000284
 80052cc:	20000008 	.word	0x20000008
 80052d0:	20000260 	.word	0x20000260
 80052d4:	20000294 	.word	0x20000294
	 		  else if ( pid_yaw_output < pid_max_yaw * -1 ) pid_yaw_output = pid_max_yaw * -1;
 80052d8:	4b87      	ldr	r3, [pc, #540]	; (80054f8 <main+0x1070>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	425b      	negs	r3, r3
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fb fcd4 	bl	8000c8c <__aeabi_i2f>
 80052e4:	4602      	mov	r2, r0
 80052e6:	4b85      	ldr	r3, [pc, #532]	; (80054fc <main+0x1074>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4619      	mov	r1, r3
 80052ec:	4610      	mov	r0, r2
 80052ee:	f7fb fedd 	bl	80010ac <__aeabi_fcmpgt>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d008      	beq.n	800530a <main+0xe82>
 80052f8:	4b7f      	ldr	r3, [pc, #508]	; (80054f8 <main+0x1070>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	425b      	negs	r3, r3
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fb fcc4 	bl	8000c8c <__aeabi_i2f>
 8005304:	4603      	mov	r3, r0
 8005306:	4a7d      	ldr	r2, [pc, #500]	; (80054fc <main+0x1074>)
 8005308:	6013      	str	r3, [r2, #0]

	 		  pid_last_yaw_d_error = pid_error_temp;
 800530a:	4b7d      	ldr	r3, [pc, #500]	; (8005500 <main+0x1078>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a7d      	ldr	r2, [pc, #500]	; (8005504 <main+0x107c>)
 8005310:	6013      	str	r3, [r2, #0]
	 		  pid_i_mem_yaw_last = pid_i_mem_pitch;
 8005312:	4b7d      	ldr	r3, [pc, #500]	; (8005508 <main+0x1080>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a7d      	ldr	r2, [pc, #500]	; (800550c <main+0x1084>)
 8005318:	6013      	str	r3, [r2, #0]



	 		  throttle = receiver_input_channel_1;
 800531a:	4b7d      	ldr	r3, [pc, #500]	; (8005510 <main+0x1088>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a7d      	ldr	r2, [pc, #500]	; (8005514 <main+0x108c>)
 8005320:	6013      	str	r3, [r2, #0]


	 		  if ( start == 2 ){
 8005322:	4b7d      	ldr	r3, [pc, #500]	; (8005518 <main+0x1090>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b02      	cmp	r3, #2
 8005328:	f040 8108 	bne.w	800553c <main+0x10b4>
	 			  if ( throttle > 1800 ) throttle = 1800;
 800532c:	4b79      	ldr	r3, [pc, #484]	; (8005514 <main+0x108c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8005334:	dd03      	ble.n	800533e <main+0xeb6>
 8005336:	4b77      	ldr	r3, [pc, #476]	; (8005514 <main+0x108c>)
 8005338:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800533c:	601a      	str	r2, [r3, #0]

	 			  esc_1 = throttle - pid_pitch_output - pid_roll_output - pid_yaw_output;        //Calculate the pulse for esc 1 (front-right - CCW).
 800533e:	4b75      	ldr	r3, [pc, #468]	; (8005514 <main+0x108c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4618      	mov	r0, r3
 8005344:	f7fb fca2 	bl	8000c8c <__aeabi_i2f>
 8005348:	4602      	mov	r2, r0
 800534a:	4b74      	ldr	r3, [pc, #464]	; (800551c <main+0x1094>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4619      	mov	r1, r3
 8005350:	4610      	mov	r0, r2
 8005352:	f7fb fbe5 	bl	8000b20 <__aeabi_fsub>
 8005356:	4603      	mov	r3, r0
 8005358:	461a      	mov	r2, r3
 800535a:	4b71      	ldr	r3, [pc, #452]	; (8005520 <main+0x1098>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4619      	mov	r1, r3
 8005360:	4610      	mov	r0, r2
 8005362:	f7fb fbdd 	bl	8000b20 <__aeabi_fsub>
 8005366:	4603      	mov	r3, r0
 8005368:	461a      	mov	r2, r3
 800536a:	4b64      	ldr	r3, [pc, #400]	; (80054fc <main+0x1074>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4619      	mov	r1, r3
 8005370:	4610      	mov	r0, r2
 8005372:	f7fb fbd5 	bl	8000b20 <__aeabi_fsub>
 8005376:	4603      	mov	r3, r0
 8005378:	4618      	mov	r0, r3
 800537a:	f7fb feb7 	bl	80010ec <__aeabi_f2iz>
 800537e:	4603      	mov	r3, r0
 8005380:	4a68      	ldr	r2, [pc, #416]	; (8005524 <main+0x109c>)
 8005382:	6013      	str	r3, [r2, #0]
	 			  esc_2 = throttle + pid_pitch_output - pid_roll_output + pid_yaw_output;        //Calculate the pulse for esc 2 (rear-right - CW).
 8005384:	4b63      	ldr	r3, [pc, #396]	; (8005514 <main+0x108c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4618      	mov	r0, r3
 800538a:	f7fb fc7f 	bl	8000c8c <__aeabi_i2f>
 800538e:	4602      	mov	r2, r0
 8005390:	4b62      	ldr	r3, [pc, #392]	; (800551c <main+0x1094>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4619      	mov	r1, r3
 8005396:	4610      	mov	r0, r2
 8005398:	f7fb fbc4 	bl	8000b24 <__addsf3>
 800539c:	4603      	mov	r3, r0
 800539e:	461a      	mov	r2, r3
 80053a0:	4b5f      	ldr	r3, [pc, #380]	; (8005520 <main+0x1098>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4619      	mov	r1, r3
 80053a6:	4610      	mov	r0, r2
 80053a8:	f7fb fbba 	bl	8000b20 <__aeabi_fsub>
 80053ac:	4603      	mov	r3, r0
 80053ae:	461a      	mov	r2, r3
 80053b0:	4b52      	ldr	r3, [pc, #328]	; (80054fc <main+0x1074>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4619      	mov	r1, r3
 80053b6:	4610      	mov	r0, r2
 80053b8:	f7fb fbb4 	bl	8000b24 <__addsf3>
 80053bc:	4603      	mov	r3, r0
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fb fe94 	bl	80010ec <__aeabi_f2iz>
 80053c4:	4603      	mov	r3, r0
 80053c6:	4a58      	ldr	r2, [pc, #352]	; (8005528 <main+0x10a0>)
 80053c8:	6013      	str	r3, [r2, #0]
	 			  esc_3 = throttle + pid_pitch_output + pid_roll_output - pid_yaw_output;        //Calculate the pulse for esc 3 (rear-left - CCW).
 80053ca:	4b52      	ldr	r3, [pc, #328]	; (8005514 <main+0x108c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fb fc5c 	bl	8000c8c <__aeabi_i2f>
 80053d4:	4602      	mov	r2, r0
 80053d6:	4b51      	ldr	r3, [pc, #324]	; (800551c <main+0x1094>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4619      	mov	r1, r3
 80053dc:	4610      	mov	r0, r2
 80053de:	f7fb fba1 	bl	8000b24 <__addsf3>
 80053e2:	4603      	mov	r3, r0
 80053e4:	461a      	mov	r2, r3
 80053e6:	4b4e      	ldr	r3, [pc, #312]	; (8005520 <main+0x1098>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4619      	mov	r1, r3
 80053ec:	4610      	mov	r0, r2
 80053ee:	f7fb fb99 	bl	8000b24 <__addsf3>
 80053f2:	4603      	mov	r3, r0
 80053f4:	461a      	mov	r2, r3
 80053f6:	4b41      	ldr	r3, [pc, #260]	; (80054fc <main+0x1074>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4619      	mov	r1, r3
 80053fc:	4610      	mov	r0, r2
 80053fe:	f7fb fb8f 	bl	8000b20 <__aeabi_fsub>
 8005402:	4603      	mov	r3, r0
 8005404:	4618      	mov	r0, r3
 8005406:	f7fb fe71 	bl	80010ec <__aeabi_f2iz>
 800540a:	4603      	mov	r3, r0
 800540c:	4a47      	ldr	r2, [pc, #284]	; (800552c <main+0x10a4>)
 800540e:	6013      	str	r3, [r2, #0]
	 			  esc_4 = throttle - pid_pitch_output + pid_roll_output + pid_yaw_output;        //Calculate the pulse for esc 4 (front-left - CW).
 8005410:	4b40      	ldr	r3, [pc, #256]	; (8005514 <main+0x108c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4618      	mov	r0, r3
 8005416:	f7fb fc39 	bl	8000c8c <__aeabi_i2f>
 800541a:	4602      	mov	r2, r0
 800541c:	4b3f      	ldr	r3, [pc, #252]	; (800551c <main+0x1094>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4619      	mov	r1, r3
 8005422:	4610      	mov	r0, r2
 8005424:	f7fb fb7c 	bl	8000b20 <__aeabi_fsub>
 8005428:	4603      	mov	r3, r0
 800542a:	461a      	mov	r2, r3
 800542c:	4b3c      	ldr	r3, [pc, #240]	; (8005520 <main+0x1098>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4619      	mov	r1, r3
 8005432:	4610      	mov	r0, r2
 8005434:	f7fb fb76 	bl	8000b24 <__addsf3>
 8005438:	4603      	mov	r3, r0
 800543a:	461a      	mov	r2, r3
 800543c:	4b2f      	ldr	r3, [pc, #188]	; (80054fc <main+0x1074>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4619      	mov	r1, r3
 8005442:	4610      	mov	r0, r2
 8005444:	f7fb fb6e 	bl	8000b24 <__addsf3>
 8005448:	4603      	mov	r3, r0
 800544a:	4618      	mov	r0, r3
 800544c:	f7fb fe4e 	bl	80010ec <__aeabi_f2iz>
 8005450:	4603      	mov	r3, r0
 8005452:	4a37      	ldr	r2, [pc, #220]	; (8005530 <main+0x10a8>)
 8005454:	6013      	str	r3, [r2, #0]

	 			  if ( esc_1 < min_throthle ) esc_1 = min_throthle;
 8005456:	4b33      	ldr	r3, [pc, #204]	; (8005524 <main+0x109c>)
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	4b36      	ldr	r3, [pc, #216]	; (8005534 <main+0x10ac>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	429a      	cmp	r2, r3
 8005460:	da03      	bge.n	800546a <main+0xfe2>
 8005462:	4b34      	ldr	r3, [pc, #208]	; (8005534 <main+0x10ac>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a2f      	ldr	r2, [pc, #188]	; (8005524 <main+0x109c>)
 8005468:	6013      	str	r3, [r2, #0]
	 			  if ( esc_2 < min_throthle ) esc_2 = min_throthle;
 800546a:	4b2f      	ldr	r3, [pc, #188]	; (8005528 <main+0x10a0>)
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	4b31      	ldr	r3, [pc, #196]	; (8005534 <main+0x10ac>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	429a      	cmp	r2, r3
 8005474:	da03      	bge.n	800547e <main+0xff6>
 8005476:	4b2f      	ldr	r3, [pc, #188]	; (8005534 <main+0x10ac>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a2b      	ldr	r2, [pc, #172]	; (8005528 <main+0x10a0>)
 800547c:	6013      	str	r3, [r2, #0]
	 			  if ( esc_3 < min_throthle ) esc_3 = min_throthle;
 800547e:	4b2b      	ldr	r3, [pc, #172]	; (800552c <main+0x10a4>)
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	4b2c      	ldr	r3, [pc, #176]	; (8005534 <main+0x10ac>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	da03      	bge.n	8005492 <main+0x100a>
 800548a:	4b2a      	ldr	r3, [pc, #168]	; (8005534 <main+0x10ac>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a27      	ldr	r2, [pc, #156]	; (800552c <main+0x10a4>)
 8005490:	6013      	str	r3, [r2, #0]
	 			  if ( esc_4 < min_throthle ) esc_4 = min_throthle;
 8005492:	4b27      	ldr	r3, [pc, #156]	; (8005530 <main+0x10a8>)
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	4b27      	ldr	r3, [pc, #156]	; (8005534 <main+0x10ac>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	da03      	bge.n	80054a6 <main+0x101e>
 800549e:	4b25      	ldr	r3, [pc, #148]	; (8005534 <main+0x10ac>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a23      	ldr	r2, [pc, #140]	; (8005530 <main+0x10a8>)
 80054a4:	6013      	str	r3, [r2, #0]

	 			  if ( esc_1 > max_throthle ) esc_1 = max_throthle;
 80054a6:	4b1f      	ldr	r3, [pc, #124]	; (8005524 <main+0x109c>)
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	4b23      	ldr	r3, [pc, #140]	; (8005538 <main+0x10b0>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	dd03      	ble.n	80054ba <main+0x1032>
 80054b2:	4b21      	ldr	r3, [pc, #132]	; (8005538 <main+0x10b0>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a1b      	ldr	r2, [pc, #108]	; (8005524 <main+0x109c>)
 80054b8:	6013      	str	r3, [r2, #0]
	 			  if ( esc_2 > max_throthle ) esc_2 = max_throthle;
 80054ba:	4b1b      	ldr	r3, [pc, #108]	; (8005528 <main+0x10a0>)
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	4b1e      	ldr	r3, [pc, #120]	; (8005538 <main+0x10b0>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	dd03      	ble.n	80054ce <main+0x1046>
 80054c6:	4b1c      	ldr	r3, [pc, #112]	; (8005538 <main+0x10b0>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a17      	ldr	r2, [pc, #92]	; (8005528 <main+0x10a0>)
 80054cc:	6013      	str	r3, [r2, #0]
	 			  if ( esc_3 > max_throthle ) esc_3 = max_throthle;
 80054ce:	4b17      	ldr	r3, [pc, #92]	; (800552c <main+0x10a4>)
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	4b19      	ldr	r3, [pc, #100]	; (8005538 <main+0x10b0>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	dd03      	ble.n	80054e2 <main+0x105a>
 80054da:	4b17      	ldr	r3, [pc, #92]	; (8005538 <main+0x10b0>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a13      	ldr	r2, [pc, #76]	; (800552c <main+0x10a4>)
 80054e0:	6013      	str	r3, [r2, #0]
	 			  if ( esc_4 > max_throthle ) esc_4 = max_throthle;
 80054e2:	4b13      	ldr	r3, [pc, #76]	; (8005530 <main+0x10a8>)
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	4b14      	ldr	r3, [pc, #80]	; (8005538 <main+0x10b0>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	dd36      	ble.n	800555c <main+0x10d4>
 80054ee:	4b12      	ldr	r3, [pc, #72]	; (8005538 <main+0x10b0>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a0f      	ldr	r2, [pc, #60]	; (8005530 <main+0x10a8>)
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	e031      	b.n	800555c <main+0x10d4>
 80054f8:	20000034 	.word	0x20000034
 80054fc:	20000294 	.word	0x20000294
 8005500:	20000288 	.word	0x20000288
 8005504:	20000284 	.word	0x20000284
 8005508:	20000268 	.word	0x20000268
 800550c:	20000278 	.word	0x20000278
 8005510:	200001f4 	.word	0x200001f4
 8005514:	2000020c 	.word	0x2000020c
 8005518:	200002a8 	.word	0x200002a8
 800551c:	20000290 	.word	0x20000290
 8005520:	2000028c 	.word	0x2000028c
 8005524:	20000298 	.word	0x20000298
 8005528:	2000029c 	.word	0x2000029c
 800552c:	200002a0 	.word	0x200002a0
 8005530:	200002a4 	.word	0x200002a4
 8005534:	20000038 	.word	0x20000038
 8005538:	2000003c 	.word	0x2000003c


	 		  }else{
	 			  esc_1 = disable_motor;
 800553c:	4b27      	ldr	r3, [pc, #156]	; (80055dc <main+0x1154>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a27      	ldr	r2, [pc, #156]	; (80055e0 <main+0x1158>)
 8005542:	6013      	str	r3, [r2, #0]
	 			  esc_2 = disable_motor;
 8005544:	4b25      	ldr	r3, [pc, #148]	; (80055dc <main+0x1154>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a26      	ldr	r2, [pc, #152]	; (80055e4 <main+0x115c>)
 800554a:	6013      	str	r3, [r2, #0]
	 			  esc_3 = disable_motor;
 800554c:	4b23      	ldr	r3, [pc, #140]	; (80055dc <main+0x1154>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a25      	ldr	r2, [pc, #148]	; (80055e8 <main+0x1160>)
 8005552:	6013      	str	r3, [r2, #0]
	 			  esc_4 = disable_motor;
 8005554:	4b21      	ldr	r3, [pc, #132]	; (80055dc <main+0x1154>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a24      	ldr	r2, [pc, #144]	; (80055ec <main+0x1164>)
 800555a:	6013      	str	r3, [r2, #0]
	 		  }

	 		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,esc_1);
 800555c:	4b20      	ldr	r3, [pc, #128]	; (80055e0 <main+0x1158>)
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	4b23      	ldr	r3, [pc, #140]	; (80055f0 <main+0x1168>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	635a      	str	r2, [r3, #52]	; 0x34
	 		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,esc_2);
 8005566:	4b1f      	ldr	r3, [pc, #124]	; (80055e4 <main+0x115c>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	4b21      	ldr	r3, [pc, #132]	; (80055f0 <main+0x1168>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	639a      	str	r2, [r3, #56]	; 0x38
	 		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,esc_3);
 8005570:	4b1d      	ldr	r3, [pc, #116]	; (80055e8 <main+0x1160>)
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	4b1e      	ldr	r3, [pc, #120]	; (80055f0 <main+0x1168>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	63da      	str	r2, [r3, #60]	; 0x3c
	 		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,esc_4);
 800557a:	4b1c      	ldr	r3, [pc, #112]	; (80055ec <main+0x1164>)
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	4b1c      	ldr	r3, [pc, #112]	; (80055f0 <main+0x1168>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	641a      	str	r2, [r3, #64]	; 0x40

	 		  if (abs(__HAL_TIM_GET_COUNTER(&htim2) - loop_timer) > 7000 ){
 8005584:	4b1b      	ldr	r3, [pc, #108]	; (80055f4 <main+0x116c>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	4a1b      	ldr	r2, [pc, #108]	; (80055f8 <main+0x1170>)
 800558c:	8812      	ldrh	r2, [r2, #0]
 800558e:	1a9b      	subs	r3, r3, r2
 8005590:	2b00      	cmp	r3, #0
 8005592:	bfb8      	it	lt
 8005594:	425b      	neglt	r3, r3
 8005596:	f641 3258 	movw	r2, #7000	; 0x1b58
 800559a:	4293      	cmp	r3, r2
 800559c:	dd03      	ble.n	80055a6 <main+0x111e>
	 			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 800559e:	2104      	movs	r1, #4
 80055a0:	4816      	ldr	r0, [pc, #88]	; (80055fc <main+0x1174>)
 80055a2:	f000 fecb 	bl	800633c <HAL_GPIO_TogglePin>
	 		  }

	 	//	  cuoi = HAL_GetTick() - dau;
	 		// uint32_t cuoi = HAL_GetTick() - dau;
	 		 //uint32_t cuoi2 = abs(__HAL_TIM_GET_COUNTER(&htim2) - loop_timer);
	 		 while ( abs(__HAL_TIM_GET_COUNTER(&htim2) - loop_timer) < 6000 );
 80055a6:	bf00      	nop
 80055a8:	4b12      	ldr	r3, [pc, #72]	; (80055f4 <main+0x116c>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	4a12      	ldr	r2, [pc, #72]	; (80055f8 <main+0x1170>)
 80055b0:	8812      	ldrh	r2, [r2, #0]
 80055b2:	1a9b      	subs	r3, r3, r2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	bfb8      	it	lt
 80055b8:	425b      	neglt	r3, r3
 80055ba:	f241 726f 	movw	r2, #5999	; 0x176f
 80055be:	4293      	cmp	r3, r2
 80055c0:	ddf2      	ble.n	80055a8 <main+0x1120>
	 		 //cuoi2 = abs(__HAL_TIM_GET_COUNTER(&htim2) - loop_timer);
	 		 __HAL_TIM_SET_COUNTER(&htim2,0);
 80055c2:	4b0c      	ldr	r3, [pc, #48]	; (80055f4 <main+0x116c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2200      	movs	r2, #0
 80055c8:	625a      	str	r2, [r3, #36]	; 0x24
	 		 loop_timer = __HAL_TIM_GET_COUNTER(&htim2);
 80055ca:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <main+0x116c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <main+0x1170>)
 80055d4:	801a      	strh	r2, [r3, #0]
 	  	  receiver_input_channel_1 = ch[2]; //thr
 80055d6:	f7fe bfd4 	b.w	8004582 <main+0xfa>
 80055da:	bf00      	nop
 80055dc:	20000040 	.word	0x20000040
 80055e0:	20000298 	.word	0x20000298
 80055e4:	2000029c 	.word	0x2000029c
 80055e8:	200002a0 	.word	0x200002a0
 80055ec:	200002a4 	.word	0x200002a4
 80055f0:	200003b0 	.word	0x200003b0
 80055f4:	20000368 	.word	0x20000368
 80055f8:	20000220 	.word	0x20000220
 80055fc:	40010c00 	.word	0x40010c00

08005600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b090      	sub	sp, #64	; 0x40
 8005604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005606:	f107 0318 	add.w	r3, r7, #24
 800560a:	2228      	movs	r2, #40	; 0x28
 800560c:	2100      	movs	r1, #0
 800560e:	4618      	mov	r0, r3
 8005610:	f003 f938 	bl	8008884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005614:	1d3b      	adds	r3, r7, #4
 8005616:	2200      	movs	r2, #0
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	605a      	str	r2, [r3, #4]
 800561c:	609a      	str	r2, [r3, #8]
 800561e:	60da      	str	r2, [r3, #12]
 8005620:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005622:	2301      	movs	r3, #1
 8005624:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005626:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800562a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800562c:	2300      	movs	r3, #0
 800562e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005630:	2301      	movs	r3, #1
 8005632:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005634:	2302      	movs	r3, #2
 8005636:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005638:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800563c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800563e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005642:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005644:	f107 0318 	add.w	r3, r7, #24
 8005648:	4618      	mov	r0, r3
 800564a:	f001 fedd 	bl	8007408 <HAL_RCC_OscConfig>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8005654:	f000 f9bc 	bl	80059d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005658:	230f      	movs	r3, #15
 800565a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800565c:	2302      	movs	r3, #2
 800565e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005660:	2300      	movs	r3, #0
 8005662:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005664:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800566a:	2300      	movs	r3, #0
 800566c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800566e:	1d3b      	adds	r3, r7, #4
 8005670:	2102      	movs	r1, #2
 8005672:	4618      	mov	r0, r3
 8005674:	f002 f94a 	bl	800790c <HAL_RCC_ClockConfig>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800567e:	f000 f9a7 	bl	80059d0 <Error_Handler>
  }
}
 8005682:	bf00      	nop
 8005684:	3740      	adds	r7, #64	; 0x40
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
	...

0800568c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005690:	4b12      	ldr	r3, [pc, #72]	; (80056dc <MX_I2C1_Init+0x50>)
 8005692:	4a13      	ldr	r2, [pc, #76]	; (80056e0 <MX_I2C1_Init+0x54>)
 8005694:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005696:	4b11      	ldr	r3, [pc, #68]	; (80056dc <MX_I2C1_Init+0x50>)
 8005698:	4a12      	ldr	r2, [pc, #72]	; (80056e4 <MX_I2C1_Init+0x58>)
 800569a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800569c:	4b0f      	ldr	r3, [pc, #60]	; (80056dc <MX_I2C1_Init+0x50>)
 800569e:	2200      	movs	r2, #0
 80056a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80056a2:	4b0e      	ldr	r3, [pc, #56]	; (80056dc <MX_I2C1_Init+0x50>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80056a8:	4b0c      	ldr	r3, [pc, #48]	; (80056dc <MX_I2C1_Init+0x50>)
 80056aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80056ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80056b0:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <MX_I2C1_Init+0x50>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80056b6:	4b09      	ldr	r3, [pc, #36]	; (80056dc <MX_I2C1_Init+0x50>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80056bc:	4b07      	ldr	r3, [pc, #28]	; (80056dc <MX_I2C1_Init+0x50>)
 80056be:	2200      	movs	r2, #0
 80056c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80056c2:	4b06      	ldr	r3, [pc, #24]	; (80056dc <MX_I2C1_Init+0x50>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80056c8:	4804      	ldr	r0, [pc, #16]	; (80056dc <MX_I2C1_Init+0x50>)
 80056ca:	f000 fe69 	bl	80063a0 <HAL_I2C_Init>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80056d4:	f000 f97c 	bl	80059d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80056d8:	bf00      	nop
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	20000314 	.word	0x20000314
 80056e0:	40005400 	.word	0x40005400
 80056e4:	000186a0 	.word	0x000186a0

080056e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056ee:	f107 0308 	add.w	r3, r7, #8
 80056f2:	2200      	movs	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	605a      	str	r2, [r3, #4]
 80056f8:	609a      	str	r2, [r3, #8]
 80056fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056fc:	463b      	mov	r3, r7
 80056fe:	2200      	movs	r2, #0
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005704:	4b1d      	ldr	r3, [pc, #116]	; (800577c <MX_TIM2_Init+0x94>)
 8005706:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800570a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800570c:	4b1b      	ldr	r3, [pc, #108]	; (800577c <MX_TIM2_Init+0x94>)
 800570e:	2247      	movs	r2, #71	; 0x47
 8005710:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005712:	4b1a      	ldr	r3, [pc, #104]	; (800577c <MX_TIM2_Init+0x94>)
 8005714:	2200      	movs	r2, #0
 8005716:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8005718:	4b18      	ldr	r3, [pc, #96]	; (800577c <MX_TIM2_Init+0x94>)
 800571a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800571e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005720:	4b16      	ldr	r3, [pc, #88]	; (800577c <MX_TIM2_Init+0x94>)
 8005722:	2200      	movs	r2, #0
 8005724:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005726:	4b15      	ldr	r3, [pc, #84]	; (800577c <MX_TIM2_Init+0x94>)
 8005728:	2200      	movs	r2, #0
 800572a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800572c:	4813      	ldr	r0, [pc, #76]	; (800577c <MX_TIM2_Init+0x94>)
 800572e:	f002 fa67 	bl	8007c00 <HAL_TIM_Base_Init>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005738:	f000 f94a 	bl	80059d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800573c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005740:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005742:	f107 0308 	add.w	r3, r7, #8
 8005746:	4619      	mov	r1, r3
 8005748:	480c      	ldr	r0, [pc, #48]	; (800577c <MX_TIM2_Init+0x94>)
 800574a:	f002 fca7 	bl	800809c <HAL_TIM_ConfigClockSource>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8005754:	f000 f93c 	bl	80059d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005758:	2300      	movs	r3, #0
 800575a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800575c:	2300      	movs	r3, #0
 800575e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005760:	463b      	mov	r3, r7
 8005762:	4619      	mov	r1, r3
 8005764:	4805      	ldr	r0, [pc, #20]	; (800577c <MX_TIM2_Init+0x94>)
 8005766:	f003 f805 	bl	8008774 <HAL_TIMEx_MasterConfigSynchronization>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8005770:	f000 f92e 	bl	80059d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005774:	bf00      	nop
 8005776:	3718      	adds	r7, #24
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	20000368 	.word	0x20000368

08005780 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b08a      	sub	sp, #40	; 0x28
 8005784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005786:	f107 0320 	add.w	r3, r7, #32
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005790:	1d3b      	adds	r3, r7, #4
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	605a      	str	r2, [r3, #4]
 8005798:	609a      	str	r2, [r3, #8]
 800579a:	60da      	str	r2, [r3, #12]
 800579c:	611a      	str	r2, [r3, #16]
 800579e:	615a      	str	r2, [r3, #20]
 80057a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80057a2:	4b32      	ldr	r3, [pc, #200]	; (800586c <MX_TIM3_Init+0xec>)
 80057a4:	4a32      	ldr	r2, [pc, #200]	; (8005870 <MX_TIM3_Init+0xf0>)
 80057a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80057a8:	4b30      	ldr	r3, [pc, #192]	; (800586c <MX_TIM3_Init+0xec>)
 80057aa:	2247      	movs	r2, #71	; 0x47
 80057ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057ae:	4b2f      	ldr	r3, [pc, #188]	; (800586c <MX_TIM3_Init+0xec>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 80057b4:	4b2d      	ldr	r3, [pc, #180]	; (800586c <MX_TIM3_Init+0xec>)
 80057b6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80057ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057bc:	4b2b      	ldr	r3, [pc, #172]	; (800586c <MX_TIM3_Init+0xec>)
 80057be:	2200      	movs	r2, #0
 80057c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057c2:	4b2a      	ldr	r3, [pc, #168]	; (800586c <MX_TIM3_Init+0xec>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80057c8:	4828      	ldr	r0, [pc, #160]	; (800586c <MX_TIM3_Init+0xec>)
 80057ca:	f002 fab3 	bl	8007d34 <HAL_TIM_PWM_Init>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80057d4:	f000 f8fc 	bl	80059d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057d8:	2300      	movs	r3, #0
 80057da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057dc:	2300      	movs	r3, #0
 80057de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80057e0:	f107 0320 	add.w	r3, r7, #32
 80057e4:	4619      	mov	r1, r3
 80057e6:	4821      	ldr	r0, [pc, #132]	; (800586c <MX_TIM3_Init+0xec>)
 80057e8:	f002 ffc4 	bl	8008774 <HAL_TIMEx_MasterConfigSynchronization>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80057f2:	f000 f8ed 	bl	80059d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80057f6:	2360      	movs	r3, #96	; 0x60
 80057f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80057fa:	2300      	movs	r3, #0
 80057fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80057fe:	2300      	movs	r3, #0
 8005800:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005802:	2300      	movs	r3, #0
 8005804:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005806:	1d3b      	adds	r3, r7, #4
 8005808:	2200      	movs	r2, #0
 800580a:	4619      	mov	r1, r3
 800580c:	4817      	ldr	r0, [pc, #92]	; (800586c <MX_TIM3_Init+0xec>)
 800580e:	f002 fb83 	bl	8007f18 <HAL_TIM_PWM_ConfigChannel>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8005818:	f000 f8da 	bl	80059d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800581c:	1d3b      	adds	r3, r7, #4
 800581e:	2204      	movs	r2, #4
 8005820:	4619      	mov	r1, r3
 8005822:	4812      	ldr	r0, [pc, #72]	; (800586c <MX_TIM3_Init+0xec>)
 8005824:	f002 fb78 	bl	8007f18 <HAL_TIM_PWM_ConfigChannel>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800582e:	f000 f8cf 	bl	80059d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005832:	1d3b      	adds	r3, r7, #4
 8005834:	2208      	movs	r2, #8
 8005836:	4619      	mov	r1, r3
 8005838:	480c      	ldr	r0, [pc, #48]	; (800586c <MX_TIM3_Init+0xec>)
 800583a:	f002 fb6d 	bl	8007f18 <HAL_TIM_PWM_ConfigChannel>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d001      	beq.n	8005848 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8005844:	f000 f8c4 	bl	80059d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005848:	1d3b      	adds	r3, r7, #4
 800584a:	220c      	movs	r2, #12
 800584c:	4619      	mov	r1, r3
 800584e:	4807      	ldr	r0, [pc, #28]	; (800586c <MX_TIM3_Init+0xec>)
 8005850:	f002 fb62 	bl	8007f18 <HAL_TIM_PWM_ConfigChannel>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 800585a:	f000 f8b9 	bl	80059d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800585e:	4803      	ldr	r0, [pc, #12]	; (800586c <MX_TIM3_Init+0xec>)
 8005860:	f000 f98c 	bl	8005b7c <HAL_TIM_MspPostInit>

}
 8005864:	bf00      	nop
 8005866:	3728      	adds	r7, #40	; 0x28
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	200003b0 	.word	0x200003b0
 8005870:	40000400 	.word	0x40000400

08005874 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800587a:	f107 0308 	add.w	r3, r7, #8
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	605a      	str	r2, [r3, #4]
 8005884:	609a      	str	r2, [r3, #8]
 8005886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005888:	463b      	mov	r3, r7
 800588a:	2200      	movs	r2, #0
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005890:	4b1d      	ldr	r3, [pc, #116]	; (8005908 <MX_TIM4_Init+0x94>)
 8005892:	4a1e      	ldr	r2, [pc, #120]	; (800590c <MX_TIM4_Init+0x98>)
 8005894:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8005896:	4b1c      	ldr	r3, [pc, #112]	; (8005908 <MX_TIM4_Init+0x94>)
 8005898:	2247      	movs	r2, #71	; 0x47
 800589a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800589c:	4b1a      	ldr	r3, [pc, #104]	; (8005908 <MX_TIM4_Init+0x94>)
 800589e:	2200      	movs	r2, #0
 80058a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80058a2:	4b19      	ldr	r3, [pc, #100]	; (8005908 <MX_TIM4_Init+0x94>)
 80058a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058aa:	4b17      	ldr	r3, [pc, #92]	; (8005908 <MX_TIM4_Init+0x94>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058b0:	4b15      	ldr	r3, [pc, #84]	; (8005908 <MX_TIM4_Init+0x94>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80058b6:	4814      	ldr	r0, [pc, #80]	; (8005908 <MX_TIM4_Init+0x94>)
 80058b8:	f002 f9a2 	bl	8007c00 <HAL_TIM_Base_Init>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80058c2:	f000 f885 	bl	80059d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80058c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80058cc:	f107 0308 	add.w	r3, r7, #8
 80058d0:	4619      	mov	r1, r3
 80058d2:	480d      	ldr	r0, [pc, #52]	; (8005908 <MX_TIM4_Init+0x94>)
 80058d4:	f002 fbe2 	bl	800809c <HAL_TIM_ConfigClockSource>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80058de:	f000 f877 	bl	80059d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058e2:	2300      	movs	r3, #0
 80058e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058e6:	2300      	movs	r3, #0
 80058e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80058ea:	463b      	mov	r3, r7
 80058ec:	4619      	mov	r1, r3
 80058ee:	4806      	ldr	r0, [pc, #24]	; (8005908 <MX_TIM4_Init+0x94>)
 80058f0:	f002 ff40 	bl	8008774 <HAL_TIMEx_MasterConfigSynchronization>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80058fa:	f000 f869 	bl	80059d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80058fe:	bf00      	nop
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	200003f8 	.word	0x200003f8
 800590c:	40000800 	.word	0x40000800

08005910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b088      	sub	sp, #32
 8005914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005916:	f107 0310 	add.w	r3, r7, #16
 800591a:	2200      	movs	r2, #0
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	605a      	str	r2, [r3, #4]
 8005920:	609a      	str	r2, [r3, #8]
 8005922:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005924:	4b27      	ldr	r3, [pc, #156]	; (80059c4 <MX_GPIO_Init+0xb4>)
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	4a26      	ldr	r2, [pc, #152]	; (80059c4 <MX_GPIO_Init+0xb4>)
 800592a:	f043 0320 	orr.w	r3, r3, #32
 800592e:	6193      	str	r3, [r2, #24]
 8005930:	4b24      	ldr	r3, [pc, #144]	; (80059c4 <MX_GPIO_Init+0xb4>)
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	f003 0320 	and.w	r3, r3, #32
 8005938:	60fb      	str	r3, [r7, #12]
 800593a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800593c:	4b21      	ldr	r3, [pc, #132]	; (80059c4 <MX_GPIO_Init+0xb4>)
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	4a20      	ldr	r2, [pc, #128]	; (80059c4 <MX_GPIO_Init+0xb4>)
 8005942:	f043 0304 	orr.w	r3, r3, #4
 8005946:	6193      	str	r3, [r2, #24]
 8005948:	4b1e      	ldr	r3, [pc, #120]	; (80059c4 <MX_GPIO_Init+0xb4>)
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	f003 0304 	and.w	r3, r3, #4
 8005950:	60bb      	str	r3, [r7, #8]
 8005952:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005954:	4b1b      	ldr	r3, [pc, #108]	; (80059c4 <MX_GPIO_Init+0xb4>)
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	4a1a      	ldr	r2, [pc, #104]	; (80059c4 <MX_GPIO_Init+0xb4>)
 800595a:	f043 0308 	orr.w	r3, r3, #8
 800595e:	6193      	str	r3, [r2, #24]
 8005960:	4b18      	ldr	r3, [pc, #96]	; (80059c4 <MX_GPIO_Init+0xb4>)
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	f003 0308 	and.w	r3, r3, #8
 8005968:	607b      	str	r3, [r7, #4]
 800596a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800596c:	2200      	movs	r2, #0
 800596e:	2104      	movs	r1, #4
 8005970:	4815      	ldr	r0, [pc, #84]	; (80059c8 <MX_GPIO_Init+0xb8>)
 8005972:	f000 fccb 	bl	800630c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005976:	2304      	movs	r3, #4
 8005978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800597a:	2301      	movs	r3, #1
 800597c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800597e:	2301      	movs	r3, #1
 8005980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005982:	2302      	movs	r3, #2
 8005984:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005986:	f107 0310 	add.w	r3, r7, #16
 800598a:	4619      	mov	r1, r3
 800598c:	480e      	ldr	r0, [pc, #56]	; (80059c8 <MX_GPIO_Init+0xb8>)
 800598e:	f000 fb39 	bl	8006004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005992:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005996:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005998:	4b0c      	ldr	r3, [pc, #48]	; (80059cc <MX_GPIO_Init+0xbc>)
 800599a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800599c:	2300      	movs	r3, #0
 800599e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059a0:	f107 0310 	add.w	r3, r7, #16
 80059a4:	4619      	mov	r1, r3
 80059a6:	4808      	ldr	r0, [pc, #32]	; (80059c8 <MX_GPIO_Init+0xb8>)
 80059a8:	f000 fb2c 	bl	8006004 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80059ac:	2200      	movs	r2, #0
 80059ae:	2101      	movs	r1, #1
 80059b0:	2028      	movs	r0, #40	; 0x28
 80059b2:	f000 faf0 	bl	8005f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80059b6:	2028      	movs	r0, #40	; 0x28
 80059b8:	f000 fb09 	bl	8005fce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80059bc:	bf00      	nop
 80059be:	3720      	adds	r7, #32
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	40021000 	.word	0x40021000
 80059c8:	40010c00 	.word	0x40010c00
 80059cc:	10110000 	.word	0x10110000

080059d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80059d0:	b480      	push	{r7}
 80059d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80059d4:	b672      	cpsid	i
}
 80059d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80059d8:	e7fe      	b.n	80059d8 <Error_Handler+0x8>
	...

080059dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80059e2:	4b15      	ldr	r3, [pc, #84]	; (8005a38 <HAL_MspInit+0x5c>)
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	4a14      	ldr	r2, [pc, #80]	; (8005a38 <HAL_MspInit+0x5c>)
 80059e8:	f043 0301 	orr.w	r3, r3, #1
 80059ec:	6193      	str	r3, [r2, #24]
 80059ee:	4b12      	ldr	r3, [pc, #72]	; (8005a38 <HAL_MspInit+0x5c>)
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	60bb      	str	r3, [r7, #8]
 80059f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80059fa:	4b0f      	ldr	r3, [pc, #60]	; (8005a38 <HAL_MspInit+0x5c>)
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	4a0e      	ldr	r2, [pc, #56]	; (8005a38 <HAL_MspInit+0x5c>)
 8005a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a04:	61d3      	str	r3, [r2, #28]
 8005a06:	4b0c      	ldr	r3, [pc, #48]	; (8005a38 <HAL_MspInit+0x5c>)
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a0e:	607b      	str	r3, [r7, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005a12:	4b0a      	ldr	r3, [pc, #40]	; (8005a3c <HAL_MspInit+0x60>)
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	4a04      	ldr	r2, [pc, #16]	; (8005a3c <HAL_MspInit+0x60>)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a2e:	bf00      	nop
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bc80      	pop	{r7}
 8005a36:	4770      	bx	lr
 8005a38:	40021000 	.word	0x40021000
 8005a3c:	40010000 	.word	0x40010000

08005a40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b08a      	sub	sp, #40	; 0x28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a48:	f107 0314 	add.w	r3, r7, #20
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	605a      	str	r2, [r3, #4]
 8005a52:	609a      	str	r2, [r3, #8]
 8005a54:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a1d      	ldr	r2, [pc, #116]	; (8005ad0 <HAL_I2C_MspInit+0x90>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d132      	bne.n	8005ac6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a60:	4b1c      	ldr	r3, [pc, #112]	; (8005ad4 <HAL_I2C_MspInit+0x94>)
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	4a1b      	ldr	r2, [pc, #108]	; (8005ad4 <HAL_I2C_MspInit+0x94>)
 8005a66:	f043 0308 	orr.w	r3, r3, #8
 8005a6a:	6193      	str	r3, [r2, #24]
 8005a6c:	4b19      	ldr	r3, [pc, #100]	; (8005ad4 <HAL_I2C_MspInit+0x94>)
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	f003 0308 	and.w	r3, r3, #8
 8005a74:	613b      	str	r3, [r7, #16]
 8005a76:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005a78:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a7e:	2312      	movs	r3, #18
 8005a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a82:	2303      	movs	r3, #3
 8005a84:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a86:	f107 0314 	add.w	r3, r7, #20
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	4812      	ldr	r0, [pc, #72]	; (8005ad8 <HAL_I2C_MspInit+0x98>)
 8005a8e:	f000 fab9 	bl	8006004 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8005a92:	4b12      	ldr	r3, [pc, #72]	; (8005adc <HAL_I2C_MspInit+0x9c>)
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	627b      	str	r3, [r7, #36]	; 0x24
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	f043 0302 	orr.w	r3, r3, #2
 8005aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa8:	4a0c      	ldr	r2, [pc, #48]	; (8005adc <HAL_I2C_MspInit+0x9c>)
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005aae:	4b09      	ldr	r3, [pc, #36]	; (8005ad4 <HAL_I2C_MspInit+0x94>)
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	4a08      	ldr	r2, [pc, #32]	; (8005ad4 <HAL_I2C_MspInit+0x94>)
 8005ab4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ab8:	61d3      	str	r3, [r2, #28]
 8005aba:	4b06      	ldr	r3, [pc, #24]	; (8005ad4 <HAL_I2C_MspInit+0x94>)
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005ac6:	bf00      	nop
 8005ac8:	3728      	adds	r7, #40	; 0x28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	40005400 	.word	0x40005400
 8005ad4:	40021000 	.word	0x40021000
 8005ad8:	40010c00 	.word	0x40010c00
 8005adc:	40010000 	.word	0x40010000

08005ae0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af0:	d10c      	bne.n	8005b0c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005af2:	4b11      	ldr	r3, [pc, #68]	; (8005b38 <HAL_TIM_Base_MspInit+0x58>)
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	4a10      	ldr	r2, [pc, #64]	; (8005b38 <HAL_TIM_Base_MspInit+0x58>)
 8005af8:	f043 0301 	orr.w	r3, r3, #1
 8005afc:	61d3      	str	r3, [r2, #28]
 8005afe:	4b0e      	ldr	r3, [pc, #56]	; (8005b38 <HAL_TIM_Base_MspInit+0x58>)
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005b0a:	e010      	b.n	8005b2e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a0a      	ldr	r2, [pc, #40]	; (8005b3c <HAL_TIM_Base_MspInit+0x5c>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d10b      	bne.n	8005b2e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005b16:	4b08      	ldr	r3, [pc, #32]	; (8005b38 <HAL_TIM_Base_MspInit+0x58>)
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	4a07      	ldr	r2, [pc, #28]	; (8005b38 <HAL_TIM_Base_MspInit+0x58>)
 8005b1c:	f043 0304 	orr.w	r3, r3, #4
 8005b20:	61d3      	str	r3, [r2, #28]
 8005b22:	4b05      	ldr	r3, [pc, #20]	; (8005b38 <HAL_TIM_Base_MspInit+0x58>)
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	f003 0304 	and.w	r3, r3, #4
 8005b2a:	60bb      	str	r3, [r7, #8]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
}
 8005b2e:	bf00      	nop
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bc80      	pop	{r7}
 8005b36:	4770      	bx	lr
 8005b38:	40021000 	.word	0x40021000
 8005b3c:	40000800 	.word	0x40000800

08005b40 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a09      	ldr	r2, [pc, #36]	; (8005b74 <HAL_TIM_PWM_MspInit+0x34>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d10b      	bne.n	8005b6a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005b52:	4b09      	ldr	r3, [pc, #36]	; (8005b78 <HAL_TIM_PWM_MspInit+0x38>)
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	4a08      	ldr	r2, [pc, #32]	; (8005b78 <HAL_TIM_PWM_MspInit+0x38>)
 8005b58:	f043 0302 	orr.w	r3, r3, #2
 8005b5c:	61d3      	str	r3, [r2, #28]
 8005b5e:	4b06      	ldr	r3, [pc, #24]	; (8005b78 <HAL_TIM_PWM_MspInit+0x38>)
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005b6a:	bf00      	nop
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bc80      	pop	{r7}
 8005b72:	4770      	bx	lr
 8005b74:	40000400 	.word	0x40000400
 8005b78:	40021000 	.word	0x40021000

08005b7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b088      	sub	sp, #32
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b84:	f107 0310 	add.w	r3, r7, #16
 8005b88:	2200      	movs	r2, #0
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	605a      	str	r2, [r3, #4]
 8005b8e:	609a      	str	r2, [r3, #8]
 8005b90:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a1b      	ldr	r2, [pc, #108]	; (8005c04 <HAL_TIM_MspPostInit+0x88>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d12f      	bne.n	8005bfc <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b9c:	4b1a      	ldr	r3, [pc, #104]	; (8005c08 <HAL_TIM_MspPostInit+0x8c>)
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	4a19      	ldr	r2, [pc, #100]	; (8005c08 <HAL_TIM_MspPostInit+0x8c>)
 8005ba2:	f043 0304 	orr.w	r3, r3, #4
 8005ba6:	6193      	str	r3, [r2, #24]
 8005ba8:	4b17      	ldr	r3, [pc, #92]	; (8005c08 <HAL_TIM_MspPostInit+0x8c>)
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	f003 0304 	and.w	r3, r3, #4
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bb4:	4b14      	ldr	r3, [pc, #80]	; (8005c08 <HAL_TIM_MspPostInit+0x8c>)
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	4a13      	ldr	r2, [pc, #76]	; (8005c08 <HAL_TIM_MspPostInit+0x8c>)
 8005bba:	f043 0308 	orr.w	r3, r3, #8
 8005bbe:	6193      	str	r3, [r2, #24]
 8005bc0:	4b11      	ldr	r3, [pc, #68]	; (8005c08 <HAL_TIM_MspPostInit+0x8c>)
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	f003 0308 	and.w	r3, r3, #8
 8005bc8:	60bb      	str	r3, [r7, #8]
 8005bca:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005bcc:	23c0      	movs	r3, #192	; 0xc0
 8005bce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bd8:	f107 0310 	add.w	r3, r7, #16
 8005bdc:	4619      	mov	r1, r3
 8005bde:	480b      	ldr	r0, [pc, #44]	; (8005c0c <HAL_TIM_MspPostInit+0x90>)
 8005be0:	f000 fa10 	bl	8006004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005be4:	2303      	movs	r3, #3
 8005be6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005be8:	2302      	movs	r3, #2
 8005bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bec:	2302      	movs	r3, #2
 8005bee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bf0:	f107 0310 	add.w	r3, r7, #16
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	4806      	ldr	r0, [pc, #24]	; (8005c10 <HAL_TIM_MspPostInit+0x94>)
 8005bf8:	f000 fa04 	bl	8006004 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005bfc:	bf00      	nop
 8005bfe:	3720      	adds	r7, #32
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	40000400 	.word	0x40000400
 8005c08:	40021000 	.word	0x40021000
 8005c0c:	40010800 	.word	0x40010800
 8005c10:	40010c00 	.word	0x40010c00

08005c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005c14:	b480      	push	{r7}
 8005c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005c18:	e7fe      	b.n	8005c18 <NMI_Handler+0x4>
	...

08005c1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8005c20:	2201      	movs	r2, #1
 8005c22:	2104      	movs	r1, #4
 8005c24:	4801      	ldr	r0, [pc, #4]	; (8005c2c <HardFault_Handler+0x10>)
 8005c26:	f000 fb71 	bl	800630c <HAL_GPIO_WritePin>
 8005c2a:	e7f9      	b.n	8005c20 <HardFault_Handler+0x4>
 8005c2c:	40010c00 	.word	0x40010c00

08005c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c30:	b480      	push	{r7}
 8005c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c34:	e7fe      	b.n	8005c34 <MemManage_Handler+0x4>

08005c36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c36:	b480      	push	{r7}
 8005c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c3a:	e7fe      	b.n	8005c3a <BusFault_Handler+0x4>

08005c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c40:	e7fe      	b.n	8005c40 <UsageFault_Handler+0x4>

08005c42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005c42:	b480      	push	{r7}
 8005c44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005c46:	bf00      	nop
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bc80      	pop	{r7}
 8005c4c:	4770      	bx	lr

08005c4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c52:	bf00      	nop
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bc80      	pop	{r7}
 8005c58:	4770      	bx	lr

08005c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005c5e:	bf00      	nop
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bc80      	pop	{r7}
 8005c64:	4770      	bx	lr

08005c66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c6a:	f000 f87d 	bl	8005d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c6e:	bf00      	nop
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8005c76:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005c7a:	f000 fb79 	bl	8006370 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005c7e:	bf00      	nop
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005c82:	b480      	push	{r7}
 8005c84:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005c86:	bf00      	nop
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bc80      	pop	{r7}
 8005c8c:	4770      	bx	lr
	...

08005c90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005c90:	f7ff fff7 	bl	8005c82 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005c94:	480b      	ldr	r0, [pc, #44]	; (8005cc4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005c96:	490c      	ldr	r1, [pc, #48]	; (8005cc8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005c98:	4a0c      	ldr	r2, [pc, #48]	; (8005ccc <LoopFillZerobss+0x16>)
  movs r3, #0
 8005c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005c9c:	e002      	b.n	8005ca4 <LoopCopyDataInit>

08005c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ca2:	3304      	adds	r3, #4

08005ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ca8:	d3f9      	bcc.n	8005c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005caa:	4a09      	ldr	r2, [pc, #36]	; (8005cd0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005cac:	4c09      	ldr	r4, [pc, #36]	; (8005cd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005cb0:	e001      	b.n	8005cb6 <LoopFillZerobss>

08005cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005cb4:	3204      	adds	r2, #4

08005cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005cb8:	d3fb      	bcc.n	8005cb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005cba:	f002 fdbf 	bl	800883c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005cbe:	f7fe fbe3 	bl	8004488 <main>
  bx lr
 8005cc2:	4770      	bx	lr
  ldr r0, =_sdata
 8005cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005cc8:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8005ccc:	08009164 	.word	0x08009164
  ldr r2, =_sbss
 8005cd0:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8005cd4:	20000444 	.word	0x20000444

08005cd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005cd8:	e7fe      	b.n	8005cd8 <ADC1_2_IRQHandler>
	...

08005cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ce0:	4b08      	ldr	r3, [pc, #32]	; (8005d04 <HAL_Init+0x28>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a07      	ldr	r2, [pc, #28]	; (8005d04 <HAL_Init+0x28>)
 8005ce6:	f043 0310 	orr.w	r3, r3, #16
 8005cea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005cec:	2003      	movs	r0, #3
 8005cee:	f000 f947 	bl	8005f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005cf2:	200f      	movs	r0, #15
 8005cf4:	f000 f808 	bl	8005d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005cf8:	f7ff fe70 	bl	80059dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	40022000 	.word	0x40022000

08005d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005d10:	4b12      	ldr	r3, [pc, #72]	; (8005d5c <HAL_InitTick+0x54>)
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	4b12      	ldr	r3, [pc, #72]	; (8005d60 <HAL_InitTick+0x58>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	4619      	mov	r1, r3
 8005d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 f95f 	bl	8005fea <HAL_SYSTICK_Config>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e00e      	b.n	8005d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b0f      	cmp	r3, #15
 8005d3a:	d80a      	bhi.n	8005d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	6879      	ldr	r1, [r7, #4]
 8005d40:	f04f 30ff 	mov.w	r0, #4294967295
 8005d44:	f000 f927 	bl	8005f96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005d48:	4a06      	ldr	r2, [pc, #24]	; (8005d64 <HAL_InitTick+0x5c>)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	e000      	b.n	8005d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	20000064 	.word	0x20000064
 8005d60:	2000006c 	.word	0x2000006c
 8005d64:	20000068 	.word	0x20000068

08005d68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005d6c:	4b05      	ldr	r3, [pc, #20]	; (8005d84 <HAL_IncTick+0x1c>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	461a      	mov	r2, r3
 8005d72:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <HAL_IncTick+0x20>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4413      	add	r3, r2
 8005d78:	4a03      	ldr	r2, [pc, #12]	; (8005d88 <HAL_IncTick+0x20>)
 8005d7a:	6013      	str	r3, [r2, #0]
}
 8005d7c:	bf00      	nop
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bc80      	pop	{r7}
 8005d82:	4770      	bx	lr
 8005d84:	2000006c 	.word	0x2000006c
 8005d88:	20000440 	.word	0x20000440

08005d8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8005d90:	4b02      	ldr	r3, [pc, #8]	; (8005d9c <HAL_GetTick+0x10>)
 8005d92:	681b      	ldr	r3, [r3, #0]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bc80      	pop	{r7}
 8005d9a:	4770      	bx	lr
 8005d9c:	20000440 	.word	0x20000440

08005da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005da8:	f7ff fff0 	bl	8005d8c <HAL_GetTick>
 8005dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db8:	d005      	beq.n	8005dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005dba:	4b0a      	ldr	r3, [pc, #40]	; (8005de4 <HAL_Delay+0x44>)
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005dc6:	bf00      	nop
 8005dc8:	f7ff ffe0 	bl	8005d8c <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d8f7      	bhi.n	8005dc8 <HAL_Delay+0x28>
  {
  }
}
 8005dd8:	bf00      	nop
 8005dda:	bf00      	nop
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	2000006c 	.word	0x2000006c

08005de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f003 0307 	and.w	r3, r3, #7
 8005df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005df8:	4b0c      	ldr	r3, [pc, #48]	; (8005e2c <__NVIC_SetPriorityGrouping+0x44>)
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e04:	4013      	ands	r3, r2
 8005e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e1a:	4a04      	ldr	r2, [pc, #16]	; (8005e2c <__NVIC_SetPriorityGrouping+0x44>)
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	60d3      	str	r3, [r2, #12]
}
 8005e20:	bf00      	nop
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bc80      	pop	{r7}
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	e000ed00 	.word	0xe000ed00

08005e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e30:	b480      	push	{r7}
 8005e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e34:	4b04      	ldr	r3, [pc, #16]	; (8005e48 <__NVIC_GetPriorityGrouping+0x18>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	0a1b      	lsrs	r3, r3, #8
 8005e3a:	f003 0307 	and.w	r3, r3, #7
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bc80      	pop	{r7}
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	e000ed00 	.word	0xe000ed00

08005e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	4603      	mov	r3, r0
 8005e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	db0b      	blt.n	8005e76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e5e:	79fb      	ldrb	r3, [r7, #7]
 8005e60:	f003 021f 	and.w	r2, r3, #31
 8005e64:	4906      	ldr	r1, [pc, #24]	; (8005e80 <__NVIC_EnableIRQ+0x34>)
 8005e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e6a:	095b      	lsrs	r3, r3, #5
 8005e6c:	2001      	movs	r0, #1
 8005e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8005e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e76:	bf00      	nop
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bc80      	pop	{r7}
 8005e7e:	4770      	bx	lr
 8005e80:	e000e100 	.word	0xe000e100

08005e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	6039      	str	r1, [r7, #0]
 8005e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	db0a      	blt.n	8005eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	490c      	ldr	r1, [pc, #48]	; (8005ed0 <__NVIC_SetPriority+0x4c>)
 8005e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ea2:	0112      	lsls	r2, r2, #4
 8005ea4:	b2d2      	uxtb	r2, r2
 8005ea6:	440b      	add	r3, r1
 8005ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005eac:	e00a      	b.n	8005ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	4908      	ldr	r1, [pc, #32]	; (8005ed4 <__NVIC_SetPriority+0x50>)
 8005eb4:	79fb      	ldrb	r3, [r7, #7]
 8005eb6:	f003 030f 	and.w	r3, r3, #15
 8005eba:	3b04      	subs	r3, #4
 8005ebc:	0112      	lsls	r2, r2, #4
 8005ebe:	b2d2      	uxtb	r2, r2
 8005ec0:	440b      	add	r3, r1
 8005ec2:	761a      	strb	r2, [r3, #24]
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bc80      	pop	{r7}
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	e000e100 	.word	0xe000e100
 8005ed4:	e000ed00 	.word	0xe000ed00

08005ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b089      	sub	sp, #36	; 0x24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	f1c3 0307 	rsb	r3, r3, #7
 8005ef2:	2b04      	cmp	r3, #4
 8005ef4:	bf28      	it	cs
 8005ef6:	2304      	movcs	r3, #4
 8005ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	3304      	adds	r3, #4
 8005efe:	2b06      	cmp	r3, #6
 8005f00:	d902      	bls.n	8005f08 <NVIC_EncodePriority+0x30>
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	3b03      	subs	r3, #3
 8005f06:	e000      	b.n	8005f0a <NVIC_EncodePriority+0x32>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	fa02 f303 	lsl.w	r3, r2, r3
 8005f16:	43da      	mvns	r2, r3
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	401a      	ands	r2, r3
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f20:	f04f 31ff 	mov.w	r1, #4294967295
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	fa01 f303 	lsl.w	r3, r1, r3
 8005f2a:	43d9      	mvns	r1, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f30:	4313      	orrs	r3, r2
         );
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3724      	adds	r7, #36	; 0x24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bc80      	pop	{r7}
 8005f3a:	4770      	bx	lr

08005f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f4c:	d301      	bcc.n	8005f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e00f      	b.n	8005f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f52:	4a0a      	ldr	r2, [pc, #40]	; (8005f7c <SysTick_Config+0x40>)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	3b01      	subs	r3, #1
 8005f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f5a:	210f      	movs	r1, #15
 8005f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f60:	f7ff ff90 	bl	8005e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f64:	4b05      	ldr	r3, [pc, #20]	; (8005f7c <SysTick_Config+0x40>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f6a:	4b04      	ldr	r3, [pc, #16]	; (8005f7c <SysTick_Config+0x40>)
 8005f6c:	2207      	movs	r2, #7
 8005f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	e000e010 	.word	0xe000e010

08005f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7ff ff2d 	bl	8005de8 <__NVIC_SetPriorityGrouping>
}
 8005f8e:	bf00      	nop
 8005f90:	3708      	adds	r7, #8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b086      	sub	sp, #24
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	60b9      	str	r1, [r7, #8]
 8005fa0:	607a      	str	r2, [r7, #4]
 8005fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005fa8:	f7ff ff42 	bl	8005e30 <__NVIC_GetPriorityGrouping>
 8005fac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	68b9      	ldr	r1, [r7, #8]
 8005fb2:	6978      	ldr	r0, [r7, #20]
 8005fb4:	f7ff ff90 	bl	8005ed8 <NVIC_EncodePriority>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fbe:	4611      	mov	r1, r2
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7ff ff5f 	bl	8005e84 <__NVIC_SetPriority>
}
 8005fc6:	bf00      	nop
 8005fc8:	3718      	adds	r7, #24
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b082      	sub	sp, #8
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7ff ff35 	bl	8005e4c <__NVIC_EnableIRQ>
}
 8005fe2:	bf00      	nop
 8005fe4:	3708      	adds	r7, #8
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b082      	sub	sp, #8
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7ff ffa2 	bl	8005f3c <SysTick_Config>
 8005ff8:	4603      	mov	r3, r0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
	...

08006004 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006004:	b480      	push	{r7}
 8006006:	b08b      	sub	sp, #44	; 0x2c
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800600e:	2300      	movs	r3, #0
 8006010:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006012:	2300      	movs	r3, #0
 8006014:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006016:	e169      	b.n	80062ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006018:	2201      	movs	r2, #1
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	fa02 f303 	lsl.w	r3, r2, r3
 8006020:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	69fa      	ldr	r2, [r7, #28]
 8006028:	4013      	ands	r3, r2
 800602a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	429a      	cmp	r2, r3
 8006032:	f040 8158 	bne.w	80062e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	4a9a      	ldr	r2, [pc, #616]	; (80062a4 <HAL_GPIO_Init+0x2a0>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d05e      	beq.n	80060fe <HAL_GPIO_Init+0xfa>
 8006040:	4a98      	ldr	r2, [pc, #608]	; (80062a4 <HAL_GPIO_Init+0x2a0>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d875      	bhi.n	8006132 <HAL_GPIO_Init+0x12e>
 8006046:	4a98      	ldr	r2, [pc, #608]	; (80062a8 <HAL_GPIO_Init+0x2a4>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d058      	beq.n	80060fe <HAL_GPIO_Init+0xfa>
 800604c:	4a96      	ldr	r2, [pc, #600]	; (80062a8 <HAL_GPIO_Init+0x2a4>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d86f      	bhi.n	8006132 <HAL_GPIO_Init+0x12e>
 8006052:	4a96      	ldr	r2, [pc, #600]	; (80062ac <HAL_GPIO_Init+0x2a8>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d052      	beq.n	80060fe <HAL_GPIO_Init+0xfa>
 8006058:	4a94      	ldr	r2, [pc, #592]	; (80062ac <HAL_GPIO_Init+0x2a8>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d869      	bhi.n	8006132 <HAL_GPIO_Init+0x12e>
 800605e:	4a94      	ldr	r2, [pc, #592]	; (80062b0 <HAL_GPIO_Init+0x2ac>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d04c      	beq.n	80060fe <HAL_GPIO_Init+0xfa>
 8006064:	4a92      	ldr	r2, [pc, #584]	; (80062b0 <HAL_GPIO_Init+0x2ac>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d863      	bhi.n	8006132 <HAL_GPIO_Init+0x12e>
 800606a:	4a92      	ldr	r2, [pc, #584]	; (80062b4 <HAL_GPIO_Init+0x2b0>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d046      	beq.n	80060fe <HAL_GPIO_Init+0xfa>
 8006070:	4a90      	ldr	r2, [pc, #576]	; (80062b4 <HAL_GPIO_Init+0x2b0>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d85d      	bhi.n	8006132 <HAL_GPIO_Init+0x12e>
 8006076:	2b12      	cmp	r3, #18
 8006078:	d82a      	bhi.n	80060d0 <HAL_GPIO_Init+0xcc>
 800607a:	2b12      	cmp	r3, #18
 800607c:	d859      	bhi.n	8006132 <HAL_GPIO_Init+0x12e>
 800607e:	a201      	add	r2, pc, #4	; (adr r2, 8006084 <HAL_GPIO_Init+0x80>)
 8006080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006084:	080060ff 	.word	0x080060ff
 8006088:	080060d9 	.word	0x080060d9
 800608c:	080060eb 	.word	0x080060eb
 8006090:	0800612d 	.word	0x0800612d
 8006094:	08006133 	.word	0x08006133
 8006098:	08006133 	.word	0x08006133
 800609c:	08006133 	.word	0x08006133
 80060a0:	08006133 	.word	0x08006133
 80060a4:	08006133 	.word	0x08006133
 80060a8:	08006133 	.word	0x08006133
 80060ac:	08006133 	.word	0x08006133
 80060b0:	08006133 	.word	0x08006133
 80060b4:	08006133 	.word	0x08006133
 80060b8:	08006133 	.word	0x08006133
 80060bc:	08006133 	.word	0x08006133
 80060c0:	08006133 	.word	0x08006133
 80060c4:	08006133 	.word	0x08006133
 80060c8:	080060e1 	.word	0x080060e1
 80060cc:	080060f5 	.word	0x080060f5
 80060d0:	4a79      	ldr	r2, [pc, #484]	; (80062b8 <HAL_GPIO_Init+0x2b4>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d013      	beq.n	80060fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80060d6:	e02c      	b.n	8006132 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	623b      	str	r3, [r7, #32]
          break;
 80060de:	e029      	b.n	8006134 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	3304      	adds	r3, #4
 80060e6:	623b      	str	r3, [r7, #32]
          break;
 80060e8:	e024      	b.n	8006134 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	3308      	adds	r3, #8
 80060f0:	623b      	str	r3, [r7, #32]
          break;
 80060f2:	e01f      	b.n	8006134 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	330c      	adds	r3, #12
 80060fa:	623b      	str	r3, [r7, #32]
          break;
 80060fc:	e01a      	b.n	8006134 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d102      	bne.n	800610c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006106:	2304      	movs	r3, #4
 8006108:	623b      	str	r3, [r7, #32]
          break;
 800610a:	e013      	b.n	8006134 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d105      	bne.n	8006120 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006114:	2308      	movs	r3, #8
 8006116:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	69fa      	ldr	r2, [r7, #28]
 800611c:	611a      	str	r2, [r3, #16]
          break;
 800611e:	e009      	b.n	8006134 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006120:	2308      	movs	r3, #8
 8006122:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	69fa      	ldr	r2, [r7, #28]
 8006128:	615a      	str	r2, [r3, #20]
          break;
 800612a:	e003      	b.n	8006134 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800612c:	2300      	movs	r3, #0
 800612e:	623b      	str	r3, [r7, #32]
          break;
 8006130:	e000      	b.n	8006134 <HAL_GPIO_Init+0x130>
          break;
 8006132:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	2bff      	cmp	r3, #255	; 0xff
 8006138:	d801      	bhi.n	800613e <HAL_GPIO_Init+0x13a>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	e001      	b.n	8006142 <HAL_GPIO_Init+0x13e>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	3304      	adds	r3, #4
 8006142:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	2bff      	cmp	r3, #255	; 0xff
 8006148:	d802      	bhi.n	8006150 <HAL_GPIO_Init+0x14c>
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	e002      	b.n	8006156 <HAL_GPIO_Init+0x152>
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	3b08      	subs	r3, #8
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	210f      	movs	r1, #15
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	fa01 f303 	lsl.w	r3, r1, r3
 8006164:	43db      	mvns	r3, r3
 8006166:	401a      	ands	r2, r3
 8006168:	6a39      	ldr	r1, [r7, #32]
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	fa01 f303 	lsl.w	r3, r1, r3
 8006170:	431a      	orrs	r2, r3
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 80b1 	beq.w	80062e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006184:	4b4d      	ldr	r3, [pc, #308]	; (80062bc <HAL_GPIO_Init+0x2b8>)
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	4a4c      	ldr	r2, [pc, #304]	; (80062bc <HAL_GPIO_Init+0x2b8>)
 800618a:	f043 0301 	orr.w	r3, r3, #1
 800618e:	6193      	str	r3, [r2, #24]
 8006190:	4b4a      	ldr	r3, [pc, #296]	; (80062bc <HAL_GPIO_Init+0x2b8>)
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	60bb      	str	r3, [r7, #8]
 800619a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800619c:	4a48      	ldr	r2, [pc, #288]	; (80062c0 <HAL_GPIO_Init+0x2bc>)
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	089b      	lsrs	r3, r3, #2
 80061a2:	3302      	adds	r3, #2
 80061a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	f003 0303 	and.w	r3, r3, #3
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	220f      	movs	r2, #15
 80061b4:	fa02 f303 	lsl.w	r3, r2, r3
 80061b8:	43db      	mvns	r3, r3
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	4013      	ands	r3, r2
 80061be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a40      	ldr	r2, [pc, #256]	; (80062c4 <HAL_GPIO_Init+0x2c0>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d013      	beq.n	80061f0 <HAL_GPIO_Init+0x1ec>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a3f      	ldr	r2, [pc, #252]	; (80062c8 <HAL_GPIO_Init+0x2c4>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d00d      	beq.n	80061ec <HAL_GPIO_Init+0x1e8>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a3e      	ldr	r2, [pc, #248]	; (80062cc <HAL_GPIO_Init+0x2c8>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d007      	beq.n	80061e8 <HAL_GPIO_Init+0x1e4>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a3d      	ldr	r2, [pc, #244]	; (80062d0 <HAL_GPIO_Init+0x2cc>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d101      	bne.n	80061e4 <HAL_GPIO_Init+0x1e0>
 80061e0:	2303      	movs	r3, #3
 80061e2:	e006      	b.n	80061f2 <HAL_GPIO_Init+0x1ee>
 80061e4:	2304      	movs	r3, #4
 80061e6:	e004      	b.n	80061f2 <HAL_GPIO_Init+0x1ee>
 80061e8:	2302      	movs	r3, #2
 80061ea:	e002      	b.n	80061f2 <HAL_GPIO_Init+0x1ee>
 80061ec:	2301      	movs	r3, #1
 80061ee:	e000      	b.n	80061f2 <HAL_GPIO_Init+0x1ee>
 80061f0:	2300      	movs	r3, #0
 80061f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f4:	f002 0203 	and.w	r2, r2, #3
 80061f8:	0092      	lsls	r2, r2, #2
 80061fa:	4093      	lsls	r3, r2
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006202:	492f      	ldr	r1, [pc, #188]	; (80062c0 <HAL_GPIO_Init+0x2bc>)
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	089b      	lsrs	r3, r3, #2
 8006208:	3302      	adds	r3, #2
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d006      	beq.n	800622a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800621c:	4b2d      	ldr	r3, [pc, #180]	; (80062d4 <HAL_GPIO_Init+0x2d0>)
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	492c      	ldr	r1, [pc, #176]	; (80062d4 <HAL_GPIO_Init+0x2d0>)
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	4313      	orrs	r3, r2
 8006226:	608b      	str	r3, [r1, #8]
 8006228:	e006      	b.n	8006238 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800622a:	4b2a      	ldr	r3, [pc, #168]	; (80062d4 <HAL_GPIO_Init+0x2d0>)
 800622c:	689a      	ldr	r2, [r3, #8]
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	43db      	mvns	r3, r3
 8006232:	4928      	ldr	r1, [pc, #160]	; (80062d4 <HAL_GPIO_Init+0x2d0>)
 8006234:	4013      	ands	r3, r2
 8006236:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d006      	beq.n	8006252 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006244:	4b23      	ldr	r3, [pc, #140]	; (80062d4 <HAL_GPIO_Init+0x2d0>)
 8006246:	68da      	ldr	r2, [r3, #12]
 8006248:	4922      	ldr	r1, [pc, #136]	; (80062d4 <HAL_GPIO_Init+0x2d0>)
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	4313      	orrs	r3, r2
 800624e:	60cb      	str	r3, [r1, #12]
 8006250:	e006      	b.n	8006260 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006252:	4b20      	ldr	r3, [pc, #128]	; (80062d4 <HAL_GPIO_Init+0x2d0>)
 8006254:	68da      	ldr	r2, [r3, #12]
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	43db      	mvns	r3, r3
 800625a:	491e      	ldr	r1, [pc, #120]	; (80062d4 <HAL_GPIO_Init+0x2d0>)
 800625c:	4013      	ands	r3, r2
 800625e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d006      	beq.n	800627a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800626c:	4b19      	ldr	r3, [pc, #100]	; (80062d4 <HAL_GPIO_Init+0x2d0>)
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	4918      	ldr	r1, [pc, #96]	; (80062d4 <HAL_GPIO_Init+0x2d0>)
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	4313      	orrs	r3, r2
 8006276:	604b      	str	r3, [r1, #4]
 8006278:	e006      	b.n	8006288 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800627a:	4b16      	ldr	r3, [pc, #88]	; (80062d4 <HAL_GPIO_Init+0x2d0>)
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	43db      	mvns	r3, r3
 8006282:	4914      	ldr	r1, [pc, #80]	; (80062d4 <HAL_GPIO_Init+0x2d0>)
 8006284:	4013      	ands	r3, r2
 8006286:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d021      	beq.n	80062d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006294:	4b0f      	ldr	r3, [pc, #60]	; (80062d4 <HAL_GPIO_Init+0x2d0>)
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	490e      	ldr	r1, [pc, #56]	; (80062d4 <HAL_GPIO_Init+0x2d0>)
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	4313      	orrs	r3, r2
 800629e:	600b      	str	r3, [r1, #0]
 80062a0:	e021      	b.n	80062e6 <HAL_GPIO_Init+0x2e2>
 80062a2:	bf00      	nop
 80062a4:	10320000 	.word	0x10320000
 80062a8:	10310000 	.word	0x10310000
 80062ac:	10220000 	.word	0x10220000
 80062b0:	10210000 	.word	0x10210000
 80062b4:	10120000 	.word	0x10120000
 80062b8:	10110000 	.word	0x10110000
 80062bc:	40021000 	.word	0x40021000
 80062c0:	40010000 	.word	0x40010000
 80062c4:	40010800 	.word	0x40010800
 80062c8:	40010c00 	.word	0x40010c00
 80062cc:	40011000 	.word	0x40011000
 80062d0:	40011400 	.word	0x40011400
 80062d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80062d8:	4b0b      	ldr	r3, [pc, #44]	; (8006308 <HAL_GPIO_Init+0x304>)
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	43db      	mvns	r3, r3
 80062e0:	4909      	ldr	r1, [pc, #36]	; (8006308 <HAL_GPIO_Init+0x304>)
 80062e2:	4013      	ands	r3, r2
 80062e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	3301      	adds	r3, #1
 80062ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	fa22 f303 	lsr.w	r3, r2, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f47f ae8e 	bne.w	8006018 <HAL_GPIO_Init+0x14>
  }
}
 80062fc:	bf00      	nop
 80062fe:	bf00      	nop
 8006300:	372c      	adds	r7, #44	; 0x2c
 8006302:	46bd      	mov	sp, r7
 8006304:	bc80      	pop	{r7}
 8006306:	4770      	bx	lr
 8006308:	40010400 	.word	0x40010400

0800630c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	460b      	mov	r3, r1
 8006316:	807b      	strh	r3, [r7, #2]
 8006318:	4613      	mov	r3, r2
 800631a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800631c:	787b      	ldrb	r3, [r7, #1]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d003      	beq.n	800632a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006322:	887a      	ldrh	r2, [r7, #2]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006328:	e003      	b.n	8006332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800632a:	887b      	ldrh	r3, [r7, #2]
 800632c:	041a      	lsls	r2, r3, #16
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	611a      	str	r2, [r3, #16]
}
 8006332:	bf00      	nop
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	bc80      	pop	{r7}
 800633a:	4770      	bx	lr

0800633c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	460b      	mov	r3, r1
 8006346:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800634e:	887a      	ldrh	r2, [r7, #2]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4013      	ands	r3, r2
 8006354:	041a      	lsls	r2, r3, #16
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	43d9      	mvns	r1, r3
 800635a:	887b      	ldrh	r3, [r7, #2]
 800635c:	400b      	ands	r3, r1
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	611a      	str	r2, [r3, #16]
}
 8006364:	bf00      	nop
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	bc80      	pop	{r7}
 800636c:	4770      	bx	lr
	...

08006370 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	4603      	mov	r3, r0
 8006378:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800637a:	4b08      	ldr	r3, [pc, #32]	; (800639c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800637c:	695a      	ldr	r2, [r3, #20]
 800637e:	88fb      	ldrh	r3, [r7, #6]
 8006380:	4013      	ands	r3, r2
 8006382:	2b00      	cmp	r3, #0
 8006384:	d006      	beq.n	8006394 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006386:	4a05      	ldr	r2, [pc, #20]	; (800639c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006388:	88fb      	ldrh	r3, [r7, #6]
 800638a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800638c:	88fb      	ldrh	r3, [r7, #6]
 800638e:	4618      	mov	r0, r3
 8006390:	f7fd fefa 	bl	8004188 <HAL_GPIO_EXTI_Callback>
  }
}
 8006394:	bf00      	nop
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	40010400 	.word	0x40010400

080063a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e12b      	b.n	800660a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d106      	bne.n	80063cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7ff fb3a 	bl	8005a40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2224      	movs	r2, #36	; 0x24
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 0201 	bic.w	r2, r2, #1
 80063e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006402:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006404:	f001 fbca 	bl	8007b9c <HAL_RCC_GetPCLK1Freq>
 8006408:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	4a81      	ldr	r2, [pc, #516]	; (8006614 <HAL_I2C_Init+0x274>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d807      	bhi.n	8006424 <HAL_I2C_Init+0x84>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4a80      	ldr	r2, [pc, #512]	; (8006618 <HAL_I2C_Init+0x278>)
 8006418:	4293      	cmp	r3, r2
 800641a:	bf94      	ite	ls
 800641c:	2301      	movls	r3, #1
 800641e:	2300      	movhi	r3, #0
 8006420:	b2db      	uxtb	r3, r3
 8006422:	e006      	b.n	8006432 <HAL_I2C_Init+0x92>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	4a7d      	ldr	r2, [pc, #500]	; (800661c <HAL_I2C_Init+0x27c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	bf94      	ite	ls
 800642c:	2301      	movls	r3, #1
 800642e:	2300      	movhi	r3, #0
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e0e7      	b.n	800660a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	4a78      	ldr	r2, [pc, #480]	; (8006620 <HAL_I2C_Init+0x280>)
 800643e:	fba2 2303 	umull	r2, r3, r2, r3
 8006442:	0c9b      	lsrs	r3, r3, #18
 8006444:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	430a      	orrs	r2, r1
 8006458:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	4a6a      	ldr	r2, [pc, #424]	; (8006614 <HAL_I2C_Init+0x274>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d802      	bhi.n	8006474 <HAL_I2C_Init+0xd4>
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	3301      	adds	r3, #1
 8006472:	e009      	b.n	8006488 <HAL_I2C_Init+0xe8>
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800647a:	fb02 f303 	mul.w	r3, r2, r3
 800647e:	4a69      	ldr	r2, [pc, #420]	; (8006624 <HAL_I2C_Init+0x284>)
 8006480:	fba2 2303 	umull	r2, r3, r2, r3
 8006484:	099b      	lsrs	r3, r3, #6
 8006486:	3301      	adds	r3, #1
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	6812      	ldr	r2, [r2, #0]
 800648c:	430b      	orrs	r3, r1
 800648e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800649a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	495c      	ldr	r1, [pc, #368]	; (8006614 <HAL_I2C_Init+0x274>)
 80064a4:	428b      	cmp	r3, r1
 80064a6:	d819      	bhi.n	80064dc <HAL_I2C_Init+0x13c>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	1e59      	subs	r1, r3, #1
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	005b      	lsls	r3, r3, #1
 80064b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80064b6:	1c59      	adds	r1, r3, #1
 80064b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80064bc:	400b      	ands	r3, r1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00a      	beq.n	80064d8 <HAL_I2C_Init+0x138>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	1e59      	subs	r1, r3, #1
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80064d0:	3301      	adds	r3, #1
 80064d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064d6:	e051      	b.n	800657c <HAL_I2C_Init+0x1dc>
 80064d8:	2304      	movs	r3, #4
 80064da:	e04f      	b.n	800657c <HAL_I2C_Init+0x1dc>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d111      	bne.n	8006508 <HAL_I2C_Init+0x168>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	1e58      	subs	r0, r3, #1
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6859      	ldr	r1, [r3, #4]
 80064ec:	460b      	mov	r3, r1
 80064ee:	005b      	lsls	r3, r3, #1
 80064f0:	440b      	add	r3, r1
 80064f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80064f6:	3301      	adds	r3, #1
 80064f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	bf0c      	ite	eq
 8006500:	2301      	moveq	r3, #1
 8006502:	2300      	movne	r3, #0
 8006504:	b2db      	uxtb	r3, r3
 8006506:	e012      	b.n	800652e <HAL_I2C_Init+0x18e>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	1e58      	subs	r0, r3, #1
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6859      	ldr	r1, [r3, #4]
 8006510:	460b      	mov	r3, r1
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	440b      	add	r3, r1
 8006516:	0099      	lsls	r1, r3, #2
 8006518:	440b      	add	r3, r1
 800651a:	fbb0 f3f3 	udiv	r3, r0, r3
 800651e:	3301      	adds	r3, #1
 8006520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006524:	2b00      	cmp	r3, #0
 8006526:	bf0c      	ite	eq
 8006528:	2301      	moveq	r3, #1
 800652a:	2300      	movne	r3, #0
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <HAL_I2C_Init+0x196>
 8006532:	2301      	movs	r3, #1
 8006534:	e022      	b.n	800657c <HAL_I2C_Init+0x1dc>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10e      	bne.n	800655c <HAL_I2C_Init+0x1bc>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	1e58      	subs	r0, r3, #1
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6859      	ldr	r1, [r3, #4]
 8006546:	460b      	mov	r3, r1
 8006548:	005b      	lsls	r3, r3, #1
 800654a:	440b      	add	r3, r1
 800654c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006550:	3301      	adds	r3, #1
 8006552:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800655a:	e00f      	b.n	800657c <HAL_I2C_Init+0x1dc>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	1e58      	subs	r0, r3, #1
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6859      	ldr	r1, [r3, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	440b      	add	r3, r1
 800656a:	0099      	lsls	r1, r3, #2
 800656c:	440b      	add	r3, r1
 800656e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006572:	3301      	adds	r3, #1
 8006574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006578:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800657c:	6879      	ldr	r1, [r7, #4]
 800657e:	6809      	ldr	r1, [r1, #0]
 8006580:	4313      	orrs	r3, r2
 8006582:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	69da      	ldr	r2, [r3, #28]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	431a      	orrs	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	430a      	orrs	r2, r1
 800659e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80065aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	6911      	ldr	r1, [r2, #16]
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	68d2      	ldr	r2, [r2, #12]
 80065b6:	4311      	orrs	r1, r2
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	6812      	ldr	r2, [r2, #0]
 80065bc:	430b      	orrs	r3, r1
 80065be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	695a      	ldr	r2, [r3, #20]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	431a      	orrs	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	430a      	orrs	r2, r1
 80065da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f042 0201 	orr.w	r2, r2, #1
 80065ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	000186a0 	.word	0x000186a0
 8006618:	001e847f 	.word	0x001e847f
 800661c:	003d08ff 	.word	0x003d08ff
 8006620:	431bde83 	.word	0x431bde83
 8006624:	10624dd3 	.word	0x10624dd3

08006628 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b088      	sub	sp, #32
 800662c:	af02      	add	r7, sp, #8
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	607a      	str	r2, [r7, #4]
 8006632:	461a      	mov	r2, r3
 8006634:	460b      	mov	r3, r1
 8006636:	817b      	strh	r3, [r7, #10]
 8006638:	4613      	mov	r3, r2
 800663a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800663c:	f7ff fba6 	bl	8005d8c <HAL_GetTick>
 8006640:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b20      	cmp	r3, #32
 800664c:	f040 80e0 	bne.w	8006810 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	2319      	movs	r3, #25
 8006656:	2201      	movs	r2, #1
 8006658:	4970      	ldr	r1, [pc, #448]	; (800681c <HAL_I2C_Master_Transmit+0x1f4>)
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 fc9e 	bl	8006f9c <I2C_WaitOnFlagUntilTimeout>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006666:	2302      	movs	r3, #2
 8006668:	e0d3      	b.n	8006812 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006670:	2b01      	cmp	r3, #1
 8006672:	d101      	bne.n	8006678 <HAL_I2C_Master_Transmit+0x50>
 8006674:	2302      	movs	r3, #2
 8006676:	e0cc      	b.n	8006812 <HAL_I2C_Master_Transmit+0x1ea>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b01      	cmp	r3, #1
 800668c:	d007      	beq.n	800669e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f042 0201 	orr.w	r2, r2, #1
 800669c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2221      	movs	r2, #33	; 0x21
 80066b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2210      	movs	r2, #16
 80066ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	893a      	ldrh	r2, [r7, #8]
 80066ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	4a50      	ldr	r2, [pc, #320]	; (8006820 <HAL_I2C_Master_Transmit+0x1f8>)
 80066de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80066e0:	8979      	ldrh	r1, [r7, #10]
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	6a3a      	ldr	r2, [r7, #32]
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f000 fb08 	bl	8006cfc <I2C_MasterRequestWrite>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e08d      	b.n	8006812 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066f6:	2300      	movs	r3, #0
 80066f8:	613b      	str	r3, [r7, #16]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	613b      	str	r3, [r7, #16]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	613b      	str	r3, [r7, #16]
 800670a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800670c:	e066      	b.n	80067dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	6a39      	ldr	r1, [r7, #32]
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f000 fd5c 	bl	80071d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00d      	beq.n	800673a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006722:	2b04      	cmp	r3, #4
 8006724:	d107      	bne.n	8006736 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006734:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e06b      	b.n	8006812 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	781a      	ldrb	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006754:	b29b      	uxth	r3, r3
 8006756:	3b01      	subs	r3, #1
 8006758:	b29a      	uxth	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006762:	3b01      	subs	r3, #1
 8006764:	b29a      	uxth	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b04      	cmp	r3, #4
 8006776:	d11b      	bne.n	80067b0 <HAL_I2C_Master_Transmit+0x188>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800677c:	2b00      	cmp	r3, #0
 800677e:	d017      	beq.n	80067b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006784:	781a      	ldrb	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006790:	1c5a      	adds	r2, r3, #1
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800679a:	b29b      	uxth	r3, r3
 800679c:	3b01      	subs	r3, #1
 800679e:	b29a      	uxth	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a8:	3b01      	subs	r3, #1
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	6a39      	ldr	r1, [r7, #32]
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 fd53 	bl	8007260 <I2C_WaitOnBTFFlagUntilTimeout>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00d      	beq.n	80067dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c4:	2b04      	cmp	r3, #4
 80067c6:	d107      	bne.n	80067d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e01a      	b.n	8006812 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d194      	bne.n	800670e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2220      	movs	r2, #32
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800680c:	2300      	movs	r3, #0
 800680e:	e000      	b.n	8006812 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006810:	2302      	movs	r3, #2
  }
}
 8006812:	4618      	mov	r0, r3
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	00100002 	.word	0x00100002
 8006820:	ffff0000 	.word	0xffff0000

08006824 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b08c      	sub	sp, #48	; 0x30
 8006828:	af02      	add	r7, sp, #8
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	607a      	str	r2, [r7, #4]
 800682e:	461a      	mov	r2, r3
 8006830:	460b      	mov	r3, r1
 8006832:	817b      	strh	r3, [r7, #10]
 8006834:	4613      	mov	r3, r2
 8006836:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800683c:	f7ff faa6 	bl	8005d8c <HAL_GetTick>
 8006840:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b20      	cmp	r3, #32
 800684c:	f040 824b 	bne.w	8006ce6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	2319      	movs	r3, #25
 8006856:	2201      	movs	r2, #1
 8006858:	497f      	ldr	r1, [pc, #508]	; (8006a58 <HAL_I2C_Master_Receive+0x234>)
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f000 fb9e 	bl	8006f9c <I2C_WaitOnFlagUntilTimeout>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d001      	beq.n	800686a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8006866:	2302      	movs	r3, #2
 8006868:	e23e      	b.n	8006ce8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006870:	2b01      	cmp	r3, #1
 8006872:	d101      	bne.n	8006878 <HAL_I2C_Master_Receive+0x54>
 8006874:	2302      	movs	r3, #2
 8006876:	e237      	b.n	8006ce8 <HAL_I2C_Master_Receive+0x4c4>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b01      	cmp	r3, #1
 800688c:	d007      	beq.n	800689e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f042 0201 	orr.w	r2, r2, #1
 800689c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2222      	movs	r2, #34	; 0x22
 80068b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2210      	movs	r2, #16
 80068ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	893a      	ldrh	r2, [r7, #8]
 80068ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	4a5f      	ldr	r2, [pc, #380]	; (8006a5c <HAL_I2C_Master_Receive+0x238>)
 80068de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80068e0:	8979      	ldrh	r1, [r7, #10]
 80068e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f000 fa8a 	bl	8006e00 <I2C_MasterRequestRead>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e1f8      	b.n	8006ce8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d113      	bne.n	8006926 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068fe:	2300      	movs	r3, #0
 8006900:	61fb      	str	r3, [r7, #28]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	695b      	ldr	r3, [r3, #20]
 8006908:	61fb      	str	r3, [r7, #28]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	61fb      	str	r3, [r7, #28]
 8006912:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	e1cc      	b.n	8006cc0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800692a:	2b01      	cmp	r3, #1
 800692c:	d11e      	bne.n	800696c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800693c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800693e:	b672      	cpsid	i
}
 8006940:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006942:	2300      	movs	r3, #0
 8006944:	61bb      	str	r3, [r7, #24]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	61bb      	str	r3, [r7, #24]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	61bb      	str	r3, [r7, #24]
 8006956:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006966:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006968:	b662      	cpsie	i
}
 800696a:	e035      	b.n	80069d8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006970:	2b02      	cmp	r3, #2
 8006972:	d11e      	bne.n	80069b2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006982:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006984:	b672      	cpsid	i
}
 8006986:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006988:	2300      	movs	r3, #0
 800698a:	617b      	str	r3, [r7, #20]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	617b      	str	r3, [r7, #20]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	617b      	str	r3, [r7, #20]
 800699c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80069ae:	b662      	cpsie	i
}
 80069b0:	e012      	b.n	80069d8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069c2:	2300      	movs	r3, #0
 80069c4:	613b      	str	r3, [r7, #16]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	613b      	str	r3, [r7, #16]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	613b      	str	r3, [r7, #16]
 80069d6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80069d8:	e172      	b.n	8006cc0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069de:	2b03      	cmp	r3, #3
 80069e0:	f200 811f 	bhi.w	8006c22 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d123      	bne.n	8006a34 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 fc7d 	bl	80072f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d001      	beq.n	8006a00 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e173      	b.n	8006ce8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	691a      	ldr	r2, [r3, #16]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a32:	e145      	b.n	8006cc0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d152      	bne.n	8006ae2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a42:	2200      	movs	r2, #0
 8006a44:	4906      	ldr	r1, [pc, #24]	; (8006a60 <HAL_I2C_Master_Receive+0x23c>)
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f000 faa8 	bl	8006f9c <I2C_WaitOnFlagUntilTimeout>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d008      	beq.n	8006a64 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e148      	b.n	8006ce8 <HAL_I2C_Master_Receive+0x4c4>
 8006a56:	bf00      	nop
 8006a58:	00100002 	.word	0x00100002
 8006a5c:	ffff0000 	.word	0xffff0000
 8006a60:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006a64:	b672      	cpsid	i
}
 8006a66:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	691a      	ldr	r2, [r3, #16]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	b2d2      	uxtb	r2, r2
 8006a84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006aaa:	b662      	cpsie	i
}
 8006aac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	691a      	ldr	r2, [r3, #16]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	b2d2      	uxtb	r2, r2
 8006aba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aca:	3b01      	subs	r3, #1
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ae0:	e0ee      	b.n	8006cc0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae8:	2200      	movs	r2, #0
 8006aea:	4981      	ldr	r1, [pc, #516]	; (8006cf0 <HAL_I2C_Master_Receive+0x4cc>)
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f000 fa55 	bl	8006f9c <I2C_WaitOnFlagUntilTimeout>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d001      	beq.n	8006afc <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e0f5      	b.n	8006ce8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b0a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006b0c:	b672      	cpsid	i
}
 8006b0e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	691a      	ldr	r2, [r3, #16]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1a:	b2d2      	uxtb	r2, r2
 8006b1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b22:	1c5a      	adds	r2, r3, #1
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006b42:	4b6c      	ldr	r3, [pc, #432]	; (8006cf4 <HAL_I2C_Master_Receive+0x4d0>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	08db      	lsrs	r3, r3, #3
 8006b48:	4a6b      	ldr	r2, [pc, #428]	; (8006cf8 <HAL_I2C_Master_Receive+0x4d4>)
 8006b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4e:	0a1a      	lsrs	r2, r3, #8
 8006b50:	4613      	mov	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	00da      	lsls	r2, r3, #3
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006b5c:	6a3b      	ldr	r3, [r7, #32]
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d118      	bne.n	8006b9a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2220      	movs	r2, #32
 8006b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	f043 0220 	orr.w	r2, r3, #32
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006b8a:	b662      	cpsie	i
}
 8006b8c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e0a6      	b.n	8006ce8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	695b      	ldr	r3, [r3, #20]
 8006ba0:	f003 0304 	and.w	r3, r3, #4
 8006ba4:	2b04      	cmp	r3, #4
 8006ba6:	d1d9      	bne.n	8006b5c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	691a      	ldr	r2, [r3, #16]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	b2d2      	uxtb	r2, r2
 8006bc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bca:	1c5a      	adds	r2, r3, #1
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	3b01      	subs	r3, #1
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006bea:	b662      	cpsie	i
}
 8006bec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	691a      	ldr	r2, [r3, #16]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf8:	b2d2      	uxtb	r2, r2
 8006bfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c00:	1c5a      	adds	r2, r3, #1
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c20:	e04e      	b.n	8006cc0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f000 fb62 	bl	80072f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e058      	b.n	8006ce8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	691a      	ldr	r2, [r3, #16]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	b2d2      	uxtb	r2, r2
 8006c42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c48:	1c5a      	adds	r2, r3, #1
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c52:	3b01      	subs	r3, #1
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	3b01      	subs	r3, #1
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	f003 0304 	and.w	r3, r3, #4
 8006c72:	2b04      	cmp	r3, #4
 8006c74:	d124      	bne.n	8006cc0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c7a:	2b03      	cmp	r3, #3
 8006c7c:	d107      	bne.n	8006c8e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c8c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	691a      	ldr	r2, [r3, #16]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	b2d2      	uxtb	r2, r2
 8006c9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006caa:	3b01      	subs	r3, #1
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f47f ae88 	bne.w	80069da <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2220      	movs	r2, #32
 8006cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	e000      	b.n	8006ce8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8006ce6:	2302      	movs	r3, #2
  }
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3728      	adds	r7, #40	; 0x28
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	00010004 	.word	0x00010004
 8006cf4:	20000064 	.word	0x20000064
 8006cf8:	14f8b589 	.word	0x14f8b589

08006cfc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b088      	sub	sp, #32
 8006d00:	af02      	add	r7, sp, #8
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	607a      	str	r2, [r7, #4]
 8006d06:	603b      	str	r3, [r7, #0]
 8006d08:	460b      	mov	r3, r1
 8006d0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2b08      	cmp	r3, #8
 8006d16:	d006      	beq.n	8006d26 <I2C_MasterRequestWrite+0x2a>
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d003      	beq.n	8006d26 <I2C_MasterRequestWrite+0x2a>
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d24:	d108      	bne.n	8006d38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d34:	601a      	str	r2, [r3, #0]
 8006d36:	e00b      	b.n	8006d50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3c:	2b12      	cmp	r3, #18
 8006d3e:	d107      	bne.n	8006d50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f000 f91d 	bl	8006f9c <I2C_WaitOnFlagUntilTimeout>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00d      	beq.n	8006d84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d76:	d103      	bne.n	8006d80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e035      	b.n	8006df0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d8c:	d108      	bne.n	8006da0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d8e:	897b      	ldrh	r3, [r7, #10]
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	461a      	mov	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006d9c:	611a      	str	r2, [r3, #16]
 8006d9e:	e01b      	b.n	8006dd8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006da0:	897b      	ldrh	r3, [r7, #10]
 8006da2:	11db      	asrs	r3, r3, #7
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	f003 0306 	and.w	r3, r3, #6
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	f063 030f 	orn	r3, r3, #15
 8006db0:	b2da      	uxtb	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	490e      	ldr	r1, [pc, #56]	; (8006df8 <I2C_MasterRequestWrite+0xfc>)
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f000 f966 	bl	8007090 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e010      	b.n	8006df0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006dce:	897b      	ldrh	r3, [r7, #10]
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	4907      	ldr	r1, [pc, #28]	; (8006dfc <I2C_MasterRequestWrite+0x100>)
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f000 f956 	bl	8007090 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d001      	beq.n	8006dee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e000      	b.n	8006df0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3718      	adds	r7, #24
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	00010008 	.word	0x00010008
 8006dfc:	00010002 	.word	0x00010002

08006e00 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b088      	sub	sp, #32
 8006e04:	af02      	add	r7, sp, #8
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	607a      	str	r2, [r7, #4]
 8006e0a:	603b      	str	r3, [r7, #0]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e14:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e24:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d006      	beq.n	8006e3a <I2C_MasterRequestRead+0x3a>
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d003      	beq.n	8006e3a <I2C_MasterRequestRead+0x3a>
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e38:	d108      	bne.n	8006e4c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	e00b      	b.n	8006e64 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e50:	2b11      	cmp	r3, #17
 8006e52:	d107      	bne.n	8006e64 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f000 f893 	bl	8006f9c <I2C_WaitOnFlagUntilTimeout>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00d      	beq.n	8006e98 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e8a:	d103      	bne.n	8006e94 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e079      	b.n	8006f8c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ea0:	d108      	bne.n	8006eb4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006ea2:	897b      	ldrh	r3, [r7, #10]
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	f043 0301 	orr.w	r3, r3, #1
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	611a      	str	r2, [r3, #16]
 8006eb2:	e05f      	b.n	8006f74 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006eb4:	897b      	ldrh	r3, [r7, #10]
 8006eb6:	11db      	asrs	r3, r3, #7
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	f003 0306 	and.w	r3, r3, #6
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	f063 030f 	orn	r3, r3, #15
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	4930      	ldr	r1, [pc, #192]	; (8006f94 <I2C_MasterRequestRead+0x194>)
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f000 f8dc 	bl	8007090 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e054      	b.n	8006f8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006ee2:	897b      	ldrh	r3, [r7, #10]
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	4929      	ldr	r1, [pc, #164]	; (8006f98 <I2C_MasterRequestRead+0x198>)
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f000 f8cc 	bl	8007090 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d001      	beq.n	8006f02 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e044      	b.n	8006f8c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f02:	2300      	movs	r3, #0
 8006f04:	613b      	str	r3, [r7, #16]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	695b      	ldr	r3, [r3, #20]
 8006f0c:	613b      	str	r3, [r7, #16]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	613b      	str	r3, [r7, #16]
 8006f16:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f26:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f000 f831 	bl	8006f9c <I2C_WaitOnFlagUntilTimeout>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00d      	beq.n	8006f5c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f4e:	d103      	bne.n	8006f58 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f56:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e017      	b.n	8006f8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006f5c:	897b      	ldrh	r3, [r7, #10]
 8006f5e:	11db      	asrs	r3, r3, #7
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	f003 0306 	and.w	r3, r3, #6
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	f063 030e 	orn	r3, r3, #14
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	4907      	ldr	r1, [pc, #28]	; (8006f98 <I2C_MasterRequestRead+0x198>)
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 f888 	bl	8007090 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e000      	b.n	8006f8c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3718      	adds	r7, #24
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	00010008 	.word	0x00010008
 8006f98:	00010002 	.word	0x00010002

08006f9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	603b      	str	r3, [r7, #0]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fac:	e048      	b.n	8007040 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb4:	d044      	beq.n	8007040 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fb6:	f7fe fee9 	bl	8005d8c <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d302      	bcc.n	8006fcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d139      	bne.n	8007040 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	0c1b      	lsrs	r3, r3, #16
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d10d      	bne.n	8006ff2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	43da      	mvns	r2, r3
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	bf0c      	ite	eq
 8006fe8:	2301      	moveq	r3, #1
 8006fea:	2300      	movne	r3, #0
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	461a      	mov	r2, r3
 8006ff0:	e00c      	b.n	800700c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	43da      	mvns	r2, r3
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	bf0c      	ite	eq
 8007004:	2301      	moveq	r3, #1
 8007006:	2300      	movne	r3, #0
 8007008:	b2db      	uxtb	r3, r3
 800700a:	461a      	mov	r2, r3
 800700c:	79fb      	ldrb	r3, [r7, #7]
 800700e:	429a      	cmp	r2, r3
 8007010:	d116      	bne.n	8007040 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2220      	movs	r2, #32
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702c:	f043 0220 	orr.w	r2, r3, #32
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e023      	b.n	8007088 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	0c1b      	lsrs	r3, r3, #16
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b01      	cmp	r3, #1
 8007048:	d10d      	bne.n	8007066 <I2C_WaitOnFlagUntilTimeout+0xca>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	695b      	ldr	r3, [r3, #20]
 8007050:	43da      	mvns	r2, r3
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	4013      	ands	r3, r2
 8007056:	b29b      	uxth	r3, r3
 8007058:	2b00      	cmp	r3, #0
 800705a:	bf0c      	ite	eq
 800705c:	2301      	moveq	r3, #1
 800705e:	2300      	movne	r3, #0
 8007060:	b2db      	uxtb	r3, r3
 8007062:	461a      	mov	r2, r3
 8007064:	e00c      	b.n	8007080 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	43da      	mvns	r2, r3
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	4013      	ands	r3, r2
 8007072:	b29b      	uxth	r3, r3
 8007074:	2b00      	cmp	r3, #0
 8007076:	bf0c      	ite	eq
 8007078:	2301      	moveq	r3, #1
 800707a:	2300      	movne	r3, #0
 800707c:	b2db      	uxtb	r3, r3
 800707e:	461a      	mov	r2, r3
 8007080:	79fb      	ldrb	r3, [r7, #7]
 8007082:	429a      	cmp	r2, r3
 8007084:	d093      	beq.n	8006fae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
 800709c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800709e:	e071      	b.n	8007184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ae:	d123      	bne.n	80070f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80070c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2220      	movs	r2, #32
 80070d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e4:	f043 0204 	orr.w	r2, r3, #4
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e067      	b.n	80071c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fe:	d041      	beq.n	8007184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007100:	f7fe fe44 	bl	8005d8c <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	429a      	cmp	r2, r3
 800710e:	d302      	bcc.n	8007116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d136      	bne.n	8007184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	0c1b      	lsrs	r3, r3, #16
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b01      	cmp	r3, #1
 800711e:	d10c      	bne.n	800713a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	43da      	mvns	r2, r3
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	4013      	ands	r3, r2
 800712c:	b29b      	uxth	r3, r3
 800712e:	2b00      	cmp	r3, #0
 8007130:	bf14      	ite	ne
 8007132:	2301      	movne	r3, #1
 8007134:	2300      	moveq	r3, #0
 8007136:	b2db      	uxtb	r3, r3
 8007138:	e00b      	b.n	8007152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	43da      	mvns	r2, r3
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	4013      	ands	r3, r2
 8007146:	b29b      	uxth	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	bf14      	ite	ne
 800714c:	2301      	movne	r3, #1
 800714e:	2300      	moveq	r3, #0
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	d016      	beq.n	8007184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2220      	movs	r2, #32
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007170:	f043 0220 	orr.w	r2, r3, #32
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e021      	b.n	80071c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	0c1b      	lsrs	r3, r3, #16
 8007188:	b2db      	uxtb	r3, r3
 800718a:	2b01      	cmp	r3, #1
 800718c:	d10c      	bne.n	80071a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	695b      	ldr	r3, [r3, #20]
 8007194:	43da      	mvns	r2, r3
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	4013      	ands	r3, r2
 800719a:	b29b      	uxth	r3, r3
 800719c:	2b00      	cmp	r3, #0
 800719e:	bf14      	ite	ne
 80071a0:	2301      	movne	r3, #1
 80071a2:	2300      	moveq	r3, #0
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	e00b      	b.n	80071c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	43da      	mvns	r2, r3
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	4013      	ands	r3, r2
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	bf14      	ite	ne
 80071ba:	2301      	movne	r3, #1
 80071bc:	2300      	moveq	r3, #0
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f47f af6d 	bne.w	80070a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071dc:	e034      	b.n	8007248 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f000 f8e3 	bl	80073aa <I2C_IsAcknowledgeFailed>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d001      	beq.n	80071ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e034      	b.n	8007258 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f4:	d028      	beq.n	8007248 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071f6:	f7fe fdc9 	bl	8005d8c <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	429a      	cmp	r2, r3
 8007204:	d302      	bcc.n	800720c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d11d      	bne.n	8007248 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007216:	2b80      	cmp	r3, #128	; 0x80
 8007218:	d016      	beq.n	8007248 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2220      	movs	r2, #32
 8007224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007234:	f043 0220 	orr.w	r2, r3, #32
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e007      	b.n	8007258 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007252:	2b80      	cmp	r3, #128	; 0x80
 8007254:	d1c3      	bne.n	80071de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800726c:	e034      	b.n	80072d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f000 f89b 	bl	80073aa <I2C_IsAcknowledgeFailed>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e034      	b.n	80072e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007284:	d028      	beq.n	80072d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007286:	f7fe fd81 	bl	8005d8c <HAL_GetTick>
 800728a:	4602      	mov	r2, r0
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	429a      	cmp	r2, r3
 8007294:	d302      	bcc.n	800729c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d11d      	bne.n	80072d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	f003 0304 	and.w	r3, r3, #4
 80072a6:	2b04      	cmp	r3, #4
 80072a8:	d016      	beq.n	80072d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2220      	movs	r2, #32
 80072b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c4:	f043 0220 	orr.w	r2, r3, #32
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e007      	b.n	80072e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	f003 0304 	and.w	r3, r3, #4
 80072e2:	2b04      	cmp	r3, #4
 80072e4:	d1c3      	bne.n	800726e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80072fc:	e049      	b.n	8007392 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	695b      	ldr	r3, [r3, #20]
 8007304:	f003 0310 	and.w	r3, r3, #16
 8007308:	2b10      	cmp	r3, #16
 800730a:	d119      	bne.n	8007340 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f06f 0210 	mvn.w	r2, #16
 8007314:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2220      	movs	r2, #32
 8007320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e030      	b.n	80073a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007340:	f7fe fd24 	bl	8005d8c <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	429a      	cmp	r2, r3
 800734e:	d302      	bcc.n	8007356 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d11d      	bne.n	8007392 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007360:	2b40      	cmp	r3, #64	; 0x40
 8007362:	d016      	beq.n	8007392 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2220      	movs	r2, #32
 800736e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737e:	f043 0220 	orr.w	r2, r3, #32
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e007      	b.n	80073a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739c:	2b40      	cmp	r3, #64	; 0x40
 800739e:	d1ae      	bne.n	80072fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80073aa:	b480      	push	{r7}
 80073ac:	b083      	sub	sp, #12
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073c0:	d11b      	bne.n	80073fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80073ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2220      	movs	r2, #32
 80073d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e6:	f043 0204 	orr.w	r2, r3, #4
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e000      	b.n	80073fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	bc80      	pop	{r7}
 8007404:	4770      	bx	lr
	...

08007408 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b086      	sub	sp, #24
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d101      	bne.n	800741a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e272      	b.n	8007900 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	2b00      	cmp	r3, #0
 8007424:	f000 8087 	beq.w	8007536 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007428:	4b92      	ldr	r3, [pc, #584]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f003 030c 	and.w	r3, r3, #12
 8007430:	2b04      	cmp	r3, #4
 8007432:	d00c      	beq.n	800744e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007434:	4b8f      	ldr	r3, [pc, #572]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	f003 030c 	and.w	r3, r3, #12
 800743c:	2b08      	cmp	r3, #8
 800743e:	d112      	bne.n	8007466 <HAL_RCC_OscConfig+0x5e>
 8007440:	4b8c      	ldr	r3, [pc, #560]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800744c:	d10b      	bne.n	8007466 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800744e:	4b89      	ldr	r3, [pc, #548]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d06c      	beq.n	8007534 <HAL_RCC_OscConfig+0x12c>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d168      	bne.n	8007534 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e24c      	b.n	8007900 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800746e:	d106      	bne.n	800747e <HAL_RCC_OscConfig+0x76>
 8007470:	4b80      	ldr	r3, [pc, #512]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a7f      	ldr	r2, [pc, #508]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 8007476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800747a:	6013      	str	r3, [r2, #0]
 800747c:	e02e      	b.n	80074dc <HAL_RCC_OscConfig+0xd4>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d10c      	bne.n	80074a0 <HAL_RCC_OscConfig+0x98>
 8007486:	4b7b      	ldr	r3, [pc, #492]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a7a      	ldr	r2, [pc, #488]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 800748c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007490:	6013      	str	r3, [r2, #0]
 8007492:	4b78      	ldr	r3, [pc, #480]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a77      	ldr	r2, [pc, #476]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 8007498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800749c:	6013      	str	r3, [r2, #0]
 800749e:	e01d      	b.n	80074dc <HAL_RCC_OscConfig+0xd4>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074a8:	d10c      	bne.n	80074c4 <HAL_RCC_OscConfig+0xbc>
 80074aa:	4b72      	ldr	r3, [pc, #456]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a71      	ldr	r2, [pc, #452]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 80074b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074b4:	6013      	str	r3, [r2, #0]
 80074b6:	4b6f      	ldr	r3, [pc, #444]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a6e      	ldr	r2, [pc, #440]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 80074bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074c0:	6013      	str	r3, [r2, #0]
 80074c2:	e00b      	b.n	80074dc <HAL_RCC_OscConfig+0xd4>
 80074c4:	4b6b      	ldr	r3, [pc, #428]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a6a      	ldr	r2, [pc, #424]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 80074ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074ce:	6013      	str	r3, [r2, #0]
 80074d0:	4b68      	ldr	r3, [pc, #416]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a67      	ldr	r2, [pc, #412]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 80074d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d013      	beq.n	800750c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074e4:	f7fe fc52 	bl	8005d8c <HAL_GetTick>
 80074e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074ea:	e008      	b.n	80074fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074ec:	f7fe fc4e 	bl	8005d8c <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	2b64      	cmp	r3, #100	; 0x64
 80074f8:	d901      	bls.n	80074fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e200      	b.n	8007900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074fe:	4b5d      	ldr	r3, [pc, #372]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d0f0      	beq.n	80074ec <HAL_RCC_OscConfig+0xe4>
 800750a:	e014      	b.n	8007536 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800750c:	f7fe fc3e 	bl	8005d8c <HAL_GetTick>
 8007510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007512:	e008      	b.n	8007526 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007514:	f7fe fc3a 	bl	8005d8c <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	2b64      	cmp	r3, #100	; 0x64
 8007520:	d901      	bls.n	8007526 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e1ec      	b.n	8007900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007526:	4b53      	ldr	r3, [pc, #332]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1f0      	bne.n	8007514 <HAL_RCC_OscConfig+0x10c>
 8007532:	e000      	b.n	8007536 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0302 	and.w	r3, r3, #2
 800753e:	2b00      	cmp	r3, #0
 8007540:	d063      	beq.n	800760a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007542:	4b4c      	ldr	r3, [pc, #304]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f003 030c 	and.w	r3, r3, #12
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00b      	beq.n	8007566 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800754e:	4b49      	ldr	r3, [pc, #292]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f003 030c 	and.w	r3, r3, #12
 8007556:	2b08      	cmp	r3, #8
 8007558:	d11c      	bne.n	8007594 <HAL_RCC_OscConfig+0x18c>
 800755a:	4b46      	ldr	r3, [pc, #280]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d116      	bne.n	8007594 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007566:	4b43      	ldr	r3, [pc, #268]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0302 	and.w	r3, r3, #2
 800756e:	2b00      	cmp	r3, #0
 8007570:	d005      	beq.n	800757e <HAL_RCC_OscConfig+0x176>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d001      	beq.n	800757e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e1c0      	b.n	8007900 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800757e:	4b3d      	ldr	r3, [pc, #244]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	4939      	ldr	r1, [pc, #228]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 800758e:	4313      	orrs	r3, r2
 8007590:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007592:	e03a      	b.n	800760a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d020      	beq.n	80075de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800759c:	4b36      	ldr	r3, [pc, #216]	; (8007678 <HAL_RCC_OscConfig+0x270>)
 800759e:	2201      	movs	r2, #1
 80075a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075a2:	f7fe fbf3 	bl	8005d8c <HAL_GetTick>
 80075a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075a8:	e008      	b.n	80075bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075aa:	f7fe fbef 	bl	8005d8c <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d901      	bls.n	80075bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e1a1      	b.n	8007900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075bc:	4b2d      	ldr	r3, [pc, #180]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d0f0      	beq.n	80075aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075c8:	4b2a      	ldr	r3, [pc, #168]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	00db      	lsls	r3, r3, #3
 80075d6:	4927      	ldr	r1, [pc, #156]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 80075d8:	4313      	orrs	r3, r2
 80075da:	600b      	str	r3, [r1, #0]
 80075dc:	e015      	b.n	800760a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80075de:	4b26      	ldr	r3, [pc, #152]	; (8007678 <HAL_RCC_OscConfig+0x270>)
 80075e0:	2200      	movs	r2, #0
 80075e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075e4:	f7fe fbd2 	bl	8005d8c <HAL_GetTick>
 80075e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075ea:	e008      	b.n	80075fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075ec:	f7fe fbce 	bl	8005d8c <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d901      	bls.n	80075fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e180      	b.n	8007900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075fe:	4b1d      	ldr	r3, [pc, #116]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0302 	and.w	r3, r3, #2
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1f0      	bne.n	80075ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 0308 	and.w	r3, r3, #8
 8007612:	2b00      	cmp	r3, #0
 8007614:	d03a      	beq.n	800768c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d019      	beq.n	8007652 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800761e:	4b17      	ldr	r3, [pc, #92]	; (800767c <HAL_RCC_OscConfig+0x274>)
 8007620:	2201      	movs	r2, #1
 8007622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007624:	f7fe fbb2 	bl	8005d8c <HAL_GetTick>
 8007628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800762a:	e008      	b.n	800763e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800762c:	f7fe fbae 	bl	8005d8c <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	2b02      	cmp	r3, #2
 8007638:	d901      	bls.n	800763e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e160      	b.n	8007900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800763e:	4b0d      	ldr	r3, [pc, #52]	; (8007674 <HAL_RCC_OscConfig+0x26c>)
 8007640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	2b00      	cmp	r3, #0
 8007648:	d0f0      	beq.n	800762c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800764a:	2001      	movs	r0, #1
 800764c:	f000 faba 	bl	8007bc4 <RCC_Delay>
 8007650:	e01c      	b.n	800768c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007652:	4b0a      	ldr	r3, [pc, #40]	; (800767c <HAL_RCC_OscConfig+0x274>)
 8007654:	2200      	movs	r2, #0
 8007656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007658:	f7fe fb98 	bl	8005d8c <HAL_GetTick>
 800765c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800765e:	e00f      	b.n	8007680 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007660:	f7fe fb94 	bl	8005d8c <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	2b02      	cmp	r3, #2
 800766c:	d908      	bls.n	8007680 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e146      	b.n	8007900 <HAL_RCC_OscConfig+0x4f8>
 8007672:	bf00      	nop
 8007674:	40021000 	.word	0x40021000
 8007678:	42420000 	.word	0x42420000
 800767c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007680:	4b92      	ldr	r3, [pc, #584]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 8007682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007684:	f003 0302 	and.w	r3, r3, #2
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1e9      	bne.n	8007660 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 0304 	and.w	r3, r3, #4
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 80a6 	beq.w	80077e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800769a:	2300      	movs	r3, #0
 800769c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800769e:	4b8b      	ldr	r3, [pc, #556]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 80076a0:	69db      	ldr	r3, [r3, #28]
 80076a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10d      	bne.n	80076c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076aa:	4b88      	ldr	r3, [pc, #544]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 80076ac:	69db      	ldr	r3, [r3, #28]
 80076ae:	4a87      	ldr	r2, [pc, #540]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 80076b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076b4:	61d3      	str	r3, [r2, #28]
 80076b6:	4b85      	ldr	r3, [pc, #532]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 80076b8:	69db      	ldr	r3, [r3, #28]
 80076ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076be:	60bb      	str	r3, [r7, #8]
 80076c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076c2:	2301      	movs	r3, #1
 80076c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076c6:	4b82      	ldr	r3, [pc, #520]	; (80078d0 <HAL_RCC_OscConfig+0x4c8>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d118      	bne.n	8007704 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80076d2:	4b7f      	ldr	r3, [pc, #508]	; (80078d0 <HAL_RCC_OscConfig+0x4c8>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a7e      	ldr	r2, [pc, #504]	; (80078d0 <HAL_RCC_OscConfig+0x4c8>)
 80076d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076de:	f7fe fb55 	bl	8005d8c <HAL_GetTick>
 80076e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076e4:	e008      	b.n	80076f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076e6:	f7fe fb51 	bl	8005d8c <HAL_GetTick>
 80076ea:	4602      	mov	r2, r0
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	2b64      	cmp	r3, #100	; 0x64
 80076f2:	d901      	bls.n	80076f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80076f4:	2303      	movs	r3, #3
 80076f6:	e103      	b.n	8007900 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076f8:	4b75      	ldr	r3, [pc, #468]	; (80078d0 <HAL_RCC_OscConfig+0x4c8>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007700:	2b00      	cmp	r3, #0
 8007702:	d0f0      	beq.n	80076e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d106      	bne.n	800771a <HAL_RCC_OscConfig+0x312>
 800770c:	4b6f      	ldr	r3, [pc, #444]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 800770e:	6a1b      	ldr	r3, [r3, #32]
 8007710:	4a6e      	ldr	r2, [pc, #440]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 8007712:	f043 0301 	orr.w	r3, r3, #1
 8007716:	6213      	str	r3, [r2, #32]
 8007718:	e02d      	b.n	8007776 <HAL_RCC_OscConfig+0x36e>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10c      	bne.n	800773c <HAL_RCC_OscConfig+0x334>
 8007722:	4b6a      	ldr	r3, [pc, #424]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	4a69      	ldr	r2, [pc, #420]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 8007728:	f023 0301 	bic.w	r3, r3, #1
 800772c:	6213      	str	r3, [r2, #32]
 800772e:	4b67      	ldr	r3, [pc, #412]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	4a66      	ldr	r2, [pc, #408]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 8007734:	f023 0304 	bic.w	r3, r3, #4
 8007738:	6213      	str	r3, [r2, #32]
 800773a:	e01c      	b.n	8007776 <HAL_RCC_OscConfig+0x36e>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	2b05      	cmp	r3, #5
 8007742:	d10c      	bne.n	800775e <HAL_RCC_OscConfig+0x356>
 8007744:	4b61      	ldr	r3, [pc, #388]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 8007746:	6a1b      	ldr	r3, [r3, #32]
 8007748:	4a60      	ldr	r2, [pc, #384]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 800774a:	f043 0304 	orr.w	r3, r3, #4
 800774e:	6213      	str	r3, [r2, #32]
 8007750:	4b5e      	ldr	r3, [pc, #376]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	4a5d      	ldr	r2, [pc, #372]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 8007756:	f043 0301 	orr.w	r3, r3, #1
 800775a:	6213      	str	r3, [r2, #32]
 800775c:	e00b      	b.n	8007776 <HAL_RCC_OscConfig+0x36e>
 800775e:	4b5b      	ldr	r3, [pc, #364]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 8007760:	6a1b      	ldr	r3, [r3, #32]
 8007762:	4a5a      	ldr	r2, [pc, #360]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 8007764:	f023 0301 	bic.w	r3, r3, #1
 8007768:	6213      	str	r3, [r2, #32]
 800776a:	4b58      	ldr	r3, [pc, #352]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	4a57      	ldr	r2, [pc, #348]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 8007770:	f023 0304 	bic.w	r3, r3, #4
 8007774:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d015      	beq.n	80077aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800777e:	f7fe fb05 	bl	8005d8c <HAL_GetTick>
 8007782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007784:	e00a      	b.n	800779c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007786:	f7fe fb01 	bl	8005d8c <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	f241 3288 	movw	r2, #5000	; 0x1388
 8007794:	4293      	cmp	r3, r2
 8007796:	d901      	bls.n	800779c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e0b1      	b.n	8007900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800779c:	4b4b      	ldr	r3, [pc, #300]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 800779e:	6a1b      	ldr	r3, [r3, #32]
 80077a0:	f003 0302 	and.w	r3, r3, #2
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d0ee      	beq.n	8007786 <HAL_RCC_OscConfig+0x37e>
 80077a8:	e014      	b.n	80077d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077aa:	f7fe faef 	bl	8005d8c <HAL_GetTick>
 80077ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077b0:	e00a      	b.n	80077c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077b2:	f7fe faeb 	bl	8005d8c <HAL_GetTick>
 80077b6:	4602      	mov	r2, r0
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d901      	bls.n	80077c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e09b      	b.n	8007900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077c8:	4b40      	ldr	r3, [pc, #256]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	f003 0302 	and.w	r3, r3, #2
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1ee      	bne.n	80077b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80077d4:	7dfb      	ldrb	r3, [r7, #23]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d105      	bne.n	80077e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077da:	4b3c      	ldr	r3, [pc, #240]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 80077dc:	69db      	ldr	r3, [r3, #28]
 80077de:	4a3b      	ldr	r2, [pc, #236]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 80077e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	69db      	ldr	r3, [r3, #28]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 8087 	beq.w	80078fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80077f0:	4b36      	ldr	r3, [pc, #216]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	f003 030c 	and.w	r3, r3, #12
 80077f8:	2b08      	cmp	r3, #8
 80077fa:	d061      	beq.n	80078c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	69db      	ldr	r3, [r3, #28]
 8007800:	2b02      	cmp	r3, #2
 8007802:	d146      	bne.n	8007892 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007804:	4b33      	ldr	r3, [pc, #204]	; (80078d4 <HAL_RCC_OscConfig+0x4cc>)
 8007806:	2200      	movs	r2, #0
 8007808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800780a:	f7fe fabf 	bl	8005d8c <HAL_GetTick>
 800780e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007810:	e008      	b.n	8007824 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007812:	f7fe fabb 	bl	8005d8c <HAL_GetTick>
 8007816:	4602      	mov	r2, r0
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	2b02      	cmp	r3, #2
 800781e:	d901      	bls.n	8007824 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e06d      	b.n	8007900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007824:	4b29      	ldr	r3, [pc, #164]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1f0      	bne.n	8007812 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a1b      	ldr	r3, [r3, #32]
 8007834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007838:	d108      	bne.n	800784c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800783a:	4b24      	ldr	r3, [pc, #144]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	4921      	ldr	r1, [pc, #132]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 8007848:	4313      	orrs	r3, r2
 800784a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800784c:	4b1f      	ldr	r3, [pc, #124]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a19      	ldr	r1, [r3, #32]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785c:	430b      	orrs	r3, r1
 800785e:	491b      	ldr	r1, [pc, #108]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 8007860:	4313      	orrs	r3, r2
 8007862:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007864:	4b1b      	ldr	r3, [pc, #108]	; (80078d4 <HAL_RCC_OscConfig+0x4cc>)
 8007866:	2201      	movs	r2, #1
 8007868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800786a:	f7fe fa8f 	bl	8005d8c <HAL_GetTick>
 800786e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007870:	e008      	b.n	8007884 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007872:	f7fe fa8b 	bl	8005d8c <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	2b02      	cmp	r3, #2
 800787e:	d901      	bls.n	8007884 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e03d      	b.n	8007900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007884:	4b11      	ldr	r3, [pc, #68]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d0f0      	beq.n	8007872 <HAL_RCC_OscConfig+0x46a>
 8007890:	e035      	b.n	80078fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007892:	4b10      	ldr	r3, [pc, #64]	; (80078d4 <HAL_RCC_OscConfig+0x4cc>)
 8007894:	2200      	movs	r2, #0
 8007896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007898:	f7fe fa78 	bl	8005d8c <HAL_GetTick>
 800789c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800789e:	e008      	b.n	80078b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078a0:	f7fe fa74 	bl	8005d8c <HAL_GetTick>
 80078a4:	4602      	mov	r2, r0
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d901      	bls.n	80078b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80078ae:	2303      	movs	r3, #3
 80078b0:	e026      	b.n	8007900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80078b2:	4b06      	ldr	r3, [pc, #24]	; (80078cc <HAL_RCC_OscConfig+0x4c4>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1f0      	bne.n	80078a0 <HAL_RCC_OscConfig+0x498>
 80078be:	e01e      	b.n	80078fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	69db      	ldr	r3, [r3, #28]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d107      	bne.n	80078d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e019      	b.n	8007900 <HAL_RCC_OscConfig+0x4f8>
 80078cc:	40021000 	.word	0x40021000
 80078d0:	40007000 	.word	0x40007000
 80078d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80078d8:	4b0b      	ldr	r3, [pc, #44]	; (8007908 <HAL_RCC_OscConfig+0x500>)
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a1b      	ldr	r3, [r3, #32]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d106      	bne.n	80078fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d001      	beq.n	80078fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e000      	b.n	8007900 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3718      	adds	r7, #24
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	40021000 	.word	0x40021000

0800790c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d101      	bne.n	8007920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e0d0      	b.n	8007ac2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007920:	4b6a      	ldr	r3, [pc, #424]	; (8007acc <HAL_RCC_ClockConfig+0x1c0>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 0307 	and.w	r3, r3, #7
 8007928:	683a      	ldr	r2, [r7, #0]
 800792a:	429a      	cmp	r2, r3
 800792c:	d910      	bls.n	8007950 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800792e:	4b67      	ldr	r3, [pc, #412]	; (8007acc <HAL_RCC_ClockConfig+0x1c0>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f023 0207 	bic.w	r2, r3, #7
 8007936:	4965      	ldr	r1, [pc, #404]	; (8007acc <HAL_RCC_ClockConfig+0x1c0>)
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	4313      	orrs	r3, r2
 800793c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800793e:	4b63      	ldr	r3, [pc, #396]	; (8007acc <HAL_RCC_ClockConfig+0x1c0>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 0307 	and.w	r3, r3, #7
 8007946:	683a      	ldr	r2, [r7, #0]
 8007948:	429a      	cmp	r2, r3
 800794a:	d001      	beq.n	8007950 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e0b8      	b.n	8007ac2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 0302 	and.w	r3, r3, #2
 8007958:	2b00      	cmp	r3, #0
 800795a:	d020      	beq.n	800799e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0304 	and.w	r3, r3, #4
 8007964:	2b00      	cmp	r3, #0
 8007966:	d005      	beq.n	8007974 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007968:	4b59      	ldr	r3, [pc, #356]	; (8007ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	4a58      	ldr	r2, [pc, #352]	; (8007ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800796e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007972:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0308 	and.w	r3, r3, #8
 800797c:	2b00      	cmp	r3, #0
 800797e:	d005      	beq.n	800798c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007980:	4b53      	ldr	r3, [pc, #332]	; (8007ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	4a52      	ldr	r2, [pc, #328]	; (8007ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8007986:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800798a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800798c:	4b50      	ldr	r3, [pc, #320]	; (8007ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	494d      	ldr	r1, [pc, #308]	; (8007ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800799a:	4313      	orrs	r3, r2
 800799c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 0301 	and.w	r3, r3, #1
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d040      	beq.n	8007a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d107      	bne.n	80079c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079b2:	4b47      	ldr	r3, [pc, #284]	; (8007ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d115      	bne.n	80079ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e07f      	b.n	8007ac2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d107      	bne.n	80079da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079ca:	4b41      	ldr	r3, [pc, #260]	; (8007ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d109      	bne.n	80079ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e073      	b.n	8007ac2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079da:	4b3d      	ldr	r3, [pc, #244]	; (8007ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 0302 	and.w	r3, r3, #2
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d101      	bne.n	80079ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e06b      	b.n	8007ac2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80079ea:	4b39      	ldr	r3, [pc, #228]	; (8007ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	f023 0203 	bic.w	r2, r3, #3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	4936      	ldr	r1, [pc, #216]	; (8007ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80079f8:	4313      	orrs	r3, r2
 80079fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80079fc:	f7fe f9c6 	bl	8005d8c <HAL_GetTick>
 8007a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a02:	e00a      	b.n	8007a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a04:	f7fe f9c2 	bl	8005d8c <HAL_GetTick>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d901      	bls.n	8007a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e053      	b.n	8007ac2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a1a:	4b2d      	ldr	r3, [pc, #180]	; (8007ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f003 020c 	and.w	r2, r3, #12
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d1eb      	bne.n	8007a04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a2c:	4b27      	ldr	r3, [pc, #156]	; (8007acc <HAL_RCC_ClockConfig+0x1c0>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0307 	and.w	r3, r3, #7
 8007a34:	683a      	ldr	r2, [r7, #0]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d210      	bcs.n	8007a5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a3a:	4b24      	ldr	r3, [pc, #144]	; (8007acc <HAL_RCC_ClockConfig+0x1c0>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f023 0207 	bic.w	r2, r3, #7
 8007a42:	4922      	ldr	r1, [pc, #136]	; (8007acc <HAL_RCC_ClockConfig+0x1c0>)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a4a:	4b20      	ldr	r3, [pc, #128]	; (8007acc <HAL_RCC_ClockConfig+0x1c0>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0307 	and.w	r3, r3, #7
 8007a52:	683a      	ldr	r2, [r7, #0]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d001      	beq.n	8007a5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e032      	b.n	8007ac2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 0304 	and.w	r3, r3, #4
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d008      	beq.n	8007a7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a68:	4b19      	ldr	r3, [pc, #100]	; (8007ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	4916      	ldr	r1, [pc, #88]	; (8007ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 0308 	and.w	r3, r3, #8
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d009      	beq.n	8007a9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007a86:	4b12      	ldr	r3, [pc, #72]	; (8007ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	00db      	lsls	r3, r3, #3
 8007a94:	490e      	ldr	r1, [pc, #56]	; (8007ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8007a96:	4313      	orrs	r3, r2
 8007a98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007a9a:	f000 f821 	bl	8007ae0 <HAL_RCC_GetSysClockFreq>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	4b0b      	ldr	r3, [pc, #44]	; (8007ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	091b      	lsrs	r3, r3, #4
 8007aa6:	f003 030f 	and.w	r3, r3, #15
 8007aaa:	490a      	ldr	r1, [pc, #40]	; (8007ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8007aac:	5ccb      	ldrb	r3, [r1, r3]
 8007aae:	fa22 f303 	lsr.w	r3, r2, r3
 8007ab2:	4a09      	ldr	r2, [pc, #36]	; (8007ad8 <HAL_RCC_ClockConfig+0x1cc>)
 8007ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007ab6:	4b09      	ldr	r3, [pc, #36]	; (8007adc <HAL_RCC_ClockConfig+0x1d0>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7fe f924 	bl	8005d08 <HAL_InitTick>

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	40022000 	.word	0x40022000
 8007ad0:	40021000 	.word	0x40021000
 8007ad4:	080090f8 	.word	0x080090f8
 8007ad8:	20000064 	.word	0x20000064
 8007adc:	20000068 	.word	0x20000068

08007ae0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b087      	sub	sp, #28
 8007ae4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	60fb      	str	r3, [r7, #12]
 8007aea:	2300      	movs	r3, #0
 8007aec:	60bb      	str	r3, [r7, #8]
 8007aee:	2300      	movs	r3, #0
 8007af0:	617b      	str	r3, [r7, #20]
 8007af2:	2300      	movs	r3, #0
 8007af4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007af6:	2300      	movs	r3, #0
 8007af8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007afa:	4b1e      	ldr	r3, [pc, #120]	; (8007b74 <HAL_RCC_GetSysClockFreq+0x94>)
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f003 030c 	and.w	r3, r3, #12
 8007b06:	2b04      	cmp	r3, #4
 8007b08:	d002      	beq.n	8007b10 <HAL_RCC_GetSysClockFreq+0x30>
 8007b0a:	2b08      	cmp	r3, #8
 8007b0c:	d003      	beq.n	8007b16 <HAL_RCC_GetSysClockFreq+0x36>
 8007b0e:	e027      	b.n	8007b60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007b10:	4b19      	ldr	r3, [pc, #100]	; (8007b78 <HAL_RCC_GetSysClockFreq+0x98>)
 8007b12:	613b      	str	r3, [r7, #16]
      break;
 8007b14:	e027      	b.n	8007b66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	0c9b      	lsrs	r3, r3, #18
 8007b1a:	f003 030f 	and.w	r3, r3, #15
 8007b1e:	4a17      	ldr	r2, [pc, #92]	; (8007b7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8007b20:	5cd3      	ldrb	r3, [r2, r3]
 8007b22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d010      	beq.n	8007b50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007b2e:	4b11      	ldr	r3, [pc, #68]	; (8007b74 <HAL_RCC_GetSysClockFreq+0x94>)
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	0c5b      	lsrs	r3, r3, #17
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	4a11      	ldr	r2, [pc, #68]	; (8007b80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007b3a:	5cd3      	ldrb	r3, [r2, r3]
 8007b3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a0d      	ldr	r2, [pc, #52]	; (8007b78 <HAL_RCC_GetSysClockFreq+0x98>)
 8007b42:	fb03 f202 	mul.w	r2, r3, r2
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b4c:	617b      	str	r3, [r7, #20]
 8007b4e:	e004      	b.n	8007b5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a0c      	ldr	r2, [pc, #48]	; (8007b84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007b54:	fb02 f303 	mul.w	r3, r2, r3
 8007b58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	613b      	str	r3, [r7, #16]
      break;
 8007b5e:	e002      	b.n	8007b66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007b60:	4b05      	ldr	r3, [pc, #20]	; (8007b78 <HAL_RCC_GetSysClockFreq+0x98>)
 8007b62:	613b      	str	r3, [r7, #16]
      break;
 8007b64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b66:	693b      	ldr	r3, [r7, #16]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	371c      	adds	r7, #28
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bc80      	pop	{r7}
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	40021000 	.word	0x40021000
 8007b78:	007a1200 	.word	0x007a1200
 8007b7c:	08009110 	.word	0x08009110
 8007b80:	08009120 	.word	0x08009120
 8007b84:	003d0900 	.word	0x003d0900

08007b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b8c:	4b02      	ldr	r3, [pc, #8]	; (8007b98 <HAL_RCC_GetHCLKFreq+0x10>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bc80      	pop	{r7}
 8007b96:	4770      	bx	lr
 8007b98:	20000064 	.word	0x20000064

08007b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007ba0:	f7ff fff2 	bl	8007b88 <HAL_RCC_GetHCLKFreq>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	4b05      	ldr	r3, [pc, #20]	; (8007bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	0a1b      	lsrs	r3, r3, #8
 8007bac:	f003 0307 	and.w	r3, r3, #7
 8007bb0:	4903      	ldr	r1, [pc, #12]	; (8007bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007bb2:	5ccb      	ldrb	r3, [r1, r3]
 8007bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	40021000 	.word	0x40021000
 8007bc0:	08009108 	.word	0x08009108

08007bc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007bcc:	4b0a      	ldr	r3, [pc, #40]	; (8007bf8 <RCC_Delay+0x34>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a0a      	ldr	r2, [pc, #40]	; (8007bfc <RCC_Delay+0x38>)
 8007bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd6:	0a5b      	lsrs	r3, r3, #9
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	fb02 f303 	mul.w	r3, r2, r3
 8007bde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007be0:	bf00      	nop
  }
  while (Delay --);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	1e5a      	subs	r2, r3, #1
 8007be6:	60fa      	str	r2, [r7, #12]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1f9      	bne.n	8007be0 <RCC_Delay+0x1c>
}
 8007bec:	bf00      	nop
 8007bee:	bf00      	nop
 8007bf0:	3714      	adds	r7, #20
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bc80      	pop	{r7}
 8007bf6:	4770      	bx	lr
 8007bf8:	20000064 	.word	0x20000064
 8007bfc:	10624dd3 	.word	0x10624dd3

08007c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d101      	bne.n	8007c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e041      	b.n	8007c96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d106      	bne.n	8007c2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f7fd ff5a 	bl	8005ae0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2202      	movs	r2, #2
 8007c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	4610      	mov	r0, r2
 8007c40:	f000 faf4 	bl	800822c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
	...

08007ca0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d001      	beq.n	8007cb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e032      	b.n	8007d1e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2202      	movs	r2, #2
 8007cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a18      	ldr	r2, [pc, #96]	; (8007d28 <HAL_TIM_Base_Start+0x88>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d00e      	beq.n	8007ce8 <HAL_TIM_Base_Start+0x48>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cd2:	d009      	beq.n	8007ce8 <HAL_TIM_Base_Start+0x48>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a14      	ldr	r2, [pc, #80]	; (8007d2c <HAL_TIM_Base_Start+0x8c>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d004      	beq.n	8007ce8 <HAL_TIM_Base_Start+0x48>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a13      	ldr	r2, [pc, #76]	; (8007d30 <HAL_TIM_Base_Start+0x90>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d111      	bne.n	8007d0c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	f003 0307 	and.w	r3, r3, #7
 8007cf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2b06      	cmp	r3, #6
 8007cf8:	d010      	beq.n	8007d1c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f042 0201 	orr.w	r2, r2, #1
 8007d08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d0a:	e007      	b.n	8007d1c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f042 0201 	orr.w	r2, r2, #1
 8007d1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3714      	adds	r7, #20
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bc80      	pop	{r7}
 8007d26:	4770      	bx	lr
 8007d28:	40012c00 	.word	0x40012c00
 8007d2c:	40000400 	.word	0x40000400
 8007d30:	40000800 	.word	0x40000800

08007d34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d101      	bne.n	8007d46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e041      	b.n	8007dca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d106      	bne.n	8007d60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f7fd fef0 	bl	8005b40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2202      	movs	r2, #2
 8007d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	3304      	adds	r3, #4
 8007d70:	4619      	mov	r1, r3
 8007d72:	4610      	mov	r0, r2
 8007d74:	f000 fa5a 	bl	800822c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
	...

08007dd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d109      	bne.n	8007df8 <HAL_TIM_PWM_Start+0x24>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	bf14      	ite	ne
 8007df0:	2301      	movne	r3, #1
 8007df2:	2300      	moveq	r3, #0
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	e022      	b.n	8007e3e <HAL_TIM_PWM_Start+0x6a>
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	2b04      	cmp	r3, #4
 8007dfc:	d109      	bne.n	8007e12 <HAL_TIM_PWM_Start+0x3e>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	bf14      	ite	ne
 8007e0a:	2301      	movne	r3, #1
 8007e0c:	2300      	moveq	r3, #0
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	e015      	b.n	8007e3e <HAL_TIM_PWM_Start+0x6a>
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	2b08      	cmp	r3, #8
 8007e16:	d109      	bne.n	8007e2c <HAL_TIM_PWM_Start+0x58>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	bf14      	ite	ne
 8007e24:	2301      	movne	r3, #1
 8007e26:	2300      	moveq	r3, #0
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	e008      	b.n	8007e3e <HAL_TIM_PWM_Start+0x6a>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	bf14      	ite	ne
 8007e38:	2301      	movne	r3, #1
 8007e3a:	2300      	moveq	r3, #0
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e05e      	b.n	8007f04 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d104      	bne.n	8007e56 <HAL_TIM_PWM_Start+0x82>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e54:	e013      	b.n	8007e7e <HAL_TIM_PWM_Start+0xaa>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b04      	cmp	r3, #4
 8007e5a:	d104      	bne.n	8007e66 <HAL_TIM_PWM_Start+0x92>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e64:	e00b      	b.n	8007e7e <HAL_TIM_PWM_Start+0xaa>
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2b08      	cmp	r3, #8
 8007e6a:	d104      	bne.n	8007e76 <HAL_TIM_PWM_Start+0xa2>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e74:	e003      	b.n	8007e7e <HAL_TIM_PWM_Start+0xaa>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2202      	movs	r2, #2
 8007e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2201      	movs	r2, #1
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 fc50 	bl	800872c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a1e      	ldr	r2, [pc, #120]	; (8007f0c <HAL_TIM_PWM_Start+0x138>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d107      	bne.n	8007ea6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ea4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a18      	ldr	r2, [pc, #96]	; (8007f0c <HAL_TIM_PWM_Start+0x138>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d00e      	beq.n	8007ece <HAL_TIM_PWM_Start+0xfa>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eb8:	d009      	beq.n	8007ece <HAL_TIM_PWM_Start+0xfa>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a14      	ldr	r2, [pc, #80]	; (8007f10 <HAL_TIM_PWM_Start+0x13c>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d004      	beq.n	8007ece <HAL_TIM_PWM_Start+0xfa>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a12      	ldr	r2, [pc, #72]	; (8007f14 <HAL_TIM_PWM_Start+0x140>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d111      	bne.n	8007ef2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	f003 0307 	and.w	r3, r3, #7
 8007ed8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2b06      	cmp	r3, #6
 8007ede:	d010      	beq.n	8007f02 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f042 0201 	orr.w	r2, r2, #1
 8007eee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ef0:	e007      	b.n	8007f02 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f042 0201 	orr.w	r2, r2, #1
 8007f00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	40012c00 	.word	0x40012c00
 8007f10:	40000400 	.word	0x40000400
 8007f14:	40000800 	.word	0x40000800

08007f18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b086      	sub	sp, #24
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f24:	2300      	movs	r3, #0
 8007f26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d101      	bne.n	8007f36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f32:	2302      	movs	r3, #2
 8007f34:	e0ae      	b.n	8008094 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2b0c      	cmp	r3, #12
 8007f42:	f200 809f 	bhi.w	8008084 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007f46:	a201      	add	r2, pc, #4	; (adr r2, 8007f4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4c:	08007f81 	.word	0x08007f81
 8007f50:	08008085 	.word	0x08008085
 8007f54:	08008085 	.word	0x08008085
 8007f58:	08008085 	.word	0x08008085
 8007f5c:	08007fc1 	.word	0x08007fc1
 8007f60:	08008085 	.word	0x08008085
 8007f64:	08008085 	.word	0x08008085
 8007f68:	08008085 	.word	0x08008085
 8007f6c:	08008003 	.word	0x08008003
 8007f70:	08008085 	.word	0x08008085
 8007f74:	08008085 	.word	0x08008085
 8007f78:	08008085 	.word	0x08008085
 8007f7c:	08008043 	.word	0x08008043
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68b9      	ldr	r1, [r7, #8]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 f9b2 	bl	80082f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	699a      	ldr	r2, [r3, #24]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f042 0208 	orr.w	r2, r2, #8
 8007f9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	699a      	ldr	r2, [r3, #24]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f022 0204 	bic.w	r2, r2, #4
 8007faa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6999      	ldr	r1, [r3, #24]
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	691a      	ldr	r2, [r3, #16]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	619a      	str	r2, [r3, #24]
      break;
 8007fbe:	e064      	b.n	800808a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68b9      	ldr	r1, [r7, #8]
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 f9f8 	bl	80083bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	699a      	ldr	r2, [r3, #24]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	699a      	ldr	r2, [r3, #24]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6999      	ldr	r1, [r3, #24]
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	021a      	lsls	r2, r3, #8
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	430a      	orrs	r2, r1
 8007ffe:	619a      	str	r2, [r3, #24]
      break;
 8008000:	e043      	b.n	800808a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68b9      	ldr	r1, [r7, #8]
 8008008:	4618      	mov	r0, r3
 800800a:	f000 fa41 	bl	8008490 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	69da      	ldr	r2, [r3, #28]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f042 0208 	orr.w	r2, r2, #8
 800801c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	69da      	ldr	r2, [r3, #28]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f022 0204 	bic.w	r2, r2, #4
 800802c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	69d9      	ldr	r1, [r3, #28]
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	691a      	ldr	r2, [r3, #16]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	430a      	orrs	r2, r1
 800803e:	61da      	str	r2, [r3, #28]
      break;
 8008040:	e023      	b.n	800808a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68b9      	ldr	r1, [r7, #8]
 8008048:	4618      	mov	r0, r3
 800804a:	f000 fa8b 	bl	8008564 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	69da      	ldr	r2, [r3, #28]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800805c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	69da      	ldr	r2, [r3, #28]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800806c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	69d9      	ldr	r1, [r3, #28]
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	021a      	lsls	r2, r3, #8
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	430a      	orrs	r2, r1
 8008080:	61da      	str	r2, [r3, #28]
      break;
 8008082:	e002      	b.n	800808a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	75fb      	strb	r3, [r7, #23]
      break;
 8008088:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008092:	7dfb      	ldrb	r3, [r7, #23]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3718      	adds	r7, #24
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080a6:	2300      	movs	r3, #0
 80080a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d101      	bne.n	80080b8 <HAL_TIM_ConfigClockSource+0x1c>
 80080b4:	2302      	movs	r3, #2
 80080b6:	e0b4      	b.n	8008222 <HAL_TIM_ConfigClockSource+0x186>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2202      	movs	r2, #2
 80080c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80080d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080f0:	d03e      	beq.n	8008170 <HAL_TIM_ConfigClockSource+0xd4>
 80080f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080f6:	f200 8087 	bhi.w	8008208 <HAL_TIM_ConfigClockSource+0x16c>
 80080fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080fe:	f000 8086 	beq.w	800820e <HAL_TIM_ConfigClockSource+0x172>
 8008102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008106:	d87f      	bhi.n	8008208 <HAL_TIM_ConfigClockSource+0x16c>
 8008108:	2b70      	cmp	r3, #112	; 0x70
 800810a:	d01a      	beq.n	8008142 <HAL_TIM_ConfigClockSource+0xa6>
 800810c:	2b70      	cmp	r3, #112	; 0x70
 800810e:	d87b      	bhi.n	8008208 <HAL_TIM_ConfigClockSource+0x16c>
 8008110:	2b60      	cmp	r3, #96	; 0x60
 8008112:	d050      	beq.n	80081b6 <HAL_TIM_ConfigClockSource+0x11a>
 8008114:	2b60      	cmp	r3, #96	; 0x60
 8008116:	d877      	bhi.n	8008208 <HAL_TIM_ConfigClockSource+0x16c>
 8008118:	2b50      	cmp	r3, #80	; 0x50
 800811a:	d03c      	beq.n	8008196 <HAL_TIM_ConfigClockSource+0xfa>
 800811c:	2b50      	cmp	r3, #80	; 0x50
 800811e:	d873      	bhi.n	8008208 <HAL_TIM_ConfigClockSource+0x16c>
 8008120:	2b40      	cmp	r3, #64	; 0x40
 8008122:	d058      	beq.n	80081d6 <HAL_TIM_ConfigClockSource+0x13a>
 8008124:	2b40      	cmp	r3, #64	; 0x40
 8008126:	d86f      	bhi.n	8008208 <HAL_TIM_ConfigClockSource+0x16c>
 8008128:	2b30      	cmp	r3, #48	; 0x30
 800812a:	d064      	beq.n	80081f6 <HAL_TIM_ConfigClockSource+0x15a>
 800812c:	2b30      	cmp	r3, #48	; 0x30
 800812e:	d86b      	bhi.n	8008208 <HAL_TIM_ConfigClockSource+0x16c>
 8008130:	2b20      	cmp	r3, #32
 8008132:	d060      	beq.n	80081f6 <HAL_TIM_ConfigClockSource+0x15a>
 8008134:	2b20      	cmp	r3, #32
 8008136:	d867      	bhi.n	8008208 <HAL_TIM_ConfigClockSource+0x16c>
 8008138:	2b00      	cmp	r3, #0
 800813a:	d05c      	beq.n	80081f6 <HAL_TIM_ConfigClockSource+0x15a>
 800813c:	2b10      	cmp	r3, #16
 800813e:	d05a      	beq.n	80081f6 <HAL_TIM_ConfigClockSource+0x15a>
 8008140:	e062      	b.n	8008208 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6818      	ldr	r0, [r3, #0]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	6899      	ldr	r1, [r3, #8]
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	685a      	ldr	r2, [r3, #4]
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	f000 facc 	bl	80086ee <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008164:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68ba      	ldr	r2, [r7, #8]
 800816c:	609a      	str	r2, [r3, #8]
      break;
 800816e:	e04f      	b.n	8008210 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6818      	ldr	r0, [r3, #0]
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	6899      	ldr	r1, [r3, #8]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	f000 fab5 	bl	80086ee <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	689a      	ldr	r2, [r3, #8]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008192:	609a      	str	r2, [r3, #8]
      break;
 8008194:	e03c      	b.n	8008210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6818      	ldr	r0, [r3, #0]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	6859      	ldr	r1, [r3, #4]
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	461a      	mov	r2, r3
 80081a4:	f000 fa2c 	bl	8008600 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2150      	movs	r1, #80	; 0x50
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 fa83 	bl	80086ba <TIM_ITRx_SetConfig>
      break;
 80081b4:	e02c      	b.n	8008210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6818      	ldr	r0, [r3, #0]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	6859      	ldr	r1, [r3, #4]
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	461a      	mov	r2, r3
 80081c4:	f000 fa4a 	bl	800865c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2160      	movs	r1, #96	; 0x60
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 fa73 	bl	80086ba <TIM_ITRx_SetConfig>
      break;
 80081d4:	e01c      	b.n	8008210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6818      	ldr	r0, [r3, #0]
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	6859      	ldr	r1, [r3, #4]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	461a      	mov	r2, r3
 80081e4:	f000 fa0c 	bl	8008600 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2140      	movs	r1, #64	; 0x40
 80081ee:	4618      	mov	r0, r3
 80081f0:	f000 fa63 	bl	80086ba <TIM_ITRx_SetConfig>
      break;
 80081f4:	e00c      	b.n	8008210 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4619      	mov	r1, r3
 8008200:	4610      	mov	r0, r2
 8008202:	f000 fa5a 	bl	80086ba <TIM_ITRx_SetConfig>
      break;
 8008206:	e003      	b.n	8008210 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	73fb      	strb	r3, [r7, #15]
      break;
 800820c:	e000      	b.n	8008210 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800820e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008220:	7bfb      	ldrb	r3, [r7, #15]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
	...

0800822c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800822c:	b480      	push	{r7}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4a29      	ldr	r2, [pc, #164]	; (80082e4 <TIM_Base_SetConfig+0xb8>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d00b      	beq.n	800825c <TIM_Base_SetConfig+0x30>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800824a:	d007      	beq.n	800825c <TIM_Base_SetConfig+0x30>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a26      	ldr	r2, [pc, #152]	; (80082e8 <TIM_Base_SetConfig+0xbc>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d003      	beq.n	800825c <TIM_Base_SetConfig+0x30>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a25      	ldr	r2, [pc, #148]	; (80082ec <TIM_Base_SetConfig+0xc0>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d108      	bne.n	800826e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	4313      	orrs	r3, r2
 800826c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a1c      	ldr	r2, [pc, #112]	; (80082e4 <TIM_Base_SetConfig+0xb8>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d00b      	beq.n	800828e <TIM_Base_SetConfig+0x62>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800827c:	d007      	beq.n	800828e <TIM_Base_SetConfig+0x62>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a19      	ldr	r2, [pc, #100]	; (80082e8 <TIM_Base_SetConfig+0xbc>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d003      	beq.n	800828e <TIM_Base_SetConfig+0x62>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a18      	ldr	r2, [pc, #96]	; (80082ec <TIM_Base_SetConfig+0xc0>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d108      	bne.n	80082a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	4313      	orrs	r3, r2
 800829e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	695b      	ldr	r3, [r3, #20]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	689a      	ldr	r2, [r3, #8]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a07      	ldr	r2, [pc, #28]	; (80082e4 <TIM_Base_SetConfig+0xb8>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d103      	bne.n	80082d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	691a      	ldr	r2, [r3, #16]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	615a      	str	r2, [r3, #20]
}
 80082da:	bf00      	nop
 80082dc:	3714      	adds	r7, #20
 80082de:	46bd      	mov	sp, r7
 80082e0:	bc80      	pop	{r7}
 80082e2:	4770      	bx	lr
 80082e4:	40012c00 	.word	0x40012c00
 80082e8:	40000400 	.word	0x40000400
 80082ec:	40000800 	.word	0x40000800

080082f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b087      	sub	sp, #28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a1b      	ldr	r3, [r3, #32]
 8008304:	f023 0201 	bic.w	r2, r3, #1
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800831e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f023 0303 	bic.w	r3, r3, #3
 8008326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	4313      	orrs	r3, r2
 8008330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	f023 0302 	bic.w	r3, r3, #2
 8008338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	4313      	orrs	r3, r2
 8008342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a1c      	ldr	r2, [pc, #112]	; (80083b8 <TIM_OC1_SetConfig+0xc8>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d10c      	bne.n	8008366 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	f023 0308 	bic.w	r3, r3, #8
 8008352:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	697a      	ldr	r2, [r7, #20]
 800835a:	4313      	orrs	r3, r2
 800835c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	f023 0304 	bic.w	r3, r3, #4
 8008364:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a13      	ldr	r2, [pc, #76]	; (80083b8 <TIM_OC1_SetConfig+0xc8>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d111      	bne.n	8008392 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800837c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	4313      	orrs	r3, r2
 8008386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	4313      	orrs	r3, r2
 8008390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	621a      	str	r2, [r3, #32]
}
 80083ac:	bf00      	nop
 80083ae:	371c      	adds	r7, #28
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bc80      	pop	{r7}
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	40012c00 	.word	0x40012c00

080083bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083bc:	b480      	push	{r7}
 80083be:	b087      	sub	sp, #28
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a1b      	ldr	r3, [r3, #32]
 80083d0:	f023 0210 	bic.w	r2, r3, #16
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	699b      	ldr	r3, [r3, #24]
 80083e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	021b      	lsls	r3, r3, #8
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	f023 0320 	bic.w	r3, r3, #32
 8008406:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	011b      	lsls	r3, r3, #4
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	4313      	orrs	r3, r2
 8008412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a1d      	ldr	r2, [pc, #116]	; (800848c <TIM_OC2_SetConfig+0xd0>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d10d      	bne.n	8008438 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	011b      	lsls	r3, r3, #4
 800842a:	697a      	ldr	r2, [r7, #20]
 800842c:	4313      	orrs	r3, r2
 800842e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008436:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a14      	ldr	r2, [pc, #80]	; (800848c <TIM_OC2_SetConfig+0xd0>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d113      	bne.n	8008468 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008446:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800844e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	695b      	ldr	r3, [r3, #20]
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	693a      	ldr	r2, [r7, #16]
 8008458:	4313      	orrs	r3, r2
 800845a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	693a      	ldr	r2, [r7, #16]
 8008464:	4313      	orrs	r3, r2
 8008466:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	693a      	ldr	r2, [r7, #16]
 800846c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	685a      	ldr	r2, [r3, #4]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	697a      	ldr	r2, [r7, #20]
 8008480:	621a      	str	r2, [r3, #32]
}
 8008482:	bf00      	nop
 8008484:	371c      	adds	r7, #28
 8008486:	46bd      	mov	sp, r7
 8008488:	bc80      	pop	{r7}
 800848a:	4770      	bx	lr
 800848c:	40012c00 	.word	0x40012c00

08008490 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008490:	b480      	push	{r7}
 8008492:	b087      	sub	sp, #28
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a1b      	ldr	r3, [r3, #32]
 800849e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a1b      	ldr	r3, [r3, #32]
 80084a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	69db      	ldr	r3, [r3, #28]
 80084b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f023 0303 	bic.w	r3, r3, #3
 80084c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	021b      	lsls	r3, r3, #8
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a1d      	ldr	r2, [pc, #116]	; (8008560 <TIM_OC3_SetConfig+0xd0>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d10d      	bne.n	800850a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	021b      	lsls	r3, r3, #8
 80084fc:	697a      	ldr	r2, [r7, #20]
 80084fe:	4313      	orrs	r3, r2
 8008500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008508:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a14      	ldr	r2, [pc, #80]	; (8008560 <TIM_OC3_SetConfig+0xd0>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d113      	bne.n	800853a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	695b      	ldr	r3, [r3, #20]
 8008526:	011b      	lsls	r3, r3, #4
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	4313      	orrs	r3, r2
 800852c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	011b      	lsls	r3, r3, #4
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	4313      	orrs	r3, r2
 8008538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	693a      	ldr	r2, [r7, #16]
 800853e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	685a      	ldr	r2, [r3, #4]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	697a      	ldr	r2, [r7, #20]
 8008552:	621a      	str	r2, [r3, #32]
}
 8008554:	bf00      	nop
 8008556:	371c      	adds	r7, #28
 8008558:	46bd      	mov	sp, r7
 800855a:	bc80      	pop	{r7}
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	40012c00 	.word	0x40012c00

08008564 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008564:	b480      	push	{r7}
 8008566:	b087      	sub	sp, #28
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a1b      	ldr	r3, [r3, #32]
 8008572:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a1b      	ldr	r3, [r3, #32]
 8008578:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	69db      	ldr	r3, [r3, #28]
 800858a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800859a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	021b      	lsls	r3, r3, #8
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	031b      	lsls	r3, r3, #12
 80085b6:	693a      	ldr	r2, [r7, #16]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a0f      	ldr	r2, [pc, #60]	; (80085fc <TIM_OC4_SetConfig+0x98>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d109      	bne.n	80085d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	695b      	ldr	r3, [r3, #20]
 80085d0:	019b      	lsls	r3, r3, #6
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	68fa      	ldr	r2, [r7, #12]
 80085e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	685a      	ldr	r2, [r3, #4]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	693a      	ldr	r2, [r7, #16]
 80085f0:	621a      	str	r2, [r3, #32]
}
 80085f2:	bf00      	nop
 80085f4:	371c      	adds	r7, #28
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bc80      	pop	{r7}
 80085fa:	4770      	bx	lr
 80085fc:	40012c00 	.word	0x40012c00

08008600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008600:	b480      	push	{r7}
 8008602:	b087      	sub	sp, #28
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6a1b      	ldr	r3, [r3, #32]
 8008610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	f023 0201 	bic.w	r2, r3, #1
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800862a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	011b      	lsls	r3, r3, #4
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	4313      	orrs	r3, r2
 8008634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f023 030a 	bic.w	r3, r3, #10
 800863c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	4313      	orrs	r3, r2
 8008644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	693a      	ldr	r2, [r7, #16]
 800864a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	621a      	str	r2, [r3, #32]
}
 8008652:	bf00      	nop
 8008654:	371c      	adds	r7, #28
 8008656:	46bd      	mov	sp, r7
 8008658:	bc80      	pop	{r7}
 800865a:	4770      	bx	lr

0800865c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800865c:	b480      	push	{r7}
 800865e:	b087      	sub	sp, #28
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6a1b      	ldr	r3, [r3, #32]
 800866c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	f023 0210 	bic.w	r2, r3, #16
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	031b      	lsls	r3, r3, #12
 800868c:	693a      	ldr	r2, [r7, #16]
 800868e:	4313      	orrs	r3, r2
 8008690:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008698:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	011b      	lsls	r3, r3, #4
 800869e:	697a      	ldr	r2, [r7, #20]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	697a      	ldr	r2, [r7, #20]
 80086ae:	621a      	str	r2, [r3, #32]
}
 80086b0:	bf00      	nop
 80086b2:	371c      	adds	r7, #28
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bc80      	pop	{r7}
 80086b8:	4770      	bx	lr

080086ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b085      	sub	sp, #20
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086d2:	683a      	ldr	r2, [r7, #0]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	f043 0307 	orr.w	r3, r3, #7
 80086dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	609a      	str	r2, [r3, #8]
}
 80086e4:	bf00      	nop
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bc80      	pop	{r7}
 80086ec:	4770      	bx	lr

080086ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b087      	sub	sp, #28
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	60f8      	str	r0, [r7, #12]
 80086f6:	60b9      	str	r1, [r7, #8]
 80086f8:	607a      	str	r2, [r7, #4]
 80086fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008708:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	021a      	lsls	r2, r3, #8
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	431a      	orrs	r2, r3
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	4313      	orrs	r3, r2
 8008716:	697a      	ldr	r2, [r7, #20]
 8008718:	4313      	orrs	r3, r2
 800871a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	609a      	str	r2, [r3, #8]
}
 8008722:	bf00      	nop
 8008724:	371c      	adds	r7, #28
 8008726:	46bd      	mov	sp, r7
 8008728:	bc80      	pop	{r7}
 800872a:	4770      	bx	lr

0800872c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800872c:	b480      	push	{r7}
 800872e:	b087      	sub	sp, #28
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	f003 031f 	and.w	r3, r3, #31
 800873e:	2201      	movs	r2, #1
 8008740:	fa02 f303 	lsl.w	r3, r2, r3
 8008744:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6a1a      	ldr	r2, [r3, #32]
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	43db      	mvns	r3, r3
 800874e:	401a      	ands	r2, r3
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6a1a      	ldr	r2, [r3, #32]
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	f003 031f 	and.w	r3, r3, #31
 800875e:	6879      	ldr	r1, [r7, #4]
 8008760:	fa01 f303 	lsl.w	r3, r1, r3
 8008764:	431a      	orrs	r2, r3
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	621a      	str	r2, [r3, #32]
}
 800876a:	bf00      	nop
 800876c:	371c      	adds	r7, #28
 800876e:	46bd      	mov	sp, r7
 8008770:	bc80      	pop	{r7}
 8008772:	4770      	bx	lr

08008774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008784:	2b01      	cmp	r3, #1
 8008786:	d101      	bne.n	800878c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008788:	2302      	movs	r3, #2
 800878a:	e046      	b.n	800881a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2202      	movs	r2, #2
 8008798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a16      	ldr	r2, [pc, #88]	; (8008824 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d00e      	beq.n	80087ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087d8:	d009      	beq.n	80087ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a12      	ldr	r2, [pc, #72]	; (8008828 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d004      	beq.n	80087ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a10      	ldr	r2, [pc, #64]	; (800882c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d10c      	bne.n	8008808 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	68ba      	ldr	r2, [r7, #8]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3714      	adds	r7, #20
 800881e:	46bd      	mov	sp, r7
 8008820:	bc80      	pop	{r7}
 8008822:	4770      	bx	lr
 8008824:	40012c00 	.word	0x40012c00
 8008828:	40000400 	.word	0x40000400
 800882c:	40000800 	.word	0x40000800

08008830 <__errno>:
 8008830:	4b01      	ldr	r3, [pc, #4]	; (8008838 <__errno+0x8>)
 8008832:	6818      	ldr	r0, [r3, #0]
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	20000070 	.word	0x20000070

0800883c <__libc_init_array>:
 800883c:	b570      	push	{r4, r5, r6, lr}
 800883e:	2600      	movs	r6, #0
 8008840:	4d0c      	ldr	r5, [pc, #48]	; (8008874 <__libc_init_array+0x38>)
 8008842:	4c0d      	ldr	r4, [pc, #52]	; (8008878 <__libc_init_array+0x3c>)
 8008844:	1b64      	subs	r4, r4, r5
 8008846:	10a4      	asrs	r4, r4, #2
 8008848:	42a6      	cmp	r6, r4
 800884a:	d109      	bne.n	8008860 <__libc_init_array+0x24>
 800884c:	f000 fc48 	bl	80090e0 <_init>
 8008850:	2600      	movs	r6, #0
 8008852:	4d0a      	ldr	r5, [pc, #40]	; (800887c <__libc_init_array+0x40>)
 8008854:	4c0a      	ldr	r4, [pc, #40]	; (8008880 <__libc_init_array+0x44>)
 8008856:	1b64      	subs	r4, r4, r5
 8008858:	10a4      	asrs	r4, r4, #2
 800885a:	42a6      	cmp	r6, r4
 800885c:	d105      	bne.n	800886a <__libc_init_array+0x2e>
 800885e:	bd70      	pop	{r4, r5, r6, pc}
 8008860:	f855 3b04 	ldr.w	r3, [r5], #4
 8008864:	4798      	blx	r3
 8008866:	3601      	adds	r6, #1
 8008868:	e7ee      	b.n	8008848 <__libc_init_array+0xc>
 800886a:	f855 3b04 	ldr.w	r3, [r5], #4
 800886e:	4798      	blx	r3
 8008870:	3601      	adds	r6, #1
 8008872:	e7f2      	b.n	800885a <__libc_init_array+0x1e>
 8008874:	0800915c 	.word	0x0800915c
 8008878:	0800915c 	.word	0x0800915c
 800887c:	0800915c 	.word	0x0800915c
 8008880:	08009160 	.word	0x08009160

08008884 <memset>:
 8008884:	4603      	mov	r3, r0
 8008886:	4402      	add	r2, r0
 8008888:	4293      	cmp	r3, r2
 800888a:	d100      	bne.n	800888e <memset+0xa>
 800888c:	4770      	bx	lr
 800888e:	f803 1b01 	strb.w	r1, [r3], #1
 8008892:	e7f9      	b.n	8008888 <memset+0x4>

08008894 <sqrt>:
 8008894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008896:	4606      	mov	r6, r0
 8008898:	460f      	mov	r7, r1
 800889a:	f000 f841 	bl	8008920 <__ieee754_sqrt>
 800889e:	4632      	mov	r2, r6
 80088a0:	4604      	mov	r4, r0
 80088a2:	460d      	mov	r5, r1
 80088a4:	463b      	mov	r3, r7
 80088a6:	4630      	mov	r0, r6
 80088a8:	4639      	mov	r1, r7
 80088aa:	f7f8 f8a7 	bl	80009fc <__aeabi_dcmpun>
 80088ae:	b990      	cbnz	r0, 80088d6 <sqrt+0x42>
 80088b0:	2200      	movs	r2, #0
 80088b2:	2300      	movs	r3, #0
 80088b4:	4630      	mov	r0, r6
 80088b6:	4639      	mov	r1, r7
 80088b8:	f7f8 f878 	bl	80009ac <__aeabi_dcmplt>
 80088bc:	b158      	cbz	r0, 80088d6 <sqrt+0x42>
 80088be:	f7ff ffb7 	bl	8008830 <__errno>
 80088c2:	2321      	movs	r3, #33	; 0x21
 80088c4:	2200      	movs	r2, #0
 80088c6:	6003      	str	r3, [r0, #0]
 80088c8:	2300      	movs	r3, #0
 80088ca:	4610      	mov	r0, r2
 80088cc:	4619      	mov	r1, r3
 80088ce:	f7f7 ff25 	bl	800071c <__aeabi_ddiv>
 80088d2:	4604      	mov	r4, r0
 80088d4:	460d      	mov	r5, r1
 80088d6:	4620      	mov	r0, r4
 80088d8:	4629      	mov	r1, r5
 80088da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080088dc <asinf>:
 80088dc:	b538      	push	{r3, r4, r5, lr}
 80088de:	4604      	mov	r4, r0
 80088e0:	f000 f8ce 	bl	8008a80 <__ieee754_asinf>
 80088e4:	4621      	mov	r1, r4
 80088e6:	4605      	mov	r5, r0
 80088e8:	4620      	mov	r0, r4
 80088ea:	f7f8 fbe9 	bl	80010c0 <__aeabi_fcmpun>
 80088ee:	b980      	cbnz	r0, 8008912 <asinf+0x36>
 80088f0:	4620      	mov	r0, r4
 80088f2:	f000 fbed 	bl	80090d0 <fabsf>
 80088f6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80088fa:	f7f8 fbd7 	bl	80010ac <__aeabi_fcmpgt>
 80088fe:	b140      	cbz	r0, 8008912 <asinf+0x36>
 8008900:	f7ff ff96 	bl	8008830 <__errno>
 8008904:	2321      	movs	r3, #33	; 0x21
 8008906:	6003      	str	r3, [r0, #0]
 8008908:	4803      	ldr	r0, [pc, #12]	; (8008918 <asinf+0x3c>)
 800890a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800890e:	f000 bbe3 	b.w	80090d8 <nanf>
 8008912:	4628      	mov	r0, r5
 8008914:	bd38      	pop	{r3, r4, r5, pc}
 8008916:	bf00      	nop
 8008918:	08009122 	.word	0x08009122

0800891c <atan2f>:
 800891c:	f000 b9f4 	b.w	8008d08 <__ieee754_atan2f>

08008920 <__ieee754_sqrt>:
 8008920:	f8df c158 	ldr.w	ip, [pc, #344]	; 8008a7c <__ieee754_sqrt+0x15c>
 8008924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008928:	ea3c 0c01 	bics.w	ip, ip, r1
 800892c:	4606      	mov	r6, r0
 800892e:	460d      	mov	r5, r1
 8008930:	460c      	mov	r4, r1
 8008932:	460a      	mov	r2, r1
 8008934:	4607      	mov	r7, r0
 8008936:	4603      	mov	r3, r0
 8008938:	d10f      	bne.n	800895a <__ieee754_sqrt+0x3a>
 800893a:	4602      	mov	r2, r0
 800893c:	460b      	mov	r3, r1
 800893e:	f7f7 fdc3 	bl	80004c8 <__aeabi_dmul>
 8008942:	4602      	mov	r2, r0
 8008944:	460b      	mov	r3, r1
 8008946:	4630      	mov	r0, r6
 8008948:	4629      	mov	r1, r5
 800894a:	f7f7 fc07 	bl	800015c <__adddf3>
 800894e:	4606      	mov	r6, r0
 8008950:	460d      	mov	r5, r1
 8008952:	4630      	mov	r0, r6
 8008954:	4629      	mov	r1, r5
 8008956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800895a:	2900      	cmp	r1, #0
 800895c:	dc0e      	bgt.n	800897c <__ieee754_sqrt+0x5c>
 800895e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008962:	ea5c 0707 	orrs.w	r7, ip, r7
 8008966:	d0f4      	beq.n	8008952 <__ieee754_sqrt+0x32>
 8008968:	b141      	cbz	r1, 800897c <__ieee754_sqrt+0x5c>
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	f7f7 fbf3 	bl	8000158 <__aeabi_dsub>
 8008972:	4602      	mov	r2, r0
 8008974:	460b      	mov	r3, r1
 8008976:	f7f7 fed1 	bl	800071c <__aeabi_ddiv>
 800897a:	e7e8      	b.n	800894e <__ieee754_sqrt+0x2e>
 800897c:	1521      	asrs	r1, r4, #20
 800897e:	d075      	beq.n	8008a6c <__ieee754_sqrt+0x14c>
 8008980:	07cc      	lsls	r4, r1, #31
 8008982:	f04f 0400 	mov.w	r4, #0
 8008986:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800898a:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800898e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008992:	bf5e      	ittt	pl
 8008994:	0fd9      	lsrpl	r1, r3, #31
 8008996:	005b      	lslpl	r3, r3, #1
 8008998:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800899c:	0fd9      	lsrs	r1, r3, #31
 800899e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80089a2:	2516      	movs	r5, #22
 80089a4:	4620      	mov	r0, r4
 80089a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80089aa:	107f      	asrs	r7, r7, #1
 80089ac:	005b      	lsls	r3, r3, #1
 80089ae:	1846      	adds	r6, r0, r1
 80089b0:	4296      	cmp	r6, r2
 80089b2:	bfde      	ittt	le
 80089b4:	1b92      	suble	r2, r2, r6
 80089b6:	1870      	addle	r0, r6, r1
 80089b8:	1864      	addle	r4, r4, r1
 80089ba:	0052      	lsls	r2, r2, #1
 80089bc:	3d01      	subs	r5, #1
 80089be:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80089c2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80089c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80089ca:	d1f0      	bne.n	80089ae <__ieee754_sqrt+0x8e>
 80089cc:	4629      	mov	r1, r5
 80089ce:	f04f 0e20 	mov.w	lr, #32
 80089d2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80089d6:	4282      	cmp	r2, r0
 80089d8:	eb06 0c05 	add.w	ip, r6, r5
 80089dc:	dc02      	bgt.n	80089e4 <__ieee754_sqrt+0xc4>
 80089de:	d113      	bne.n	8008a08 <__ieee754_sqrt+0xe8>
 80089e0:	459c      	cmp	ip, r3
 80089e2:	d811      	bhi.n	8008a08 <__ieee754_sqrt+0xe8>
 80089e4:	f1bc 0f00 	cmp.w	ip, #0
 80089e8:	eb0c 0506 	add.w	r5, ip, r6
 80089ec:	da43      	bge.n	8008a76 <__ieee754_sqrt+0x156>
 80089ee:	2d00      	cmp	r5, #0
 80089f0:	db41      	blt.n	8008a76 <__ieee754_sqrt+0x156>
 80089f2:	f100 0801 	add.w	r8, r0, #1
 80089f6:	1a12      	subs	r2, r2, r0
 80089f8:	4640      	mov	r0, r8
 80089fa:	459c      	cmp	ip, r3
 80089fc:	bf88      	it	hi
 80089fe:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008a02:	eba3 030c 	sub.w	r3, r3, ip
 8008a06:	4431      	add	r1, r6
 8008a08:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008a0c:	f1be 0e01 	subs.w	lr, lr, #1
 8008a10:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8008a14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a18:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008a1c:	d1db      	bne.n	80089d6 <__ieee754_sqrt+0xb6>
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	d006      	beq.n	8008a30 <__ieee754_sqrt+0x110>
 8008a22:	1c48      	adds	r0, r1, #1
 8008a24:	bf0b      	itete	eq
 8008a26:	4671      	moveq	r1, lr
 8008a28:	3101      	addne	r1, #1
 8008a2a:	3401      	addeq	r4, #1
 8008a2c:	f021 0101 	bicne.w	r1, r1, #1
 8008a30:	1063      	asrs	r3, r4, #1
 8008a32:	0849      	lsrs	r1, r1, #1
 8008a34:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008a38:	07e2      	lsls	r2, r4, #31
 8008a3a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008a3e:	bf48      	it	mi
 8008a40:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008a44:	460e      	mov	r6, r1
 8008a46:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008a4a:	e782      	b.n	8008952 <__ieee754_sqrt+0x32>
 8008a4c:	0ada      	lsrs	r2, r3, #11
 8008a4e:	3815      	subs	r0, #21
 8008a50:	055b      	lsls	r3, r3, #21
 8008a52:	2a00      	cmp	r2, #0
 8008a54:	d0fa      	beq.n	8008a4c <__ieee754_sqrt+0x12c>
 8008a56:	02d5      	lsls	r5, r2, #11
 8008a58:	d50a      	bpl.n	8008a70 <__ieee754_sqrt+0x150>
 8008a5a:	f1c1 0420 	rsb	r4, r1, #32
 8008a5e:	fa23 f404 	lsr.w	r4, r3, r4
 8008a62:	1e4d      	subs	r5, r1, #1
 8008a64:	408b      	lsls	r3, r1
 8008a66:	4322      	orrs	r2, r4
 8008a68:	1b41      	subs	r1, r0, r5
 8008a6a:	e789      	b.n	8008980 <__ieee754_sqrt+0x60>
 8008a6c:	4608      	mov	r0, r1
 8008a6e:	e7f0      	b.n	8008a52 <__ieee754_sqrt+0x132>
 8008a70:	0052      	lsls	r2, r2, #1
 8008a72:	3101      	adds	r1, #1
 8008a74:	e7ef      	b.n	8008a56 <__ieee754_sqrt+0x136>
 8008a76:	4680      	mov	r8, r0
 8008a78:	e7bd      	b.n	80089f6 <__ieee754_sqrt+0xd6>
 8008a7a:	bf00      	nop
 8008a7c:	7ff00000 	.word	0x7ff00000

08008a80 <__ieee754_asinf>:
 8008a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a84:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8008a88:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8008a8c:	4604      	mov	r4, r0
 8008a8e:	4605      	mov	r5, r0
 8008a90:	d10c      	bne.n	8008aac <__ieee754_asinf+0x2c>
 8008a92:	498d      	ldr	r1, [pc, #564]	; (8008cc8 <__ieee754_asinf+0x248>)
 8008a94:	f7f8 f94e 	bl	8000d34 <__aeabi_fmul>
 8008a98:	498c      	ldr	r1, [pc, #560]	; (8008ccc <__ieee754_asinf+0x24c>)
 8008a9a:	4605      	mov	r5, r0
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	f7f8 f949 	bl	8000d34 <__aeabi_fmul>
 8008aa2:	4601      	mov	r1, r0
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	f7f8 f83d 	bl	8000b24 <__addsf3>
 8008aaa:	e006      	b.n	8008aba <__ieee754_asinf+0x3a>
 8008aac:	dd07      	ble.n	8008abe <__ieee754_asinf+0x3e>
 8008aae:	4601      	mov	r1, r0
 8008ab0:	f7f8 f836 	bl	8000b20 <__aeabi_fsub>
 8008ab4:	4601      	mov	r1, r0
 8008ab6:	f7f8 f9f1 	bl	8000e9c <__aeabi_fdiv>
 8008aba:	4604      	mov	r4, r0
 8008abc:	e00e      	b.n	8008adc <__ieee754_asinf+0x5c>
 8008abe:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 8008ac2:	da58      	bge.n	8008b76 <__ieee754_asinf+0xf6>
 8008ac4:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 8008ac8:	da0b      	bge.n	8008ae2 <__ieee754_asinf+0x62>
 8008aca:	4981      	ldr	r1, [pc, #516]	; (8008cd0 <__ieee754_asinf+0x250>)
 8008acc:	f7f8 f82a 	bl	8000b24 <__addsf3>
 8008ad0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008ad4:	f7f8 faea 	bl	80010ac <__aeabi_fcmpgt>
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	d04c      	beq.n	8008b76 <__ieee754_asinf+0xf6>
 8008adc:	4620      	mov	r0, r4
 8008ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ae2:	4601      	mov	r1, r0
 8008ae4:	f7f8 f926 	bl	8000d34 <__aeabi_fmul>
 8008ae8:	4605      	mov	r5, r0
 8008aea:	497a      	ldr	r1, [pc, #488]	; (8008cd4 <__ieee754_asinf+0x254>)
 8008aec:	f7f8 f922 	bl	8000d34 <__aeabi_fmul>
 8008af0:	4979      	ldr	r1, [pc, #484]	; (8008cd8 <__ieee754_asinf+0x258>)
 8008af2:	f7f8 f817 	bl	8000b24 <__addsf3>
 8008af6:	4629      	mov	r1, r5
 8008af8:	f7f8 f91c 	bl	8000d34 <__aeabi_fmul>
 8008afc:	4977      	ldr	r1, [pc, #476]	; (8008cdc <__ieee754_asinf+0x25c>)
 8008afe:	f7f8 f80f 	bl	8000b20 <__aeabi_fsub>
 8008b02:	4629      	mov	r1, r5
 8008b04:	f7f8 f916 	bl	8000d34 <__aeabi_fmul>
 8008b08:	4975      	ldr	r1, [pc, #468]	; (8008ce0 <__ieee754_asinf+0x260>)
 8008b0a:	f7f8 f80b 	bl	8000b24 <__addsf3>
 8008b0e:	4629      	mov	r1, r5
 8008b10:	f7f8 f910 	bl	8000d34 <__aeabi_fmul>
 8008b14:	4973      	ldr	r1, [pc, #460]	; (8008ce4 <__ieee754_asinf+0x264>)
 8008b16:	f7f8 f803 	bl	8000b20 <__aeabi_fsub>
 8008b1a:	4629      	mov	r1, r5
 8008b1c:	f7f8 f90a 	bl	8000d34 <__aeabi_fmul>
 8008b20:	4971      	ldr	r1, [pc, #452]	; (8008ce8 <__ieee754_asinf+0x268>)
 8008b22:	f7f7 ffff 	bl	8000b24 <__addsf3>
 8008b26:	4629      	mov	r1, r5
 8008b28:	f7f8 f904 	bl	8000d34 <__aeabi_fmul>
 8008b2c:	496f      	ldr	r1, [pc, #444]	; (8008cec <__ieee754_asinf+0x26c>)
 8008b2e:	4606      	mov	r6, r0
 8008b30:	4628      	mov	r0, r5
 8008b32:	f7f8 f8ff 	bl	8000d34 <__aeabi_fmul>
 8008b36:	496e      	ldr	r1, [pc, #440]	; (8008cf0 <__ieee754_asinf+0x270>)
 8008b38:	f7f7 fff2 	bl	8000b20 <__aeabi_fsub>
 8008b3c:	4629      	mov	r1, r5
 8008b3e:	f7f8 f8f9 	bl	8000d34 <__aeabi_fmul>
 8008b42:	496c      	ldr	r1, [pc, #432]	; (8008cf4 <__ieee754_asinf+0x274>)
 8008b44:	f7f7 ffee 	bl	8000b24 <__addsf3>
 8008b48:	4629      	mov	r1, r5
 8008b4a:	f7f8 f8f3 	bl	8000d34 <__aeabi_fmul>
 8008b4e:	496a      	ldr	r1, [pc, #424]	; (8008cf8 <__ieee754_asinf+0x278>)
 8008b50:	f7f7 ffe6 	bl	8000b20 <__aeabi_fsub>
 8008b54:	4629      	mov	r1, r5
 8008b56:	f7f8 f8ed 	bl	8000d34 <__aeabi_fmul>
 8008b5a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008b5e:	f7f7 ffe1 	bl	8000b24 <__addsf3>
 8008b62:	4601      	mov	r1, r0
 8008b64:	4630      	mov	r0, r6
 8008b66:	f7f8 f999 	bl	8000e9c <__aeabi_fdiv>
 8008b6a:	4621      	mov	r1, r4
 8008b6c:	f7f8 f8e2 	bl	8000d34 <__aeabi_fmul>
 8008b70:	4601      	mov	r1, r0
 8008b72:	4620      	mov	r0, r4
 8008b74:	e797      	b.n	8008aa6 <__ieee754_asinf+0x26>
 8008b76:	4620      	mov	r0, r4
 8008b78:	f000 faaa 	bl	80090d0 <fabsf>
 8008b7c:	4601      	mov	r1, r0
 8008b7e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008b82:	f7f7 ffcd 	bl	8000b20 <__aeabi_fsub>
 8008b86:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008b8a:	f7f8 f8d3 	bl	8000d34 <__aeabi_fmul>
 8008b8e:	4606      	mov	r6, r0
 8008b90:	4950      	ldr	r1, [pc, #320]	; (8008cd4 <__ieee754_asinf+0x254>)
 8008b92:	f7f8 f8cf 	bl	8000d34 <__aeabi_fmul>
 8008b96:	4950      	ldr	r1, [pc, #320]	; (8008cd8 <__ieee754_asinf+0x258>)
 8008b98:	f7f7 ffc4 	bl	8000b24 <__addsf3>
 8008b9c:	4631      	mov	r1, r6
 8008b9e:	f7f8 f8c9 	bl	8000d34 <__aeabi_fmul>
 8008ba2:	494e      	ldr	r1, [pc, #312]	; (8008cdc <__ieee754_asinf+0x25c>)
 8008ba4:	f7f7 ffbc 	bl	8000b20 <__aeabi_fsub>
 8008ba8:	4631      	mov	r1, r6
 8008baa:	f7f8 f8c3 	bl	8000d34 <__aeabi_fmul>
 8008bae:	494c      	ldr	r1, [pc, #304]	; (8008ce0 <__ieee754_asinf+0x260>)
 8008bb0:	f7f7 ffb8 	bl	8000b24 <__addsf3>
 8008bb4:	4631      	mov	r1, r6
 8008bb6:	f7f8 f8bd 	bl	8000d34 <__aeabi_fmul>
 8008bba:	494a      	ldr	r1, [pc, #296]	; (8008ce4 <__ieee754_asinf+0x264>)
 8008bbc:	f7f7 ffb0 	bl	8000b20 <__aeabi_fsub>
 8008bc0:	4631      	mov	r1, r6
 8008bc2:	f7f8 f8b7 	bl	8000d34 <__aeabi_fmul>
 8008bc6:	4948      	ldr	r1, [pc, #288]	; (8008ce8 <__ieee754_asinf+0x268>)
 8008bc8:	f7f7 ffac 	bl	8000b24 <__addsf3>
 8008bcc:	4631      	mov	r1, r6
 8008bce:	f7f8 f8b1 	bl	8000d34 <__aeabi_fmul>
 8008bd2:	4946      	ldr	r1, [pc, #280]	; (8008cec <__ieee754_asinf+0x26c>)
 8008bd4:	4681      	mov	r9, r0
 8008bd6:	4630      	mov	r0, r6
 8008bd8:	f7f8 f8ac 	bl	8000d34 <__aeabi_fmul>
 8008bdc:	4944      	ldr	r1, [pc, #272]	; (8008cf0 <__ieee754_asinf+0x270>)
 8008bde:	f7f7 ff9f 	bl	8000b20 <__aeabi_fsub>
 8008be2:	4631      	mov	r1, r6
 8008be4:	f7f8 f8a6 	bl	8000d34 <__aeabi_fmul>
 8008be8:	4942      	ldr	r1, [pc, #264]	; (8008cf4 <__ieee754_asinf+0x274>)
 8008bea:	f7f7 ff9b 	bl	8000b24 <__addsf3>
 8008bee:	4631      	mov	r1, r6
 8008bf0:	f7f8 f8a0 	bl	8000d34 <__aeabi_fmul>
 8008bf4:	4940      	ldr	r1, [pc, #256]	; (8008cf8 <__ieee754_asinf+0x278>)
 8008bf6:	f7f7 ff93 	bl	8000b20 <__aeabi_fsub>
 8008bfa:	4631      	mov	r1, r6
 8008bfc:	f7f8 f89a 	bl	8000d34 <__aeabi_fmul>
 8008c00:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008c04:	f7f7 ff8e 	bl	8000b24 <__addsf3>
 8008c08:	4682      	mov	sl, r0
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	f000 f902 	bl	8008e14 <__ieee754_sqrtf>
 8008c10:	4b3a      	ldr	r3, [pc, #232]	; (8008cfc <__ieee754_asinf+0x27c>)
 8008c12:	4607      	mov	r7, r0
 8008c14:	4598      	cmp	r8, r3
 8008c16:	dd1a      	ble.n	8008c4e <__ieee754_asinf+0x1ce>
 8008c18:	4651      	mov	r1, sl
 8008c1a:	4648      	mov	r0, r9
 8008c1c:	f7f8 f93e 	bl	8000e9c <__aeabi_fdiv>
 8008c20:	4639      	mov	r1, r7
 8008c22:	f7f8 f887 	bl	8000d34 <__aeabi_fmul>
 8008c26:	4639      	mov	r1, r7
 8008c28:	f7f7 ff7c 	bl	8000b24 <__addsf3>
 8008c2c:	4601      	mov	r1, r0
 8008c2e:	f7f7 ff79 	bl	8000b24 <__addsf3>
 8008c32:	4933      	ldr	r1, [pc, #204]	; (8008d00 <__ieee754_asinf+0x280>)
 8008c34:	f7f7 ff76 	bl	8000b24 <__addsf3>
 8008c38:	4601      	mov	r1, r0
 8008c3a:	4823      	ldr	r0, [pc, #140]	; (8008cc8 <__ieee754_asinf+0x248>)
 8008c3c:	f7f7 ff70 	bl	8000b20 <__aeabi_fsub>
 8008c40:	2d00      	cmp	r5, #0
 8008c42:	4604      	mov	r4, r0
 8008c44:	f73f af4a 	bgt.w	8008adc <__ieee754_asinf+0x5c>
 8008c48:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008c4c:	e735      	b.n	8008aba <__ieee754_asinf+0x3a>
 8008c4e:	4601      	mov	r1, r0
 8008c50:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 8008c54:	f7f7 ff66 	bl	8000b24 <__addsf3>
 8008c58:	4651      	mov	r1, sl
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	4648      	mov	r0, r9
 8008c5e:	f7f8 f91d 	bl	8000e9c <__aeabi_fdiv>
 8008c62:	4601      	mov	r1, r0
 8008c64:	4620      	mov	r0, r4
 8008c66:	f7f8 f865 	bl	8000d34 <__aeabi_fmul>
 8008c6a:	f028 080f 	bic.w	r8, r8, #15
 8008c6e:	4681      	mov	r9, r0
 8008c70:	4641      	mov	r1, r8
 8008c72:	4640      	mov	r0, r8
 8008c74:	f7f8 f85e 	bl	8000d34 <__aeabi_fmul>
 8008c78:	4601      	mov	r1, r0
 8008c7a:	4630      	mov	r0, r6
 8008c7c:	f7f7 ff50 	bl	8000b20 <__aeabi_fsub>
 8008c80:	4641      	mov	r1, r8
 8008c82:	4604      	mov	r4, r0
 8008c84:	4638      	mov	r0, r7
 8008c86:	f7f7 ff4d 	bl	8000b24 <__addsf3>
 8008c8a:	4601      	mov	r1, r0
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f7f8 f905 	bl	8000e9c <__aeabi_fdiv>
 8008c92:	4601      	mov	r1, r0
 8008c94:	f7f7 ff46 	bl	8000b24 <__addsf3>
 8008c98:	4601      	mov	r1, r0
 8008c9a:	480c      	ldr	r0, [pc, #48]	; (8008ccc <__ieee754_asinf+0x24c>)
 8008c9c:	f7f7 ff40 	bl	8000b20 <__aeabi_fsub>
 8008ca0:	4601      	mov	r1, r0
 8008ca2:	4648      	mov	r0, r9
 8008ca4:	f7f7 ff3c 	bl	8000b20 <__aeabi_fsub>
 8008ca8:	4641      	mov	r1, r8
 8008caa:	4604      	mov	r4, r0
 8008cac:	4640      	mov	r0, r8
 8008cae:	f7f7 ff39 	bl	8000b24 <__addsf3>
 8008cb2:	4601      	mov	r1, r0
 8008cb4:	4813      	ldr	r0, [pc, #76]	; (8008d04 <__ieee754_asinf+0x284>)
 8008cb6:	f7f7 ff33 	bl	8000b20 <__aeabi_fsub>
 8008cba:	4601      	mov	r1, r0
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	f7f7 ff2f 	bl	8000b20 <__aeabi_fsub>
 8008cc2:	4601      	mov	r1, r0
 8008cc4:	480f      	ldr	r0, [pc, #60]	; (8008d04 <__ieee754_asinf+0x284>)
 8008cc6:	e7b9      	b.n	8008c3c <__ieee754_asinf+0x1bc>
 8008cc8:	3fc90fdb 	.word	0x3fc90fdb
 8008ccc:	b33bbd2e 	.word	0xb33bbd2e
 8008cd0:	7149f2ca 	.word	0x7149f2ca
 8008cd4:	3811ef08 	.word	0x3811ef08
 8008cd8:	3a4f7f04 	.word	0x3a4f7f04
 8008cdc:	3d241146 	.word	0x3d241146
 8008ce0:	3e4e0aa8 	.word	0x3e4e0aa8
 8008ce4:	3ea6b090 	.word	0x3ea6b090
 8008ce8:	3e2aaaab 	.word	0x3e2aaaab
 8008cec:	3d9dc62e 	.word	0x3d9dc62e
 8008cf0:	3f303361 	.word	0x3f303361
 8008cf4:	4001572d 	.word	0x4001572d
 8008cf8:	4019d139 	.word	0x4019d139
 8008cfc:	3f799999 	.word	0x3f799999
 8008d00:	333bbd2e 	.word	0x333bbd2e
 8008d04:	3f490fdb 	.word	0x3f490fdb

08008d08 <__ieee754_atan2f>:
 8008d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d0a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008d0e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8008d12:	4603      	mov	r3, r0
 8008d14:	dc05      	bgt.n	8008d22 <__ieee754_atan2f+0x1a>
 8008d16:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8008d1a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008d1e:	4607      	mov	r7, r0
 8008d20:	dd04      	ble.n	8008d2c <__ieee754_atan2f+0x24>
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7f7 fefe 	bl	8000b24 <__addsf3>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	e011      	b.n	8008d50 <__ieee754_atan2f+0x48>
 8008d2c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8008d30:	d103      	bne.n	8008d3a <__ieee754_atan2f+0x32>
 8008d32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008d36:	f000 b8bf 	b.w	8008eb8 <atanf>
 8008d3a:	178c      	asrs	r4, r1, #30
 8008d3c:	f004 0402 	and.w	r4, r4, #2
 8008d40:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008d44:	b932      	cbnz	r2, 8008d54 <__ieee754_atan2f+0x4c>
 8008d46:	2c02      	cmp	r4, #2
 8008d48:	d04c      	beq.n	8008de4 <__ieee754_atan2f+0xdc>
 8008d4a:	2c03      	cmp	r4, #3
 8008d4c:	d100      	bne.n	8008d50 <__ieee754_atan2f+0x48>
 8008d4e:	4b29      	ldr	r3, [pc, #164]	; (8008df4 <__ieee754_atan2f+0xec>)
 8008d50:	4618      	mov	r0, r3
 8008d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d54:	b91e      	cbnz	r6, 8008d5e <__ieee754_atan2f+0x56>
 8008d56:	2f00      	cmp	r7, #0
 8008d58:	da4a      	bge.n	8008df0 <__ieee754_atan2f+0xe8>
 8008d5a:	4b27      	ldr	r3, [pc, #156]	; (8008df8 <__ieee754_atan2f+0xf0>)
 8008d5c:	e7f8      	b.n	8008d50 <__ieee754_atan2f+0x48>
 8008d5e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8008d62:	d10e      	bne.n	8008d82 <__ieee754_atan2f+0x7a>
 8008d64:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008d68:	f104 34ff 	add.w	r4, r4, #4294967295
 8008d6c:	d105      	bne.n	8008d7a <__ieee754_atan2f+0x72>
 8008d6e:	2c02      	cmp	r4, #2
 8008d70:	d83a      	bhi.n	8008de8 <__ieee754_atan2f+0xe0>
 8008d72:	4b22      	ldr	r3, [pc, #136]	; (8008dfc <__ieee754_atan2f+0xf4>)
 8008d74:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008d78:	e7ea      	b.n	8008d50 <__ieee754_atan2f+0x48>
 8008d7a:	2c02      	cmp	r4, #2
 8008d7c:	d836      	bhi.n	8008dec <__ieee754_atan2f+0xe4>
 8008d7e:	4b20      	ldr	r3, [pc, #128]	; (8008e00 <__ieee754_atan2f+0xf8>)
 8008d80:	e7f8      	b.n	8008d74 <__ieee754_atan2f+0x6c>
 8008d82:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008d86:	d0e6      	beq.n	8008d56 <__ieee754_atan2f+0x4e>
 8008d88:	1b92      	subs	r2, r2, r6
 8008d8a:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8008d8e:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8008d92:	da17      	bge.n	8008dc4 <__ieee754_atan2f+0xbc>
 8008d94:	2900      	cmp	r1, #0
 8008d96:	da01      	bge.n	8008d9c <__ieee754_atan2f+0x94>
 8008d98:	303c      	adds	r0, #60	; 0x3c
 8008d9a:	db15      	blt.n	8008dc8 <__ieee754_atan2f+0xc0>
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7f8 f87d 	bl	8000e9c <__aeabi_fdiv>
 8008da2:	f000 f995 	bl	80090d0 <fabsf>
 8008da6:	f000 f887 	bl	8008eb8 <atanf>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2c01      	cmp	r4, #1
 8008dae:	d00d      	beq.n	8008dcc <__ieee754_atan2f+0xc4>
 8008db0:	2c02      	cmp	r4, #2
 8008db2:	d00e      	beq.n	8008dd2 <__ieee754_atan2f+0xca>
 8008db4:	2c00      	cmp	r4, #0
 8008db6:	d0cb      	beq.n	8008d50 <__ieee754_atan2f+0x48>
 8008db8:	4912      	ldr	r1, [pc, #72]	; (8008e04 <__ieee754_atan2f+0xfc>)
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7f7 feb2 	bl	8000b24 <__addsf3>
 8008dc0:	4911      	ldr	r1, [pc, #68]	; (8008e08 <__ieee754_atan2f+0x100>)
 8008dc2:	e00c      	b.n	8008dde <__ieee754_atan2f+0xd6>
 8008dc4:	4b11      	ldr	r3, [pc, #68]	; (8008e0c <__ieee754_atan2f+0x104>)
 8008dc6:	e7f1      	b.n	8008dac <__ieee754_atan2f+0xa4>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	e7ef      	b.n	8008dac <__ieee754_atan2f+0xa4>
 8008dcc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008dd0:	e7be      	b.n	8008d50 <__ieee754_atan2f+0x48>
 8008dd2:	490c      	ldr	r1, [pc, #48]	; (8008e04 <__ieee754_atan2f+0xfc>)
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7f7 fea5 	bl	8000b24 <__addsf3>
 8008dda:	4601      	mov	r1, r0
 8008ddc:	480a      	ldr	r0, [pc, #40]	; (8008e08 <__ieee754_atan2f+0x100>)
 8008dde:	f7f7 fe9f 	bl	8000b20 <__aeabi_fsub>
 8008de2:	e7a1      	b.n	8008d28 <__ieee754_atan2f+0x20>
 8008de4:	4b08      	ldr	r3, [pc, #32]	; (8008e08 <__ieee754_atan2f+0x100>)
 8008de6:	e7b3      	b.n	8008d50 <__ieee754_atan2f+0x48>
 8008de8:	4b09      	ldr	r3, [pc, #36]	; (8008e10 <__ieee754_atan2f+0x108>)
 8008dea:	e7b1      	b.n	8008d50 <__ieee754_atan2f+0x48>
 8008dec:	2300      	movs	r3, #0
 8008dee:	e7af      	b.n	8008d50 <__ieee754_atan2f+0x48>
 8008df0:	4b06      	ldr	r3, [pc, #24]	; (8008e0c <__ieee754_atan2f+0x104>)
 8008df2:	e7ad      	b.n	8008d50 <__ieee754_atan2f+0x48>
 8008df4:	c0490fdb 	.word	0xc0490fdb
 8008df8:	bfc90fdb 	.word	0xbfc90fdb
 8008dfc:	08009124 	.word	0x08009124
 8008e00:	08009130 	.word	0x08009130
 8008e04:	33bbbd2e 	.word	0x33bbbd2e
 8008e08:	40490fdb 	.word	0x40490fdb
 8008e0c:	3fc90fdb 	.word	0x3fc90fdb
 8008e10:	3f490fdb 	.word	0x3f490fdb

08008e14 <__ieee754_sqrtf>:
 8008e14:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8008e18:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008e1c:	b570      	push	{r4, r5, r6, lr}
 8008e1e:	4603      	mov	r3, r0
 8008e20:	4604      	mov	r4, r0
 8008e22:	d309      	bcc.n	8008e38 <__ieee754_sqrtf+0x24>
 8008e24:	4601      	mov	r1, r0
 8008e26:	f7f7 ff85 	bl	8000d34 <__aeabi_fmul>
 8008e2a:	4601      	mov	r1, r0
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	f7f7 fe79 	bl	8000b24 <__addsf3>
 8008e32:	4604      	mov	r4, r0
 8008e34:	4620      	mov	r0, r4
 8008e36:	bd70      	pop	{r4, r5, r6, pc}
 8008e38:	2a00      	cmp	r2, #0
 8008e3a:	d0fb      	beq.n	8008e34 <__ieee754_sqrtf+0x20>
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	da06      	bge.n	8008e4e <__ieee754_sqrtf+0x3a>
 8008e40:	4601      	mov	r1, r0
 8008e42:	f7f7 fe6d 	bl	8000b20 <__aeabi_fsub>
 8008e46:	4601      	mov	r1, r0
 8008e48:	f7f8 f828 	bl	8000e9c <__aeabi_fdiv>
 8008e4c:	e7f1      	b.n	8008e32 <__ieee754_sqrtf+0x1e>
 8008e4e:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8008e52:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8008e56:	d029      	beq.n	8008eac <__ieee754_sqrtf+0x98>
 8008e58:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8008e5c:	07cb      	lsls	r3, r1, #31
 8008e5e:	f04f 0300 	mov.w	r3, #0
 8008e62:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8008e66:	f04f 0419 	mov.w	r4, #25
 8008e6a:	461e      	mov	r6, r3
 8008e6c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8008e70:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008e74:	bf58      	it	pl
 8008e76:	0052      	lslpl	r2, r2, #1
 8008e78:	1040      	asrs	r0, r0, #1
 8008e7a:	0052      	lsls	r2, r2, #1
 8008e7c:	1875      	adds	r5, r6, r1
 8008e7e:	4295      	cmp	r5, r2
 8008e80:	bfde      	ittt	le
 8008e82:	186e      	addle	r6, r5, r1
 8008e84:	1b52      	suble	r2, r2, r5
 8008e86:	185b      	addle	r3, r3, r1
 8008e88:	3c01      	subs	r4, #1
 8008e8a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008e8e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008e92:	d1f3      	bne.n	8008e7c <__ieee754_sqrtf+0x68>
 8008e94:	b112      	cbz	r2, 8008e9c <__ieee754_sqrtf+0x88>
 8008e96:	3301      	adds	r3, #1
 8008e98:	f023 0301 	bic.w	r3, r3, #1
 8008e9c:	105c      	asrs	r4, r3, #1
 8008e9e:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8008ea2:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8008ea6:	e7c5      	b.n	8008e34 <__ieee754_sqrtf+0x20>
 8008ea8:	005b      	lsls	r3, r3, #1
 8008eaa:	3201      	adds	r2, #1
 8008eac:	0218      	lsls	r0, r3, #8
 8008eae:	d5fb      	bpl.n	8008ea8 <__ieee754_sqrtf+0x94>
 8008eb0:	3a01      	subs	r2, #1
 8008eb2:	1a89      	subs	r1, r1, r2
 8008eb4:	e7d0      	b.n	8008e58 <__ieee754_sqrtf+0x44>
	...

08008eb8 <atanf>:
 8008eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ebc:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8008ec0:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8008ec4:	4604      	mov	r4, r0
 8008ec6:	4680      	mov	r8, r0
 8008ec8:	db0e      	blt.n	8008ee8 <atanf+0x30>
 8008eca:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008ece:	dd04      	ble.n	8008eda <atanf+0x22>
 8008ed0:	4601      	mov	r1, r0
 8008ed2:	f7f7 fe27 	bl	8000b24 <__addsf3>
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	e003      	b.n	8008ee2 <atanf+0x2a>
 8008eda:	2800      	cmp	r0, #0
 8008edc:	f300 80ce 	bgt.w	800907c <atanf+0x1c4>
 8008ee0:	4c67      	ldr	r4, [pc, #412]	; (8009080 <atanf+0x1c8>)
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ee8:	4b66      	ldr	r3, [pc, #408]	; (8009084 <atanf+0x1cc>)
 8008eea:	429d      	cmp	r5, r3
 8008eec:	dc0e      	bgt.n	8008f0c <atanf+0x54>
 8008eee:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8008ef2:	da08      	bge.n	8008f06 <atanf+0x4e>
 8008ef4:	4964      	ldr	r1, [pc, #400]	; (8009088 <atanf+0x1d0>)
 8008ef6:	f7f7 fe15 	bl	8000b24 <__addsf3>
 8008efa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008efe:	f7f8 f8d5 	bl	80010ac <__aeabi_fcmpgt>
 8008f02:	2800      	cmp	r0, #0
 8008f04:	d1ed      	bne.n	8008ee2 <atanf+0x2a>
 8008f06:	f04f 36ff 	mov.w	r6, #4294967295
 8008f0a:	e01c      	b.n	8008f46 <atanf+0x8e>
 8008f0c:	f000 f8e0 	bl	80090d0 <fabsf>
 8008f10:	4b5e      	ldr	r3, [pc, #376]	; (800908c <atanf+0x1d4>)
 8008f12:	4604      	mov	r4, r0
 8008f14:	429d      	cmp	r5, r3
 8008f16:	dc7c      	bgt.n	8009012 <atanf+0x15a>
 8008f18:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8008f1c:	429d      	cmp	r5, r3
 8008f1e:	dc67      	bgt.n	8008ff0 <atanf+0x138>
 8008f20:	4601      	mov	r1, r0
 8008f22:	f7f7 fdff 	bl	8000b24 <__addsf3>
 8008f26:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008f2a:	f7f7 fdf9 	bl	8000b20 <__aeabi_fsub>
 8008f2e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008f32:	4605      	mov	r5, r0
 8008f34:	4620      	mov	r0, r4
 8008f36:	f7f7 fdf5 	bl	8000b24 <__addsf3>
 8008f3a:	4601      	mov	r1, r0
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	f7f7 ffad 	bl	8000e9c <__aeabi_fdiv>
 8008f42:	2600      	movs	r6, #0
 8008f44:	4604      	mov	r4, r0
 8008f46:	4621      	mov	r1, r4
 8008f48:	4620      	mov	r0, r4
 8008f4a:	f7f7 fef3 	bl	8000d34 <__aeabi_fmul>
 8008f4e:	4601      	mov	r1, r0
 8008f50:	4607      	mov	r7, r0
 8008f52:	f7f7 feef 	bl	8000d34 <__aeabi_fmul>
 8008f56:	4605      	mov	r5, r0
 8008f58:	494d      	ldr	r1, [pc, #308]	; (8009090 <atanf+0x1d8>)
 8008f5a:	f7f7 feeb 	bl	8000d34 <__aeabi_fmul>
 8008f5e:	494d      	ldr	r1, [pc, #308]	; (8009094 <atanf+0x1dc>)
 8008f60:	f7f7 fde0 	bl	8000b24 <__addsf3>
 8008f64:	4629      	mov	r1, r5
 8008f66:	f7f7 fee5 	bl	8000d34 <__aeabi_fmul>
 8008f6a:	494b      	ldr	r1, [pc, #300]	; (8009098 <atanf+0x1e0>)
 8008f6c:	f7f7 fdda 	bl	8000b24 <__addsf3>
 8008f70:	4629      	mov	r1, r5
 8008f72:	f7f7 fedf 	bl	8000d34 <__aeabi_fmul>
 8008f76:	4949      	ldr	r1, [pc, #292]	; (800909c <atanf+0x1e4>)
 8008f78:	f7f7 fdd4 	bl	8000b24 <__addsf3>
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	f7f7 fed9 	bl	8000d34 <__aeabi_fmul>
 8008f82:	4947      	ldr	r1, [pc, #284]	; (80090a0 <atanf+0x1e8>)
 8008f84:	f7f7 fdce 	bl	8000b24 <__addsf3>
 8008f88:	4629      	mov	r1, r5
 8008f8a:	f7f7 fed3 	bl	8000d34 <__aeabi_fmul>
 8008f8e:	4945      	ldr	r1, [pc, #276]	; (80090a4 <atanf+0x1ec>)
 8008f90:	f7f7 fdc8 	bl	8000b24 <__addsf3>
 8008f94:	4639      	mov	r1, r7
 8008f96:	f7f7 fecd 	bl	8000d34 <__aeabi_fmul>
 8008f9a:	4943      	ldr	r1, [pc, #268]	; (80090a8 <atanf+0x1f0>)
 8008f9c:	4607      	mov	r7, r0
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	f7f7 fec8 	bl	8000d34 <__aeabi_fmul>
 8008fa4:	4941      	ldr	r1, [pc, #260]	; (80090ac <atanf+0x1f4>)
 8008fa6:	f7f7 fdbb 	bl	8000b20 <__aeabi_fsub>
 8008faa:	4629      	mov	r1, r5
 8008fac:	f7f7 fec2 	bl	8000d34 <__aeabi_fmul>
 8008fb0:	493f      	ldr	r1, [pc, #252]	; (80090b0 <atanf+0x1f8>)
 8008fb2:	f7f7 fdb5 	bl	8000b20 <__aeabi_fsub>
 8008fb6:	4629      	mov	r1, r5
 8008fb8:	f7f7 febc 	bl	8000d34 <__aeabi_fmul>
 8008fbc:	493d      	ldr	r1, [pc, #244]	; (80090b4 <atanf+0x1fc>)
 8008fbe:	f7f7 fdaf 	bl	8000b20 <__aeabi_fsub>
 8008fc2:	4629      	mov	r1, r5
 8008fc4:	f7f7 feb6 	bl	8000d34 <__aeabi_fmul>
 8008fc8:	493b      	ldr	r1, [pc, #236]	; (80090b8 <atanf+0x200>)
 8008fca:	f7f7 fda9 	bl	8000b20 <__aeabi_fsub>
 8008fce:	4629      	mov	r1, r5
 8008fd0:	f7f7 feb0 	bl	8000d34 <__aeabi_fmul>
 8008fd4:	4601      	mov	r1, r0
 8008fd6:	4638      	mov	r0, r7
 8008fd8:	f7f7 fda4 	bl	8000b24 <__addsf3>
 8008fdc:	4621      	mov	r1, r4
 8008fde:	f7f7 fea9 	bl	8000d34 <__aeabi_fmul>
 8008fe2:	1c73      	adds	r3, r6, #1
 8008fe4:	4601      	mov	r1, r0
 8008fe6:	d133      	bne.n	8009050 <atanf+0x198>
 8008fe8:	4620      	mov	r0, r4
 8008fea:	f7f7 fd99 	bl	8000b20 <__aeabi_fsub>
 8008fee:	e772      	b.n	8008ed6 <atanf+0x1e>
 8008ff0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008ff4:	f7f7 fd94 	bl	8000b20 <__aeabi_fsub>
 8008ff8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008ffc:	4605      	mov	r5, r0
 8008ffe:	4620      	mov	r0, r4
 8009000:	f7f7 fd90 	bl	8000b24 <__addsf3>
 8009004:	4601      	mov	r1, r0
 8009006:	4628      	mov	r0, r5
 8009008:	f7f7 ff48 	bl	8000e9c <__aeabi_fdiv>
 800900c:	2601      	movs	r6, #1
 800900e:	4604      	mov	r4, r0
 8009010:	e799      	b.n	8008f46 <atanf+0x8e>
 8009012:	4b2a      	ldr	r3, [pc, #168]	; (80090bc <atanf+0x204>)
 8009014:	429d      	cmp	r5, r3
 8009016:	dc14      	bgt.n	8009042 <atanf+0x18a>
 8009018:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800901c:	f7f7 fd80 	bl	8000b20 <__aeabi_fsub>
 8009020:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8009024:	4605      	mov	r5, r0
 8009026:	4620      	mov	r0, r4
 8009028:	f7f7 fe84 	bl	8000d34 <__aeabi_fmul>
 800902c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009030:	f7f7 fd78 	bl	8000b24 <__addsf3>
 8009034:	4601      	mov	r1, r0
 8009036:	4628      	mov	r0, r5
 8009038:	f7f7 ff30 	bl	8000e9c <__aeabi_fdiv>
 800903c:	2602      	movs	r6, #2
 800903e:	4604      	mov	r4, r0
 8009040:	e781      	b.n	8008f46 <atanf+0x8e>
 8009042:	4601      	mov	r1, r0
 8009044:	481e      	ldr	r0, [pc, #120]	; (80090c0 <atanf+0x208>)
 8009046:	f7f7 ff29 	bl	8000e9c <__aeabi_fdiv>
 800904a:	2603      	movs	r6, #3
 800904c:	4604      	mov	r4, r0
 800904e:	e77a      	b.n	8008f46 <atanf+0x8e>
 8009050:	4b1c      	ldr	r3, [pc, #112]	; (80090c4 <atanf+0x20c>)
 8009052:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8009056:	f7f7 fd63 	bl	8000b20 <__aeabi_fsub>
 800905a:	4621      	mov	r1, r4
 800905c:	f7f7 fd60 	bl	8000b20 <__aeabi_fsub>
 8009060:	4b19      	ldr	r3, [pc, #100]	; (80090c8 <atanf+0x210>)
 8009062:	4601      	mov	r1, r0
 8009064:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009068:	f7f7 fd5a 	bl	8000b20 <__aeabi_fsub>
 800906c:	f1b8 0f00 	cmp.w	r8, #0
 8009070:	4604      	mov	r4, r0
 8009072:	f6bf af36 	bge.w	8008ee2 <atanf+0x2a>
 8009076:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800907a:	e72c      	b.n	8008ed6 <atanf+0x1e>
 800907c:	4c13      	ldr	r4, [pc, #76]	; (80090cc <atanf+0x214>)
 800907e:	e730      	b.n	8008ee2 <atanf+0x2a>
 8009080:	bfc90fdb 	.word	0xbfc90fdb
 8009084:	3edfffff 	.word	0x3edfffff
 8009088:	7149f2ca 	.word	0x7149f2ca
 800908c:	3f97ffff 	.word	0x3f97ffff
 8009090:	3c8569d7 	.word	0x3c8569d7
 8009094:	3d4bda59 	.word	0x3d4bda59
 8009098:	3d886b35 	.word	0x3d886b35
 800909c:	3dba2e6e 	.word	0x3dba2e6e
 80090a0:	3e124925 	.word	0x3e124925
 80090a4:	3eaaaaab 	.word	0x3eaaaaab
 80090a8:	bd15a221 	.word	0xbd15a221
 80090ac:	3d6ef16b 	.word	0x3d6ef16b
 80090b0:	3d9d8795 	.word	0x3d9d8795
 80090b4:	3de38e38 	.word	0x3de38e38
 80090b8:	3e4ccccd 	.word	0x3e4ccccd
 80090bc:	401bffff 	.word	0x401bffff
 80090c0:	bf800000 	.word	0xbf800000
 80090c4:	0800914c 	.word	0x0800914c
 80090c8:	0800913c 	.word	0x0800913c
 80090cc:	3fc90fdb 	.word	0x3fc90fdb

080090d0 <fabsf>:
 80090d0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80090d4:	4770      	bx	lr
	...

080090d8 <nanf>:
 80090d8:	4800      	ldr	r0, [pc, #0]	; (80090dc <nanf+0x4>)
 80090da:	4770      	bx	lr
 80090dc:	7fc00000 	.word	0x7fc00000

080090e0 <_init>:
 80090e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e2:	bf00      	nop
 80090e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090e6:	bc08      	pop	{r3}
 80090e8:	469e      	mov	lr, r3
 80090ea:	4770      	bx	lr

080090ec <_fini>:
 80090ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ee:	bf00      	nop
 80090f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090f2:	bc08      	pop	{r3}
 80090f4:	469e      	mov	lr, r3
 80090f6:	4770      	bx	lr
